<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蹉跎去</title>
      <link href="/2025/10/31/%E8%B9%89%E8%B7%8E%E5%8E%BB/"/>
      <url>/2025/10/31/%E8%B9%89%E8%B7%8E%E5%8E%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一朵玫瑰正马不停蹄地成为另一朵玫瑰。<br>你是云、是海、是忘却。<br>你也是你曾失去的每一个自己。</p></blockquote><p>美团的会议室名字都是用地名起的。</p><p>现在，我们一群天南海北的实习生局促不安地被收拢在成都的邢台厅里。我瞟一眼左边的西电大哥，低下头发一会呆，觉得这样很呆。盯着电科哥的鞋，又瞟一眼右边的哈工大兄弟，终于彻底变得连喘气都小心翼翼，我作为学历最低的211，深刻理解到斗宗强者为什么释放威压就可以吓死修为较低的杂兵。</p><p>看得出来大家都很焦虑，一方面是因为部门boss突然拉大家过来，会上多半是要聊聊实习转正的事情；另一方面是因为这个会七点半开，晚上八点准时吃餐补下班基本上是做梦了。</p><p>boss笑嘻嘻地问大家，这段时间都有什么想法，觉得自己做得怎么样？我知道他是想活跃气氛。我评估现在的情况很简单：只要接上话就可以了。但是没有一个人说话，也很正常，我知道大家和我一样都很惧怕犯错，因为大家一路上就没犯过什么错。容错率这个词，真的很陌生。</p><p>身边的这群人太过优秀，每个人都是运行完美的最佳实践，他们的人生，仿佛一条精心设计的复杂调用链，环环相扣，步步精准，一眼望不到尽头。在过去无数个分岔路口，只要他们选错一步，哪怕只是一步，就不会坐进今天的会议室里。</p><p>而我，却像一段写得磕磕绊绊的测试代码，能坐在这里，是因为系统宽容地放行了许多非致命警告。靠着一丝侥幸，勉强平稳运行至今。表面看来一切正常，可每次周一例行的代码评审会上，我总是会哗啦哗啦抖落一地无伤大雅但不堪入目的报错信息。</p><p>于是气氛自然而然地沉寂下来，这种感觉实在很微妙，预料之中恰到好处的尴尬，略有点局促，好像洞洞鞋里甩不出去的沙粒之于无处安放的脚指。</p><p>视线在沉默里渐渐失焦，天花板的四个角落逐渐被拉得越来越远，会议室的大屏幕像是一张泡得湿软的纸，紧紧贴在我的脸上。似乎总有一个声音在催着我回答，可是需要回答什么呢？</p><p>我真的很想打破尴尬，哪怕接上一句话就好！可是这个问题也真的难以回答，我重复思考了很多次，希望通过一些微言大义展现自己的深刻，联想到了好多道理和感触，却搞不懂最核心的问题：评价标准是什么？我越发觉得自己大脑性能平庸，在这个要求实时渲染的世界里运行得有些吃力。</p><p>我说的话会不会暴露出我水平不足，万一我说的感想太低能怎么办。到底要做到什么程度才能放心地说出来呢？其实这样失去参照的状态，已经持续了很长时间。那是一种自由的悬浮感，像是站在没有重力的太空里，你可以朝任何方向移动，可是往哪个方向都没有意义。</p><p>小时候，我们受到的教育一直是要和人比较，按照高考比中考重要，中考比小学重要这样层层推算，主线明确、任务明确，是理解上很简单的升级打怪故事。好好读书，考个好分数就是全部的意义。有一条A优线，又有一条A0线，分别是关于一本和985的。虽然这两条线就是生活的几乎全部，老师还是要给你演一下，假装我们学习是为了人的全面发展。实际上你吭哧吭哧刷的每一道题都仅仅为了未来工资单的数字做紧锣密鼓的筹谋。</p><p>上了大学，也有不少被这套说辞蒙骗的人在粉饰太平。可是凭空多出来的各种评价标准不陪任何人演戏——各种支线层出不穷，读研、工作、出国，每一条都迷雾重重。在高中的教室里没教这些，虽然这两年高中很流行来上两节职业发展课，仿佛在期望总共不到两小时的课程能像压缩毛巾一样遇水变大膨胀成三十年的认知。那时在台下刷题的大伙怎么也想不到，再过几年他们就必须比台上夸夸其谈的讲师还懂就业。教室里毛茸茸的脑袋随解题进度起落，落笔的沙沙声和讲师又大又空的规训一起形成诡异的潮汐，仿佛是带货主播正在推销一批毛茸茸的猕猴桃，许诺到货后放两天就会自行催熟。</p><p>而成年后的世界甚至比校园还大得多，更善于隐藏它的边界，像超级马里奥比起塞尔达、毁灭战士之于荒野大镖客。人生的边界不是屏幕边框或空气墙，而是“流程”、“文凭”、“考核”、“预约”，“证明”。中式教育下，急切地想要成长的人，普遍都没有想过一个问题：标准化的成长完成之后，该做什么呢？小马过河冷暖自知，从此不再有一模一样的试卷，不会有刷完就提分的模拟题，更没有统一的排名。当你终于满足了所有的束缚，符合了所有的规则，顺应了所有的期待，世界突然掀桌。</p><p>你接下来要去哪里？你要成为谁？高考完的那一刻，我以为终于长途跋涉到了被预设的天堂，现在看来，路上的十八年，我不过只是攒了满满一汪眼泪，用来泼花世界巨大的谎言。</p><p>大一下某个遥远的下午，我和室友在机房偷偷尝试各种指令，反正不是自己的电脑，反复输入，直到把电脑搞蓝屏，大笑，悄悄重启，无事发生。如今，我是美团标准组件与API组的一员，是几个需求的主R。如果我消失，开周会的时候会缺一份报告，合并到主分支的代码会少几行。</p><p>不过才两年，那个被允许崩溃的少年，就必须要成熟，要稳重，要担得起责任。我已学会了在人生的马路中央反复确认来车，走得小心翼翼。以往看似有着无限可能性的每一天，终究都在极为相似的重复中过去了。</p><p>人生的容错率真的大吗，我看未必。世界太坏太坏，给了绝大多数人和视野不匹配的能力，大家都能清清楚楚地看到千万个灿烂的未来，却都没有办法抵达。年龄大些，看得远些，焦虑的深些。第一个把“我没招了”表达成“落子无悔”的人真的是个天才。</p><p>所谓容错，不过是意味着在做错关键抉择时，人不会像游戏角色那样干脆利落地死翘翘，很少有人在关键抉择失误后直接迎来彻底的毁灭；人生悄然执行了一次服务降级——许多曾经敞开的岔路永远关闭了，人被抛入另一种存在的境遇。许多可能性在无声中坍缩，那些你曾为之燃烧的渴望，并非轰然消逝，而是在某个未被察觉的瞬间，在视野之外被彻底剥离。如同阳光下的冰棍，滴滴答答时并非消失，而是存在的状态被不可逆转地地改变了——从坚实的冰，化为流淌的水，最终归于虚无。</p><p>你在那决定性的瞬间浑然不觉，你甚至没意识到它曾经存在过。只是在多年后的回望中，被一股凉意击中：来路已模糊在地平线下，千里迢迢，关山路远，无可追溯。</p><p>荒诞的是，意识到这一点的瞬间，客观意义上，你从被命运抛掷的客体，一跃成为塑造命运的主体。从此被迫为自己的一切负责，找不到一个可以推诿的借口。正如萨特所言，人是被判决为自由的。这个瞬间下我们会极其清醒地意识到：我是自身每一个选择的集合，路并非自然到了尽头。</p><p>任何命运，无论多么漫长复杂，最终都只反映在一个瞬间，那就是我们彻底醒悟自己究竟是谁的那一刻。那个瞬间之前，我们活在“自欺”中：</p><p>“我不得不做这些无聊的工作。”</p><p>“我天性如此，改不了的。”</p><p>“是命运把我推到了这一步。”</p><p>而觉醒的瞬间，就是看穿这一切都是我们主动选择的结果。不论出于什么原因，也不论合理与否，选择了留在那份工作，选择了维持那个性格，每一个行动、每一次默许、每一个微小的取舍——路是我们亲自走完的。所谓命运，其实没有上帝或命运为你托底，你的未来是一片彻底的空白，完全由你接下来的选择填充。这种空无，让人眩晕。</p><p>好恨！可那又如何？你接下来最多只能主动地为自己选择一个新的方向。这些哲学问题的答案才不是某些决定性瞬间的存档点，往日不再。</p><p>门不能从这一侧打开。</p><blockquote><p>“在所有的时刻，”他接着说，“我都要感谢您，并为您重建我的花园。”<br>“并不存在于所有的时刻，”他微笑着回答。“时间永远分岔，通向无数的将来。”<br>——博尔赫斯《小径分叉的花园》</p></blockquote><p>成都是天府之国，地势是很平的，天气好的日子里，在天府大道的这一段向那一端眺望，就能遥遥看到川西连绵的群山，雪峰巍峨而壮美，似乎触手可及。唯一美中不足的是，在成功到达地平线那边的川西之前，我会先到达腾讯大厦B座，进入工位，开始处理积压的需求，手忙脚乱地流转今天的工单。</p><p>有时候我会想，那些在天府三街上行色匆匆的人们，他们是否也曾在某个时刻，曾站在某个边界前张望？我们都曾试图越过某条边界，但最终还是在规定的路径上行走。只是偶尔，在某个不经意的瞬间——看见一只猫跳上墙头，或是闻到一阵陌生的花香，或是听见远处传来的、不知从哪里来的音乐声——会突然想起，这个世界原来可以有更多的可能性。</p><p>那些可能性并没有消失，只是被推到了视线的边缘，永远在那里，永远无法抵达。而我还在看。看那些亮着的窗户，看下班时电梯里疲惫的面孔，看游戏里空气墙外的贴图，看天府大道那一边的雪山。我知道自己一时半会到不了那里，但只要还在看，那些地方就还没有彻底变成虚无。也许标准答案是，无论选择哪条路，都永远不可能同时拥有自由和意义。</p><p>有一次周末从重庆回来，我请了一整天的假。那天天气很好，风很舒服，我临时起意从成都东坐地铁到大源公园逛了一圈。阳光和煦，微风习习，我心想要是日子一直这样该多好，可是来实习前，我明明就拥有过大把大把这样的日子。</p><p>你不可能同时飞翔和栖息，同时探索和归属，同时是过客和居民。你只能选择，然后顺从地接受一个事实：未来的某个夜晚，你会想象着存在另一个平行宇宙——你选择了另一条路，会不会过得更好一些。</p><p>可是以前我不会这样，小时候我从来没有这样的念头。人的烦恼就是记性太好，如果可以把所有事都忘掉，以后每一天都是个新开始，你说多好。这样我就可以永远留在在科学城八区，停留在那个盘旋在记忆里的午后，走在世纪初最灿烂的阳光里，一群毛头小子刚刚去红梅商店买了辣条，现在要回家去打合金弹头。有个小朋友的爸爸妈妈不在家，所以我们可以放肆地大闹一场了。“是我家的电脑，我两条命，你们一人一条。”两条命的安全感，至今都让我心向往之。</p><p>我已经很久很久没觉得安全了，总是惶惶不可终日，被什么东西推着往前，没有一刻喘息。在这里说句老气横秋的话，这些年里我真的真的，吃了很多很多苦头，我遇到的那些事，比坏蛋冰淇淋第三十九关的超级恐龙、合金弹头第二关道中的日本武士都还要可怕一万倍。</p><p>世界是在不断变化的。爸爸买的可乐会慢慢跑气，糖葫芦放久了会化掉，我要从涪江边的老房子搬去新家，4399的坏蛋冰淇淋，混乱大枪战，疯狂小人战斗，武装原型，玩起来再也不会那样尽兴；玩的最尽兴的FPS，我也开始错失很多从不失手的机会。曾经我想都没想过这些，正如十八岁时以为高考后永无止境的夏天不可能结束。所有一切，除了渐行渐远没有别的选择。那时我没有好好养QQ宠物，有一天打开QQ，突然发现它死掉了。我妈说没关系，十块钱可以救活。</p><p>此后人生再无这样有惊无险的离别。</p><p>高中体育课时在风雨球场的屋檐下躲雨，同学边打篮球边叫嚷，我抬头看见盘旋着的乌云和挣脱的阳光，心里舒坦；高考完回到涪江边，在江堤边大字躺，眯着眼，热辣的阳光扎在身上，像成长的刺痛；过年去北海，宁静又清凉的夜晚，瘫坐在阳台的凳子上，仰头望着深邃无垠的夜空。在香悦城5单元1102的落地窗前，我心想我们看的居然是同一片天空。</p><p>所有这些一切回忆都很缓慢，很粘稠，能让人安静下来，又隐隐有点惆怅。吾欲与若复牵黄犬俱出东门逐狡兔，岂可得乎？</p><p>我从来没有像现在这样害怕变化，生活总是猝不及防地甩给我一连串必选的选择，像是用cursor写代码时，屏幕上总不由分说弹出“是否允许修改”的提示：说白了我其实并不清楚你在改什么，只懂个大概，可是我又没时间细想，没别的办法。</p><p>实习这几个月仿佛脱胎换骨，被一场突如其来的风暴卷出了象牙塔，我会在不知觉间犯错——mt说我改的ANR问题忘记考虑异步的时序问题，在线上运行会有风险；和业务联调效果一般，应该把控质量；需求文档写的不太OK，学生气太重。我恍然惊觉自己已经不是学生。</p><p>我的天哪，我不是前两天还在想，要是我是个小朋友就好了吗？不知不觉间，现在居然已经退而求其次，在想要是我一直是个大学生就好了。我当了半辈子小孩，半辈子学生，暂时还没学会当别的。</p><p>人生阶段的结束不是一个句号，应该是一个问号。我是一艘缝缝补补的忒修斯之船，我是否真的拥有过那时的自己？下一次站在过往与未来的分界线上时，我还有几分像现在的自己呢？</p><p>我害怕朝不保夕地意识到，自己早早就自作主张地把一切失去，又后知后觉地朝花夕拾。我很害怕时间的流逝，我恐惧于它的按部就班，循序渐进。因为过去的美好记忆总是让我恋恋不舍——在学生时代的终点抬头一看，前方那片被许诺的未来之地，并没有预留一个坐标清晰的任务点，四顾茫然。我知道要做点什么，却不知道要怎么做。于是就不由自主回头，怀念童年时那个无忧无虑的自己。</p><p>那时的安全感，来自全然的依赖，和无条件的被保护。用几个沙发靠垫和枕头围成一个城堡，世界被压缩成一个几平方米的几何空间，边界之外的一切与我无关了，我知道有大人承担一切。躲在城堡里，听着外面的声音：电视放着新闻，大人说听不懂的话，锅碗瓢盆叮当响。那些声音是一种保证，它们说：世界的确是在飞快地转，但是有人看着，你什么都不用做。</p><p>事到如今，安全感慢慢变成了需要自己不停去创造和维护的东西，边界无限扩大，责任也随之而来。我不再需要实际的城堡，而是成为了那个城堡，这种割裂感，也让我意识到当下的一切都在持续地、无可挽回地失去，我总是在感受到幸福的时刻很煞风景地想到：十年后的自己一定会怀念这一刻吧，于是眼前灿烂明媚的盛景蒙上一层淡淡的灰。</p><p>我们迷恋的或许不是那几块沙发靠垫，而是那个不需要我们承担“创造”责任的时候。在那个被美化的过去里，安全感是递到手里的，幸福是摆好的。这种怀旧，与其说是对童年的迷恋，不如说是一种对现在的逃避幻想——至少我还能躲回那个曾被全世界托举的过去。</p><p>想引一段世说新语的原文。曾经嵇康、阮籍一众在竹林中畅饮，见王戎到来，阮籍便打趣：“俗物已复来败人意！”王戎听罢一笑：“卿辈意，亦复可败邪？”</p><p>那时的王戎，正当弱冠，是竹林里最年轻的影子，眼前是清谈与美酒，身后是无限舒展的光明前途。他面对大他一两轮的前辈们，打趣道，“你们这群神人的意兴也能败坏吗？”意气风发，把酒临风，好不潇洒。后来数十载的风沙缭乱，权海浮沉，暂且按下不表——</p><p>直到故事的另一头：“王濬冲为尚书令，著公服，乘轺车，经黄公酒垆下过。顾谓后车客：‘吾昔与嵇叔夜、阮嗣宗共酣饮于此垆。竹林之游，亦预其末。自嵇生夭、阮公亡以来，便为时所羁绁。今日视此虽近，邈若山河。’”</p><p>在高三那年的模拟考上看到这篇，如遭雷击，感慨良久，差点没写完作文。</p><p>实习时国庆放假回绵阳，火车站正在修，我差点找不到路，鬼使神差绕到初中第一次被带去上网的网吧楼下。招牌换了，门面修了，我独自站在街对面，想进去看看却又迈不动步子。暮色四沉，心里有什么东西很重地坠下去，那个熟悉的入口依旧亮着一圈霓虹，光晕朦朦胧胧，和记忆中别无二致。</p><p>记得周五放学没急着回家，先和大伙揣着凑出来的零钱，冲进网吧开了两台未成年临时机。那时玩了一把贾克斯，一把薇恩，都被打爆了。最后选了猫咪挂在钻石同学的卢锡安身上爽杀了一把。我们在二手烟的缭绕里拍桌大笑，把键盘敲得噼啪作响。那时觉得，所谓未来，所谓前程，不过如此，简直轻如烟尘。</p><p>如今，我不再需要费心去开钻空子的临时机，也不必再数着零钱计算能玩几个小时。当年贴在海报上、让我们眼馋不已的传奇皮肤，早已拥有、习惯，以至于腻烦；那些曾以为遥不可及的3A大作，也尽数通关，静静躺在库里吃灰。那个在烟雾中眼睛发亮、为一次击杀就能欢呼一周的少年，和我一样，都很缺时间，他缺的是网吧里的时间，我缺的是网吧外的时间。所有的怅然若失，所有的遥相对望具象化了，我们之间，确确实实，已经邈若山河。</p><p>念去去，千里烟波，暮霭沉沉楚天阔。</p><blockquote><p>重复公交重复路，小区重复楼梯。<br>关门掉落旧毛衣。<br>当年春烂漫，此夜月低迷。<br>应是一场寒假梦，醒来觉得神奇。<br>妈妈借我智能机。<br>空间敲日志，装作在搜题。</p></blockquote><p>蓉漂时回了两天学校。校车上看着大学生们，想起自己进校时好像也是这样，睁大了眼睛四处张望，想看清楚未来的故事会发生在哪里。不知道那时候他有没有看到今天的我呢。</p><p>在25教下车，计信院自习室的门沉默地开着，晚饭时间，并没有多少人。我是要准备离开的人了。教室上黑板上还残留着模糊的字迹——25教的黑板上大多是些代码和公式，还有高考阅卷场的宣传横幅，从来不换。黄昏的光不紧不慢照射进来，将整个校园染成金色，天边的云烧得火红，李园小吃街熙熙攘攘，好不热闹，以前我从中图敲完代码出来时爱在一旁看着，现在仍在一旁看着。回头看着身后的路。突然觉得过去的一切可以都释然了。木心先生曾说，不知原谅什么，诚觉世事尽可原谅。</p><p>想起十六岁最爱的诗，余光中的《欢呼哈雷》：“你永远奔驰在轮回的悲剧，一路扬着朝圣的长旗。”那时读到此句，胸中自生豪气，连练习册上的题都能多做两道。</p><p>待到哈雷彗星再度回归，已是公元2061年。那时，今天的我——二十出头的毛头小子，在2025年在乎着的一切的一切，绝大部分都会散逸飘零，尽数沉入遥远的过去，其中彻底沦为连回忆都拼凑不起的碎片。就像我已经不记得小学三年级我心上最重的一件事是什么，也说不清楚高二时趴在窗台上看天时的思绪。</p><p>如果有选择，我宁愿当只琥珀里的昆虫，在最幸福的时刻被封印在永恒的树脂中。我们是不幸的，永远无法预测命运的走向，只能被时代的浪潮推动着，宛如盲人般跌撞。</p><p>夏天骤然开始又在恍惚间结束了，漫长的暑期实习从五月开始在十一月结束。今年的夏天，除去燥热和许多复杂的bug，我无法感受到更多。我好想躺在水池里吃冰棒，像很多年前在科学城游泳池里一样，平静地、安稳地，闲闲漂浮。</p><p>我应该坦然地接受时间的冲刷，作为一个崭新出厂的大人，世界如预期般在我面前徐徐展开，我只能面不改色地摸爬滚打，失去一切注定失去的，收获一些短暂拥有的，这算不算不可抗力，人生的入场券能凭这个退票吗。</p><p>一个念头像水泡一样在脑海里浮现，晃晃悠悠漂起来炸开：从今以后，夏天再也不会变成暑假救我于水火了。炽烈燃烧的的夏天才不会回答忽明忽暗的年华。</p><p>我才不要平白无故草草蹉跎去。我知道衰老必然来临，却仍想负隅顽抗。让我们在世界这个大泥坑里安心地打滚吧。我写下这些字句，只为让未来的自己某日拾起时，能看见此时的我——正嬉皮笑脸地，对着那个日渐规整、生气渐失的后来者，故作深沉地预言：“今天我的少年心气死掉了，也许是在昨天，我不知道。”你会不会把你板着的脸稍微松一松说：小东西别偷加缪了。</p><p>我们一生总在不停赋予万物意义：枣树与另一棵枣树，这条路与另一条路。其实我们大约的确早已见过所有枣树，也走过所有道路——它们相似，却又不同。</p><p>柏拉图的哲学理论是：世界上的一切都有一个标准的客体存在，世上的一切不过是理想的世俗投射。在语言出现之前，我们就已经在仰望星空，用光点为自己编织意义。那时没有文字，只有夜色和呼吸，但人们已经开始讲述：在天的那一隅，有七个被追逐的姐妹，她们逃向高处，为了不被抓住，化作星星。那是日本人说的“昴宿七姐妹”，也是澳洲土著口中的“七姐妹梦迹”，是古印度的“七母神”，是我们的昴宿七星。这些故事隔着海洋与年代，却赋予了同一个意义。</p><p>我想，当人类第一次在荒原上抬头，看见那七颗闪烁的星，他们也许在问：为什么它们会在那里？为什么不坠落？为什么那样闪耀？人此时不事劳作，可“七姐妹”的神话诞生了，它给了恐惧以形状，也给了孤独以安慰。</p><p>这就像夏天，黄昏，不冷不热，三两好友，橘子汽水般的晚霞，谈论人生与理想。你言我语地描绘未来的模样，没有产出任何东西。没有记录留档，没有感悟可写，没有任何可以向他人交代的“意义”。按照那套高浓度的标准，这几个小时完全被浪费了。未来明明悬而未决，而且注定充满了艰难险阻。为什么此刻我们都不怕虚度时光，不怕真正的未来实际上是那样的茫茫不可知呢？</p><p>我想，真正有意义的一切，只在我们真实面对自己、直面世界时，才会自然浮现。而日常所遇的诸多讯息，不过是披着告诫外衣的规训。这些虚妄的桎梏，才是迷茫与恐惧的源头。毕竟你甚至无法用简单的因果律去总结世界上任何一个真正的事件。一个人的动机连他自己都说不清，一件事的影响可能十年后才显现。</p><p>有时候你期待一个转折点。希望某一天突然想通了，突然找到方向了，突然一切都变得清晰了。就像电影里那样，主角在某个关键时刻突然顿悟，然后一切改变。但现实是大多数日子，什么也没想通。无事发生。你带着同样的困惑睡去，醒来还是同样的困惑。读了一些书，好像恍然大悟了什么，但过两天又忘了。做了一些改变，坚持几天又回到老样子。没有配乐响起的时刻，没有画面定格的瞬间，没有旁白说：从那天起，一切都不同了。意义不会突然降临，而是应该自己赋予。</p><p>那些真正的改变，往往是在很久之后回头看，才发现原来从那时候开始的。它不是某个戏剧性的顿悟时刻，而是你在做的过程中。电影里的主角，也不知道自己在经历戏剧。他只是在过日子。好好生活，好好爱自己。这就是最大的意义。</p><p>我写东西，和上面所说的“聊天”意象差不多意思，其实只是为了探讨：我们所做的一切，意义在哪里。想必大家洗澡时都有发现用光了沐浴露的经历。我们通常会加点水进去摇摇晃晃，瓶子里又出现了小泡沫，又能洗了。瓶子明明空了，看起来却是满的，人生就是这样。你能做的就是用力晃动自己，让本就稀薄的意义变成缤纷的泡泡。瞬间的丰盈，就是对无意义的全部抵抗。世界像个伤口一样敞开，笔是一根针而语言是一条线。不管什么时候，我们总有机会重新缝上自己。</p><p>我能感受到不同的文字都是有各自气味的，我希望此刻我写下的这批，和十八岁旅行时所见的夜海有一样的质感，迷幻，柔软，带着火辣辣的咸腥气，说不出是海风还是泪水的味道——要是再不写下来，我就会忘记它们了。</p><p>我要把所有的一切都永远记在笔下，真希望未来的你在念出这些酸溜溜的文字时，埋伏在身体里的潮汐，可以生生从唇齿间扯出自由的海风，让十八岁的我替你呼啸哪怕一秒钟。</p><p>西郊有密林，助君出重围。</p><p>我知道我很长时间没写东西了。其实这篇文章的内容我惦记了很久，却总是下不去笔，一直想不出来怎么凝炼抽象的忧郁，所以只能一直积攒着，像是重庆潮湿天气下晾不干的衣服在滴水。人类真的需要很多晴天、很多阳光，用来晒干淋漓的过往。</p><p>幸运的是今天一切终于尘埃落定。我曾长久地等待这样一个时刻——金黄的阳光将幸福轻轻送入眼底，照亮心底每个角落。明媚终于不再是遥不可及的奢望，它化作窗前真实的暖阳，一寸寸驱散记忆里积存的黯淡，圆满如秋日饱满的果实，沉甸甸地压过了所有遗憾的枝桠。</p><p>到了凉风初起的时节，那件浅灰色的薄外套总是松松地裹着我。布料软软的，带着洗衣液的淡香，像被时光温柔包裹——那些未竟的期待、无奈与执念，都在这份恰到好处的温暖里，化作一声轻轻的叹息，飘散在秋风里。</p><p>终于，脑海里溶解不了这么多文字，于是它们自然地从身体里结晶析出。</p><p>我喜欢留下许多自己的碎片，放在每一个值得的时刻，文字于我不是对外的利剑，而是回家的路。像我家的小狗，它特别喜欢在每一个电线杆下撒尿。</p><p>李小龙说，be water。百川东到海，我就这样顺理成章地流向所有苦难的尽头。多嘴说一句，我的老域名在就到期了，不管你怎么找到的这段文字，都谢谢你能看完。这些天和傻逼产品与业务接触多了，我深知能愿意好好听我表达的人终究是少数。</p><p>我舍不得每个独一无二的、值得永远怀念的夏天。</p><p>永远怀念与每一个、与每一个自己同在的夏天。</p><blockquote><p>灰色的烟雾模糊了遥远的星座，<br>眼前的一切失去了历史和名字，<br>世界只是一些影影绰绰的温柔，<br>人还是原来的人，河还是原来的河。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容易莫相催</title>
      <link href="/2025/02/22/%E5%AE%B9%E6%98%93%E8%8E%AB%E7%9B%B8%E5%82%AC/"/>
      <url>/2025/02/22/%E5%AE%B9%E6%98%93%E8%8E%AB%E7%9B%B8%E5%82%AC/</url>
      
        <content type="html"><![CDATA[<p><em>欲渡黄河冰塞川，将登太行雪满山。</em></p><p><br><br></p><p>我越来越喜欢在写东西的时候掺杂一些只有我自己明白的意象。就像面试官在提问时总爱问一些只有他自己才知道的东西。</p><p>第一次线上面试时，面试官问我为什么投他们部门，我很想告诉他，因为只有你们部门把我捞起来了。</p><p>然后面试官质疑我是个大水逼，痛打落水狗，我的项目细节被问得原形毕露七零八落。我突然想起来谁说过，别担心自己是水货，别人也好不到哪去，大家水平都差不多，不然你们很难坐在一起共事。于是破罐子破摔，直接反问面试官你会吗？</p><p>我草了，他真会。</p><p>面试官说你这样说没有说服力，让我不要开玩笑，我很想对面试官说你不信拉倒，我就是这么想的。我简历上的假话面试官总是信以为真，我说出来的真话面试官却又不信。面试挂掉的时候我非常恨计算机八股，但不背八股其实我也不太会别的。</p><p>如果有一天我去送外卖，因为我是码农出身，面试官说不定会问我，知道电动车底层原理吗？遇到海量外卖存储你是怎么解决的？为什么选择电瓶车而不选择其他运输工具呢？最后来上一句，我们公司不用雅迪，对不起我们技术栈不匹配，你已进入人才池。</p><p>我偏爱没有意义的事物，无厘头喜剧片，周星驰的那种。我不喜欢对我说教的，蕴含深刻道理的东西，这种还不如让我去看两集黑马程序员的网课。</p><p>但是有的时候还是得有点意义才行，比如git上最好用本人名字的缩写。这样别人在找某坨垃圾代码是谁写的时候，更容易把我揪出来，而不是气鼓鼓地指着git追溯的代码行，扯着嗓子问这个傻逼L1ttleQing到底是谁啊。</p><p><br><br></p><p>说来也好笑，我作为堂堂计算机科学与技术的科班学生，写代码最多的时候只是大一大二，写贪吃蛇，写爬虫，写小游戏，写QQ机器人，写cv，好多好多。可是我在那时根本不知道自己能干什么，甚至也不知道自己想干什么。然后世界上最恐怖的事情就发生了。我慢慢地觉得编程有点变了样子，越来越不喜欢敲代码了。看着发亮的屏幕，空白的编译器，我会隐隐害怕。我现在已经很清楚自己能干什么，但早就忘了自己想干什么了。每天我被闹钟吵醒的时候，这个世界又多了一个清醒的飞舞。</p><p>以前编程就像是爱好，现在是生活，很多人曾经说，未来的工作不是看你热爱什么，而是能干什么，我以前纯粹当成放屁。唉，顿悟的滞后性是这个世界最恶心的事。</p><p>意气风发这样的词，可能确实和我风马牛不相及。上一次，可能是在大三上考完了所有最难的期末，在宿舍里喊出此后所行皆坦途的豪言壮语，也可能是第一天来到西大，站在桃六三楼的阳台看着窗外泛着蓝光的潮湿墙壁出神。<br>你才二十岁，你才刚刚到这个能强调自己年纪的年纪，那接下来你要怎么办呢？老实讲我不知道，这个问题很难，比我这辈子遇到的所有bug都难。</p><p>臭学计算机的总有种错觉，仿佛自己可以穷举出所有的可能性，然后选取一个不会太差的决定，肯定没有问题的。也有时会觉得，很多事靠卷或是努力可以解决。现在我才发现不是的，会梯度爆炸，会过拟合。你大学玩4年，你这辈子辛苦40年。如果你大学辛苦4年，那你这辈子辛苦44年。我想解答这个问题，以后的人生是怎么打算的，我盘算了一下我是喜欢贪心还是动态规划，遍历过未来的节点吗？会想回溯到某个时间改变某些事情吗？</p><p>思考了两秒钟，我说我只会暴力。</p><p><br><br></p><p>我高中的时候贼喜欢整各种各样的笔，钢笔圆珠笔照单全收，有设计感的优先，好看就行。前几天突然想买一点，但想了想我又不写字，还是算了。我给我的shell安装了个oh-my-posh，聊以自慰。<br>我的日子太过匆忙，对于情绪，我只会感知，不会去辨别了。很像代码，能跑就是能跑，跑不了就是跑不了，仅此而已。</p><p>我们这一代大学生绝大多数都看过考试周破防。所以从大一下开始的每个考试周，我都喜欢去买几瓶热带风味冰红茶，然后就放暑假。考完试我总会开始算账，下学期的早八是不是变少了点，不知道呢，反正有很多很多的可能性。好像还要实习什么的？到时候一定要选一个喜欢的岗位，喜欢的城市。</p><p>冰红茶的瓶盖上有时会写着再来一瓶，我总是不着急兑换，因为觉得来日方长。后来从桃园搬寝室到橘园，收拾东西准备提桶跑路的时候在衣柜深处发现了当年的瓶盖，才意识到好像我的青春只剩下了谢谢惠顾。</p><p>说句实话，我真的幻想过在很多很多年后，等我变老的时候，我会在某个时刻想起那时，高考后的盛夏，大学，正午，我呆呆地幻想着美好的大学生活。这时候还没有计算机，没有Java，没有Spring，没有中间件，没有微服务，也没有什么实习，什么秋招，什么天南海北的漂泊，什么阴晴圆缺，什么聚散离合。那些东西短暂地不属于我。</p><p>我只是没想到那个陷入回忆的时刻居然就是现在，它来得那么快那么快，他妈的，实在是太快了。</p><p>刚学C语言仿佛就在昨天，老师每一个作业我都会新建一个工程，众所周知，Visual Studio的一个项目庞大无比，简直是吞天巨兽。但我很喜欢，我总觉得每一个项目都是一个全新的开始，好像是写数学题时卡壳，就爱开一页新的草稿纸似的。</p><p>又想起来个很好玩的事情，我对内存很畏惧，因为有个叫做内存泄露的可怕概念。很长一段时间里我误认为，一旦内存泄露了一部分，这部分就会永远丢失，我的电脑到最后也没法用了。后来泄露多了也就释然了，因为发现好像没什么大事，哦耶。</p><p>我也不是没有想过试试高大上的科研，我也好希望自己试着跑出来的大模型不像个傻子。我有时候会恨生不逢时，恨自己这样一个慢吞吞的人出生在了一个太快的时代，生怕追不上节奏。又会恨自己太过平庸，以我这样的脑子，读研大概率是拼死拼活三年，天天对着自己的学术垃圾叹气，编造些自己都不相信的夸张变态数据。我其实真的很想去搞agi，但我对我这个傻逼的学术水平太清楚了。小时候上艺术课，老师说美术和音乐一定不会被ai取代，因为ai没有创造力，取代的是重复的和没有价值的劳动。现在ai都去画画和作曲了，我还在干重复的和没有价值的劳动。如果我读了学硕，最应该考虑的不是如何实现梦中的agi，我应该如何造福人类，惠及全球，而是我怎么才能不延毕。所以我还是学了Java。</p><p>其实我们不可能按照自己的意愿过完一生，我们几乎不可能“成功”，井上雄彦说的“人生很多事是徒劳无功的”，在我看来，严格说这句话中“很多事”甚至可以换成“所有事“。但是，如果放弃，比赛就提前结束了，判负了，毫无机会了。我想不出来太合适的比喻，有点像运动会跑步，当我还在辛苦备赛训练的时候，有的人开着摩托车上来了，有人在给他的劳斯劳斯加油，由于还没吹哨开始比赛，我其实是有些不甘心的，有一线机会我就不会放弃，我真希望还能逆转啊。</p><p>现在已经不再是一个多好的时代，尤其是对于慢慢饱和的互联网，对于我这种天赋平平，技术一般的人来说更是折磨。可惜我技术不好，有那么一点点热爱，但没什么水平，我对底层的理解取决于八股文背得有多么深入，对业务的理解取决于和我吃饭的人是不是健谈。</p><p>其实，我是有选择的，我可以远离互联网，平平淡淡的过着一眼望到头的生活，但我对技术实在有些热爱，我承认在大一第一次见到控制台上黑底白字的Hello World时是非常激动的。我接受不了在传承了不知道多少年的老办公桌上，望着Windows XP里的上古代码发呆，浑浑噩噩度过剩下的时光。</p><p>可能有点贪心了，有点既要又要了。人生若只如初见，何事秋风悲画扇。我想把一切都留在最初相遇的时候，代码应该永远只有那一行白亮的hello world在枯燥的背景板中闪烁，黑黑的屏幕倒映着我忍不住自豪的笑的嘴角。西大应该一直盛开着玉兰花，应该永远灿烂，明媚，温暖如春。我做的这个博客应该永远不上线，我应该一个字也不写在这里。我应该一直是需要被照顾的学弟，而不是变成独当一面的学长，可以天天和在乎的人去吃宵夜，压马路，回到宿舍和三两朋友上号，一起把别人像野狗一样踢死或者被别人像野狗一样踢死，然后哈哈大笑。我应该可以继续无限试错，所有心里话好话烂话抽象话都可以拿出来说，技术应该就只学到JavaSE，IDE只有机房的eclipse，我心想是该自己学点了，可是没那么早，又没那么晚。我会觉得没什么拿得出手的故事，又觉得没关系，接下来我还可以有很多故事。所有未来，对我来说，还都只不过是遥远的未来，仅此而已。</p><p>忘了在哪里看到的鸡汤，“不要谩骂以前的自己，他当时一个人站在雾里也很迷茫”。我从来没骂过，因为我他妈的的现在还在雾里，我现在也很迷茫，如果我做错了什么，以后的我，也请你不要骂我。</p><p><br><br></p><p>有次看到个热搜是，一百万回到高三，问你愿不愿意。我第一反应是挺想去的，可惜没钱啊。后来看了评论区才发现，原来是倒给我一百万，还有这好事，卧槽。</p><p>其实比起高三，现在最常想起的日子是高二，那时，我第一次意识到，自己要为了自己活着——人活一世，并非是仅仅活着就可以了。</p><p>高中的排球场围墙长满爬山虎，像永远排查不完的冗余依赖项。每天晚上放学时我总是不急着回家，手表设上五分钟的闹钟，然后在球场的铁丝网旁边坐下，就只是坐着。</p><p>黑沉沉的夜色像吸饱了水的毛巾，和那时我一样湿漉漉的心一样，很重地坠下来，就那样悬在空中晾着。夜风总是很烈，勉强把我心头的阴翳吹干。我看着旁边赶着放学的人成批匆匆略过，看着远处教学楼里的灯一盏盏灭掉，仿佛所有一切与我毫无关系，感觉片刻出离，生活和生命短暂错轨。</p><p>就那五分钟，我觉得自己是活着的，是拧紧发条的钟摆突然卡住的瞬间。那是我庸常的、一成不变的生活里，自己找出的短暂变数。</p><p>后来，上了大学，终于学完红黑树旋转那天，我长舒一口气瘫在椅子上，数着窗外银杏叶的递归层次，突然意识到我这沟槽的人生选择比AVL树的平衡因子更难计算。那些在橘八写的爬虫，终究没能抓取到长大成人的最优解。<br>当未来突然在眼前超展开，所有的可能性平铺了一地，面对无解的多线程调试，我对着segmentation fault的青春束手无策。</p><p>夜深人静时，IntelliJ的语法高亮是唯一的霓虹灯。反复报错，反复编译，深夜里，我好像调试着十年前的自己：在小学的机房里第一次按下运行键的男孩，很平滑地变成了在图书馆啃算法导论的愣头青。他们的心跳曲线，如今变成JVM性能监控里的锯齿波形，飘满整个屏幕。</p><p>我突然看清，那些年的遗憾，原来都是未被捕获的异常。所有的记忆在垃圾回收机制里只剩残破的指针，指向一些已经过期的地址。</p><p>唯见月寒日暖，来煎人寿。我第一次看到这句话的时候觉得好奇怪，这家人寿公司的名字是外国音译来的吗。现在想想，距离第一次看到这句话，也已经过去好久了。</p><p>之前还看过一句话，说的是：如果自己不想积极认真地生活，不管得到什么样的帮助都于事无补。换言之，只要你想，不管是顺风还是逆风，都不会阻碍你振翅高飞。早些时候看只是觉得很励志，现在看却有种百感交集的意蕴。<br>我要继续往前走了。我心中的飞鸟仍在挣扎，直到这片天空不再给出回答。</p><p>听见这种浪漫化的词句我只想笑，笑完了发现我也写过更臊皮的屁话，原来我已经丢失了浪漫的能力。</p><p>可是沟槽的回忆像一把破损不堪的生锈杀猪刀，杀人都杀不明白，给不了一个痛快。好些人是当下过的不顺就会回想过去的事，我不是，我过的顺不顺都会回想过去的事。</p><p>我常常会想起一个寻常的黄昏，余晖洒在西大中心图书馆门前，去李园吃饭的人很多，簇拥着。我刚刚学完，准备回宿舍。坐校车，忽快忽慢，走走停停，崇德湖两侧是很粗的树，阳光透过树叶的缝隙，投下斑驳的影子。蓝花楹下灯光微黄，晚风吹呀吹，宛如一位老友向我低语。我当时就知道，有些东西，例如这一瞬间，就像这样永远遗留在了过去。</p><p>我还经历了许多难忘的事，可惜这里空间太小，写不下，它们在我的时间里悬停。我想起郁达夫，想起他那篇《春风沉醉的夜晚》。原来春风那样迷人与沉醉，都只是为了吹向他内心的无可奈何。我们谈论春天，谈论暮色，谈论过去，谈论我不会再见面但还想用影像一次又一次保持联系的人，我其实真的很想念所有的一切，但忘记是一场盛大的覆水难收。那时西边红霞满天，我们却只顾东行。</p><p>我不是很喜欢那种，种一棵树最好的时间是十年前，其次是现在的鸡汤文，因为在我看来最好的时间是十年前，其次就该是九年十一个月前。</p><p>又要把回忆牵扯起来了，大概是十五年前，上小学的时候，我在垃圾堆旁边捡到一本高考作文。我现在都还记得那个自以为遥远的日子，放学回家的公交车上，妈妈坐在我旁边。我的第一个问题是，“刀”这个字的韵母是什么，没学过；我妈说你再学两天就知道了。我的第二个问题是，我今天捡到一本高考作文，我要多久才能写出那么长的文章呀。我妈说等你高考的时候就写出来了。</p><p>那我要多久才高考呀？十年后吧。</p><p>一晃眼，一打马，我就站在十年后，十多年后，以至于高考都渐渐模糊成人生的一个小山丘。我想，那本破书上的高考作文，我应该能不费吹灰之力地写出来了，还能被表彰，还能拿奖，还能帮你拿下一个不错的语文分数。可是，可是，可是。</p><p>遥远的从来不是时间有多长，忘不掉的也从来不是区区两三件不回头的事。时至今日，我再也没有吃过那夜似的好豆，也再也没有看过那夜似的好戏了。</p><p><br><br></p><p>算起来我写东西也写了两年半了，我知道这个数字已经被妖魔化得很厉害了，但是确实是两年半。我养成了个写日记的习惯，每次想起了就写一点点，一分钟就写完了，像很自然的新陈代谢。我写得很慢，一个月或者两个月勉强凑出一篇来。光标在句尾闪烁，仿佛是记事本的机械性口吃。习惯性地在文档里豢养十万个破碎的形容词，输入法的联想慢慢地变成了具象化的潜意识。</p><p>我哪能写尽世上所有人的心意呢，写来写去，写的还是自己，很多很多个自己，无论孤独还是野心，都是自己人生某个侧面的写照，是我的我的局限与浅薄。忽然觉得安心。因为自己早就放弃完整的叙事，写作对我来说是还没有变成工作的那种编程。</p><p>到这里这篇差不多也写完了，反正是想到哪写到哪，我不知道应该以什么形式把它们表现出来。记忆的本质是虚妄，虚是过去的就永不再来，妄是我总能妄想从头再来。我最多最多能做到的，只是把空白的永恒，漫长的蹉跎，敲打成不断后撤的、温热而短促的顿挫。</p><p>我写作业很喜欢用生成式人工智能，说实话deepseek写的比我好，生成的文字确实更磅礴，可我写文章从来不愿意去用，因为这些文字，这里的每一个字，对我都很重要。我私心上希望很多人看到，但又不希望那么多人看到。</p><p>彩云易散琉璃脆。</p><p>最后谢谢你看到这里。</p><p><br><br></p><p><em>你消磨了岁月<br>岁月也消磨了你<br>你至今没有写出诗<br>——博尔赫斯</em> </p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 SpringBoot</title>
      <link href="/2025/02/08/1Springboot/"/>
      <url>/2025/02/08/1Springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="总体概述"><a href="#总体概述" class="headerlink" title="总体概述"></a>总体概述</h2><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用</strong>。</p><p>SpringBoot的主要目标是：</p><ul><li>为所有 Spring 开发提供更快速、可广泛访问的入门体验。</li><li>开箱即用，设置合理的默认值，但是也可以根据需求进行适当的调整。</li><li>提供一系列大型项目通用的非功能性程序（如嵌入式服务器、安全性、指标、运行检查等）。</li><li>约定大于配置，基本不需要主动编写配置类、也不需要 XML 配置文件。</li></ul><p>Spring Boot提供了一种叫做Starter的概念，它是一组预定义的依赖项集合，旨在简化Spring应用程序的配置和构建过程。Starter包含了一组相关的依赖项，以便在启动应用程序时自动引入所需的库、配置和功能。</p><p>Spring Boot提供了许多预定义的Starter，例如spring-boot-starter-web用于构建Web应用程序，spring-boot-starter-data-jpa用于使用JPA进行数据库访问，spring-boot-starter-security用于安全认证和授权等等。</p><h2 id="启动器-Starter"><a href="#启动器-Starter" class="headerlink" title="启动器(Starter)"></a>启动器(Starter)</h2><p>使用Starter非常简单，只需要在项目的构建文件（例如Maven的pom.xml）中添加所需的Starter依赖，Spring Boot会自动处理依赖管理和配置。通过使用Starter，开发人员可以方便地引入和配置应用程序所需的功能，避免了手动添加大量的依赖项和编写冗长的配置文件的繁琐过程。同时，Starter也提供了一致的依赖项版本管理，确保依赖项之间的兼容性和稳定性。</p><p>主要作用如下：</p><ol><li>简化依赖管理：Spring Boot Starter通过捆绑和管理一组相关的依赖项，减少了手动解析和配置依赖项的工作。只需引入一个相关的Starter依赖，即可获取应用程序所需的全部依赖。</li><li>自动配置：Spring Boot Starter在应用程序启动时自动配置所需的组件和功能。通过根据类路径和其他设置的自动检测，Starter可以自动配置Spring Bean、数据源、消息传递等常见组件，从而使应用程序的配置变得简单和维护成本降低。</li><li>提供约定优于配置：Spring Boot Starter遵循“约定优于配置”的原则，通过提供一组默认设置和约定，减少了手动配置的需要。它定义了标准的配置文件命名约定、默认属性值、日志配置等，使得开发者可以更专注于业务逻辑而不是繁琐的配置细节。</li><li>快速启动和开发应用程序：Spring Boot Starter使得从零开始构建一个完整的Spring Boot应用程序变得容易。它提供了主要领域（如Web开发、数据访问、安全性、消息传递等）的Starter，帮助开发者快速搭建一个具备特定功能的应用程序原型。</li><li>模块化和可扩展性：Spring Boot Starter的组织结构使得应用程序的不同模块可以进行分离和解耦。每个模块可以有自己的Starter和依赖项，使得应用程序的不同部分可以按需进行开发和扩展。</li></ol><h2 id="SpringBootApplication-注解"><a href="#SpringBootApplication-注解" class="headerlink" title="@SpringBootApplication 注解"></a>@SpringBootApplication 注解</h2><p>@SpringBootApplication注解是Spring Boot框架中的核心注解，它的主要作用是简化和加速Spring Boot应用程序的配置和启动过程。</p><p>具体而言，@SpringBootApplication注解起到以下几个主要作用：</p><ol><li>自动配置：@SpringBootApplication注解包含了@EnableAutoConfiguration注解，用于启用Spring Boot的自动配置机制。自动配置会根据应用程序的依赖项和类路径，自动配置各种常见的Spring配置和功能，减少开发者的手动配置工作。它通过智能地分析类路径、加载配置和条件判断，为应用程序提供适当的默认配置。</li><li>组件扫描：@SpringBootApplication注解包含了@ComponentScan注解，用于自动扫描并加载应用程序中的组件，例如控制器（Controllers）、服务（Services）、存储库（Repositories）等。它默认会扫描@SpringBootApplication注解所在类的包及其子包中的组件，并将它们纳入Spring Boot应用程序的上下文中，使它们可被自动注入和使用。</li><li>声明配置类：@SpringBootApplication注解本身就是一个组合注解，它包含了@Configuration注解，将被标注的类声明为配置类。配置类可以包含Spring框架相关的配置、Bean定义，以及其他的自定义配置。通过@SpringBootApplication注解，开发者可以将配置类与启动类合并在一起，使得配置和启动可以同时发生。</li></ol><p>总的来说，@SpringBootApplication注解的主要作用是简化Spring Boot应用程序的配置和启动过程。它自动配置应用程序、扫描并加载组件，并将配置和启动类合二为一，简化了开发者的工作量，提高了开发效率。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h2><p>SpringBoot工程下，进行统一的配置管理，想设置的任何参数（端口号、项目根路径、数据库连接信息等等)都集中到一个固定位置和命名的配置文件（<code>application.properties</code>或<code>application.yml</code>）中。</p><p>配置文件应该放置在Spring Boot工程的<code>src/main/resources</code>目录下。这是因为<code>src/main/resources</code>目录是Spring Boot默认的类路径（classpath），配置文件会被自动加载并可供应用程序访问。</p><h2 id="yaml配置文件使用"><a href="#yaml配置文件使用" class="headerlink" title="yaml配置文件使用"></a>yaml配置文件使用</h2><p>YAML（YAML Ain’t Markup Language）是一种基于层次结构的数据序列化格式，旨在提供一种易读、人类友好的数据表示方式。</p><p>与<code>.properties</code>文件相比，YAML格式有以下优势：</p><ol><li>层次结构：YAML文件使用缩进和冒号来表示层次结构，使得数据之间的关系更加清晰和直观。这样可以更容易理解和维护复杂的配置，特别适用于深层次嵌套的配置情况。</li><li>自我描述性：YAML文件具有自我描述性，字段和值之间使用冒号分隔，并使用缩进表示层级关系。这使得配置文件更易于阅读和理解，并且可以减少冗余的标点符号和引号。</li><li>注释支持：YAML格式支持注释，可以在配置文件中添加说明性的注释，使配置更具可读性和可维护性。相比之下，<code>.properties</code>文件不支持注释，无法提供类似的解释和说明。</li><li>多行文本：YAML格式支持多行文本的表示，可以更方便地表示长文本或数据块。相比之下，<code>.properties</code>文件需要使用转义符或将长文本拆分为多行。</li><li>类型支持：YAML格式天然支持复杂的数据类型，如列表、映射等。这使得在配置文件中表示嵌套结构或数据集合更加容易，而不需要进行额外的解析或转换。</li><li>更好的可读性：由于YAML格式的特点，它更容易被人类读懂和解释。它减少了配置文件中需要的特殊字符和语法，让配置更加清晰明了，从而减少了错误和歧义。</li></ol><p>yaml语法说明</p><ol><li>数据结构用树形结构呈现，通过缩进来表示层级，</li><li>连续的项目（集合）通过减号 ” - ” 来表示</li><li>键值结构里面的key&#x2F;value对用冒号 ” : ” 来分隔。</li><li>YAML配置文件的扩展名是yaml 或 yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML配置文件示例</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot_02</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>读取方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成get set 和 toString方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDriverClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriverClassName</span><span class="params">(String driverClassName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DataSourceProperties&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driverClassName=&#x27;&quot;</span> + driverClassName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在Spring Boot中，可以使用多环境配置来根据不同的运行环境（如开发、测试、生产）加载不同的配置。SpringBoot支持多环境配置让应用程序在不同的环境中使用不同的配置参数，例如数据库连接信息、日志级别、缓存配置等。</p><p>方法：</p><ol><li>属性文件分离：将应用程序的配置参数分离到不同的属性文件中，每个环境对应一个属性文件。例如，可以创建<code>application-dev.properties</code>、<code>application-prod.properties</code>和<code>application-test.properties</code>等文件。在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等。然后，在<code>application.properties</code>中通过<code>spring.profiles.active</code>属性指定当前使用的环境。Spring Boot会根据该属性来加载对应环境的属性文件，覆盖默认的配置。</li><li>YAML配置文件：与属性文件类似，可以将配置参数分离到不同的YAML文件中，每个环境对应一个文件。例如，可以创建<code>application-dev.yml</code>、<code>application-prod.yml</code>和<code>application-test.yml</code>等文件。在这些文件中，可以使用YAML语法定义各自环境的配置参数。同样，通过<code>spring.profiles.active</code>属性指定当前的环境，Spring Boot会加载相应的YAML文件。</li><li>命令行参数(动态)：可以通过命令行参数来指定当前的环境。例如，可以使用<code>--spring.profiles.active=dev</code>来指定使用开发环境的配置。</li></ol><p>基于方式b实践，创建开发、测试、生产三个环境的配置文件</p><p>application-dev.yml（开发）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///dev</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>application-test.yml（测试）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>application-prod.yml（生产）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///prod</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>环境激活</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h1 id="整合-SpringMVC"><a href="#整合-SpringMVC" class="headerlink" title="整合 SpringMVC"></a>整合 SpringMVC</h1><h2 id="web相关配置"><a href="#web相关配置" class="headerlink" title="web相关配置"></a>web相关配置</h2><p>当涉及Spring Boot的Web应用程序配置时，以下是五个重要的配置参数：</p><ol><li><code>server.port</code>: 指定应用程序的HTTP服务器端口号。默认情况下，Spring Boot使用8080作为默认端口。您可以通过在配置文件中设置<code>server.port</code>来更改端口号。</li><li><code>server.servlet.context-path</code>: 设置应用程序的上下文路径。这是应用程序在URL中的基本路径。默认情况下，上下文路径为空。您可以通过在配置文件中设置<code>server.servlet.context-path</code>属性来指定自定义的上下文路径。</li><li><code>spring.mvc.view.prefix</code>和<code>spring.mvc.view.suffix</code>: 这两个属性用于配置视图解析器的前缀和后缀。视图解析器用于解析控制器返回的视图名称，并将其映射到实际的视图页面。<code>spring.mvc.view.prefix</code>定义视图的前缀，<code>spring.mvc.view.suffix</code>定义视图的后缀。</li><li><code>spring.resources.static-locations</code>: 配置静态资源的位置。静态资源可以是CSS、JavaScript、图像等。默认情况下，Spring Boot会将静态资源放在<code>classpath:/static</code>目录下。您可以通过在配置文件中设置<code>spring.resources.static-locations</code>属性来自定义静态资源的位置。</li><li><code>spring.http.encoding.charset</code>和<code>spring.http.encoding.enabled</code>: 这两个属性用于配置HTTP请求和响应的字符编码。<code>spring.http.encoding.charset</code>定义字符编码的名称（例如UTF-8），<code>spring.http.encoding.enabled</code>用于启用或禁用字符编码的自动配置。</li></ol><p>相关详细配置见 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server%EF%BC%8C%E4%BB%A5%E4%B8%8B%E4%B8%BA%E7%AE%80%E5%8D%95%E4%B8%BE%E4%BE%8B%E3%80%82">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server，以下为简单举例。</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web相关的配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口号设置</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="comment"># 项目根路径</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/boot</span></span><br></pre></td></tr></table></figure><h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><p>默认的静态资源路径为：</p><p><strong>· classpath:&#x2F;META-INF&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;static&#x2F;</strong></p><p><strong>· classpath:&#x2F;public&#x2F;</strong></p><p>我们只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:&#x2F;static&#x2F; 目录下。</p><p>当然也可以多此一举覆盖路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web相关的配置</span></span><br><span class="line"><span class="comment"># https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口号设置</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="comment"># 项目根路径</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/boot</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="comment"># 配置静态资源地址,如果设置,会覆盖默认值</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/webapp</span></span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器声明:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor拦截器的preHandle方法执行....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor拦截器的postHandle方法执行....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor拦截器的afterCompletion方法执行....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器时，正常使用配置类，只要保证配置类在启动类的同包或者子包，方可生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.interceptor.MyInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * /**  拦截当前目录及子目录下的所有路径 /user/**   /user/findAll  /user/order/findAll</span></span><br><span class="line"><span class="comment">     * /*   拦截当前目录下的以及子路径   /user/*     /user/findAll</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合-Druid连接池"><a href="#整合-Druid连接池" class="headerlink" title="整合 Druid连接池"></a>整合 Druid连接池</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 连接池类型 </span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池的最小空闲数量</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数量</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line">      <span class="comment"># 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h1 id="整合-Mybatis"><a href="#整合-Mybatis" class="headerlink" title="整合 Mybatis"></a>整合 Mybatis</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>MyBatis整合步骤：</p><pre><code>1. 导入依赖：在您的Spring Boot项目的构建文件（如pom.xml）中添加MyBatis和数据库驱动的相关依赖。例如，如果使用MySQL数据库，您需要添加MyBatis和MySQL驱动的依赖。2. 配置数据源：在`application.properties`或`application.yml`中配置数据库连接信息，包括数据库URL、用户名、密码、mybatis的功能配置等。3. 创建实体类：创建与数据库表对应的实体类。4. 创建Mapper接口：创建与数据库表交互的Mapper接口。5. 创建Mapper接口SQL实现： 可以使用mapperxml文件或者注解方式6. 创建程序启动类7. 注解扫描：在Spring Boot的主应用类上添加`@MapperScan`注解，用于扫描和注册Mapper接口。8. 使用Mapper接口：在需要使用数据库操作的地方，通过依赖注入或直接实例化Mapper接口，并调用其中的方法进行数据库操作。</code></pre><p>配置类：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span>  <span class="comment"># setting配置</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.pojo</span> <span class="comment"># 配置别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span> <span class="comment"># mapperxml位置</span></span><br></pre></td></tr></table></figure><p>这里的mapper接口在XML文件里实现。</p><p>位置：resources&#x2F;mapper&#x2F;UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace = 接口的全限定符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后启动类加一个接口扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.Qing.mapper&quot;)</span> <span class="comment">//mapper接口扫描配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AOP整合配置"><a href="#AOP整合配置" class="headerlink" title="AOP整合配置"></a>AOP整合配置</h2><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接使用aop注解即可: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com..service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAdvice.before&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;joinPoint = &quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务配置"><a href="#声明式事务配置" class="headerlink" title="声明式事务配置"></a>声明式事务配置</h2><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：SpringBoot项目会自动配置一个 DataSourceTransactionManager，所以我们只需在方法（或者类）加上 @Transactional 注解，就自动纳入 Spring 的事务管理了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    user.setAccount(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 Mybatis/plus</title>
      <link href="/2025/01/28/1mybatis/"/>
      <url>/2025/01/28/1mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="总体概述"><a href="#总体概述" class="headerlink" title="总体概述"></a>总体概述</h1><p>JDBC</p><ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul><p>Hibernate 和 JPA</p><ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生成的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul><p>MyBatis</p><ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li></ul><p>开发效率：Hibernate&gt;Mybatis&gt;JDBC</p><p>运行效率：JDBC&gt;Mybatis&gt;Hibernate</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="向SQL语句传参"><a href="#向SQL语句传参" class="headerlink" title="向SQL语句传参"></a>向SQL语句传参</h2><p>#{}形式：Mybatis会将SQL语句中的#{}转换为问号占位符。</p><p>${}形式：Mybatis做的是字符串拼接操作，直接拼上去。</p><p>通常不会采用${}的方式传值。实际开发中，能用#{}实现的，肯定不用${}。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设我们有一个用户输入的参数<code>username</code>，我们想要根据这个参数来查询数据库中的用户信息。</p><h4 id="使用-（不推荐）"><a href="#使用-（不推荐）" class="headerlink" title="使用${}（不推荐）"></a>使用<code>$&#123;&#125;</code>（不推荐）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM users WHERE username = $&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果用户输入的<code>username</code>是<code>&#39; OR &#39;1&#39;=&#39;1</code>，那么生成的SQL语句将会是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>这个SQL语句将会返回所有用户的信息，因为<code>&#39;1&#39;=&#39;1</code>始终为真。</p><h4 id="使用-（推荐）"><a href="#使用-（推荐）" class="headerlink" title="使用#{}（推荐）"></a>使用<code>#&#123;&#125;</code>（推荐）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM users WHERE username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果用户输入的<code>username</code>是<code>&#39; OR &#39;1&#39;=&#39;1</code>，那么生成的SQL语句将会是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>但是，由于使用了预处理语句，数据库会将<code>&#39; OR &#39;1&#39;=&#39;1</code>视为纯数据，而不是SQL语句的一部分，因此只会返回<code>username</code>为<code>&#39; OR &#39;1&#39;=&#39;1</code>的用户信息（如果没有这样的用户，将返回空结果）。</p><p>通过使用<code>#&#123;&#125;</code>，我们可以有效地防止SQL注入攻击，确保应用程序的安全性。</p><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p><ul><li>简单类型：只包含一个值的数据类型<ul><li>基本数据类型：int、byte、short、double、……</li><li>基本数据类型的包装类型：Integer、Character、Double、……</li><li>字符串类型：String</li></ul></li><li>复杂类型：包含多个值的数据类型<ul><li>实体类类型：Employee、Department、……</li><li>集合类型：List、Set、Map、……</li><li>数组类型：int[]、String[]、……</li><li>复合类型：List<Employee>、实体类中包含集合……</li></ul></li></ul><h3 id="单个简单类型参数"><a href="#单个简单类型参数" class="headerlink" title="单个简单类型参数"></a>单个简单类型参数</h3><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单个简单类型参数，在#{}中通常和接口方法参数同名。</p><h3 id="多个简单类型参数"><a href="#多个简单类型参数" class="headerlink" title="多个简单类型参数"></a>多个简单类型参数</h3><p>零散的多个简单类型参数需要特殊处理，使用<code>(@Param(&quot;empId&quot;)</code>标记，否则Mybatis无法识别自定义名称：</p><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployee</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId,<span class="meta">@Param(&quot;empSalary&quot;)</span> Double empSalary)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalary&#125; where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类类型参数"><a href="#实体类类型参数" class="headerlink" title="实体类类型参数"></a>实体类类型参数</h3><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#{}解析后的问号占位符这个位置。</p><h3 id="Map类型参数"><a href="#Map类型参数" class="headerlink" title="Map类型参数"></a>Map类型参数</h3><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployeeByMap</span><span class="params">(Map&lt;String, Object&gt; paramMap)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeByMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalaryKey&#125; where emp_id=#&#123;empIdKey&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#{}中写Map中的key。</p><h2 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h2><p>数据输出总体上有两种形式：</p><ul><li>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</li><li>查询操作的查询结果</li></ul><p>我们需要做的是，指定查询的输出数据类型，在插入场景下，实现主键数据回显。</p><h3 id="单个简单类型"><a href="#单个简单类型" class="headerlink" title="单个简单类型"></a>单个简单类型</h3><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">selectEmpCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类对象"><a href="#实体类对象" class="headerlink" title="实体类对象"></a>实体类对象</h3><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。</p><p>在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 具体配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h3><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。</p><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpNameAndMaxSalary</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 返回工资最高的员工的姓名和他的工资 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">    emp_name 员工姓名,</span><br><span class="line">    emp_salary 员工工资,</span><br><span class="line">    (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资</span><br><span class="line">  FROM t_emp WHERE emp_salary=(</span><br><span class="line">    SELECT MAX(emp_salary) FROM t_emp</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p><strong>自增长类型主键</strong></p><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary)</span><br><span class="line">  values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。</p><p><strong>非自增长类型主键</strong></p><p>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</p><p>使用 <code>selectKey</code> 帮助插入UUID作为字符串类型主键示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        SELECT UUID() as id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO user (id, username, password) </span><br><span class="line">    VALUES (</span><br><span class="line">        #&#123;id&#125;,</span><br><span class="line">        #&#123;username&#125;,</span><br><span class="line">        #&#123;password&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MapperXML标签总结"><a href="#MapperXML标签总结" class="headerlink" title="MapperXML标签总结"></a>MapperXML标签总结</h2><p> MyBatis 的真正强大在于它的语句映射，SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><p><strong>select标签：</strong></p><p>  MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPerson&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;hashmap&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;自定义结构&quot;</span>&gt;</span> SELECT * FROM PERSON WHERE ID = #&#123;id&#125; <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。</p><p>  注意参数符号：#{id}  ${key}</p><p>  MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">selectPerson</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(selectPerson);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br></pre></td></tr></table></figure><p>  select 元素允许你配置很多属性来配置每条语句的行为细节：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr></tbody></table><p><strong>insert, update 和 delete标签：</strong></p><p>  数据变更语句 insert，update 和 delete 的实现非常接近：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;updateAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;deleteAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td><code>useGeneratedKeys</code></td><td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td><code>keyProperty</code></td><td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td><code>keyColumn</code></td><td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h1 id="多表映射"><a href="#多表映射" class="headerlink" title="多表映射"></a>多表映射</h1><p>MyBatis 思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序查询需求，那就太好了，而 ResultMap 就是 MyBatis 就是完美答案。 </p><h2 id="实体类设计方案"><a href="#实体类设计方案" class="headerlink" title="实体类设计方案"></a><strong>实体类设计方案</strong></h2><p>多表关系回顾：（双向查看）</p><ul><li><p>一对一</p><p>夫妻关系，人和身份证号</p></li><li><p>一对多| 多对一</p><p>用户和用户的订单，锁和钥匙</p></li><li><p>多对多</p><p>老师和学生，部门和员工</p></li></ul><p>实体类设计关系(查询)：（单向查看）</p><ul><li><p>对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系</p><p>实体类设计：对一关系下，类中只要包含单个对方对象类型属性即可！</p><p>例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：</p><p>实体类设计：对多关系下，类中只要包含对方类型集合属性即可！</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多表结果实体类设计技巧：</p><p>对一，属性中包含对方对象。</p><p>对多，属性中包含对方对象集合。</p><p>只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类。</p><p>无论多少张表联查，实体类设计都是两两考虑。在查询映射的时候，只需要关注本次查询相关的属性。</p><p>例如：查询订单和对应的客户，就不要关注客户中的订单集合。</p><h2 id="多表映射总结"><a href="#多表映射总结" class="headerlink" title="多表映射总结"></a>多表映射总结</h2><table><thead><tr><th>关联关系</th><th>配置项关键词</th><th>所在配置文件和具体位置</th></tr></thead><tbody><tr><td>对一</td><td>association标签&#x2F;javaType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr><tr><td>对多</td><td>collection标签&#x2F;ofType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr></tbody></table><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><h2 id="if-x2F-where标签"><a href="#if-x2F-where标签" class="headerlink" title="if&#x2F;where标签"></a>if&#x2F;where标签</h2><p>使用动态 SQL 最常见情景是根据条件包含 where  &#x2F; if 子句的一部分。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    <span class="comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。</span></span><br><span class="line"><span class="comment">这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#&#123;&#125; --&gt;</span></span><br><span class="line">            or emp_name=#&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 2000&quot;</span>&gt;</span></span><br><span class="line">            or emp_salary&gt;#&#123;empSalary&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 WHERE emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 没有where子句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="choose-x2F-when-x2F-otherwise标签"><a href="#choose-x2F-when-x2F-otherwise标签" class="headerlink" title="choose&#x2F;when&#x2F;otherwise标签"></a>choose&#x2F;when&#x2F;otherwise标签</h2><p>  在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p><strong>基本用法</strong>。用批量插入举例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>批量更新时需要注意</strong>，上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atguigu.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure><p>  对应的foreach标签如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <strong>关于foreach标签的collection属性</strong></p><p>  如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter &#x27;empList&#x27; not found. Available parameters are [arg0, collection, list]</span><br></pre></td></tr></table></figure><p>  在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。</p><h2 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h2><p><strong>抽取重复的SQL片段</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用已抽取的SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="Mapper批量映射优化"><a href="#Mapper批量映射优化" class="headerlink" title="Mapper批量映射优化"></a>Mapper批量映射优化</h2><p>Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。</p><p>Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。</p><p>资源创建要求：</p><ul><li>Mapper 接口和 Mapper 配置文件名称一致<ul><li>Mapper 接口：EmployeeMapper.java</li><li>Mapper 配置文件：EmployeeMapper.xml</li></ul></li><li>Mapper 配置文件放在 Mapper 接口所在的包内<ul><li>可以将mapperxml文件放在mapper接口所在的包！</li><li>可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件</li></ul></li></ul><h2 id="ORM思维"><a href="#ORM思维" class="headerlink" title="ORM思维"></a>ORM思维</h2><p>ORM（Object-Relational Mapping，对象-关系映射）是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，可以通过方法调用进行数据库操作，最终，让我们可以使用面向对象思维进行数据库操作。</p><p><strong>ORM 框架通常有半自动和全自动两种方式。</strong></p><ul><li>半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。</li><li>全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。</li></ul><p><strong>下面是半自动和全自动 ORM 框架的区别：</strong></p><ol><li>映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。</li><li>查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。</li><li>性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。</li><li>学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。</li></ol><p>常见的半自动 ORM 框架包括 MyBatis 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、MyBatis-Plus 等。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>MyBatis整合步骤：</p><pre><code>1. 导入依赖：在您的Spring Boot项目的构建文件（如pom.xml）中添加MyBatis和数据库驱动的相关依赖。例如，如果使用MySQL数据库，您需要添加MyBatis和MySQL驱动的依赖。2. 配置数据源：在`application.properties`或`application.yml`中配置数据库连接信息，包括数据库URL、用户名、密码、mybatis的功能配置等。3. 创建实体类：创建与数据库表对应的实体类。4. 创建Mapper接口：创建与数据库表交互的Mapper接口。5. 创建Mapper接口SQL实现： 可以使用mapperxml文件或者注解方式6. 创建程序启动类7. 注解扫描：在Spring Boot的主应用类上添加`@MapperScan`注解，用于扫描和注册Mapper接口。8. 使用Mapper接口：在需要使用数据库操作的地方，通过依赖注入或直接实例化Mapper接口，并调用其中的方法进行数据库操作。</code></pre><p>配置类：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span>  <span class="comment"># setting配置</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.pojo</span> <span class="comment"># 配置别名</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span> <span class="comment"># mapperxml位置</span></span><br></pre></td></tr></table></figure><p>这里的mapper接口在XML文件里实现。</p><p>位置：resources&#x2F;mapper&#x2F;UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace = 接口的全限定符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后启动类加一个接口扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.Qing.mapper&quot;)</span> <span class="comment">//mapper接口扫描配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AOP整合配置"><a href="#AOP整合配置" class="headerlink" title="AOP整合配置"></a>AOP整合配置</h2><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接使用aop注解即可: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com..service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogAdvice.before&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;joinPoint = &quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明式事务配置"><a href="#声明式事务配置" class="headerlink" title="声明式事务配置"></a>声明式事务配置</h2><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：SpringBoot项目会自动配置一个 DataSourceTransactionManager，所以我们只需在方法（或者类）加上 @Transactional 注解，就自动纳入 Spring 的事务管理了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    user.setAccount(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍茫来时</title>
      <link href="/2025/01/22/%E8%8B%8D%E8%8C%AB%E6%9D%A5%E6%97%B6/"/>
      <url>/2025/01/22/%E8%8B%8D%E8%8C%AB%E6%9D%A5%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p><em>我们准备着深深地领受<br>那些意想不到的奇迹，<br>在漫长的岁月里忽然有<br>彗星的出现，狂风乍起。</em></p><p>从小到大，我背过无数种固定格式的开头，名人名言好词佳句，以至于甚至现在我都爱写一段定场诗，单纯因为喜欢而正文里又没地方塞。我爱写什么就只管写，想取什么抽象标题就取什么，反正没人看，都是我自己的。</p><p>之前想到一个特别好的开头，似乎是梦里妙手偶得，它被我跟闹钟一起按灭了。我忘了很多事，忘记是个很好的词，它让我自己不会再具有时空上的连续性，所以也不再被推广意义，不会被寄予价值。因为我忘了，所以我们毫无联系。想起史铁生写过，要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘。</p><p>史铁生还写过，当年我在地坛里挥霍光阴，曾屡屡地有过怀疑，我在地坛吗？还是地坛在我？现在我看虚空中也有一条界线，靠想念去迈过它，只要一迈过它便有清纯之气扑面而来。我已不在地坛，地坛在我。就像是黄昏时分，地坛里会长出一个又一个史铁生一样；每到年关岁末，记忆里就自然而然地长出一个又一个我。我已不在往日，是往日在我。</p><p>好像闻到冬天下雪时的冷气了，虽然我没怎么见过雪，可是我就是明明白白感觉到雪要来了，没来由地笃定这就是要下雪的感觉。</p><p>入冬的的重庆，变得像放了一夜开始返潮的塑料袋。湿漉漉灰扑扑的天空风吹不动，偶尔会有小雨，发闷的空气堪堪泛起似有若无的沉重涟漪。回宿舍的路上偶然望见缙云山，黑色的山脊有蒙茸的边缘，像宣纸的毛边，那应该是参差的树梢。很快漫山的云雾裹上来，都看不真切了。我很自然地犯困，一时想起的事像夜空，也笼起一层雾气，真的很远，特别远，我应该已经忘掉了，又好像没忘掉。</p><p>我正迎来一个没有尽头的冬天。</p><p><br><br></p><p>脑袋里纷乱，嘈杂，熙熙攘攘，没有意义，我每天都带着一大堆复杂混乱的思绪走出宿舍，然后又带着另一堆躺回床上。脑袋里想的事有时候具体，片刻间又漫漶不清，像是对不上焦的投影仪，或者是在眼镜店测度数时闪烁的地平线。现在，图书馆里，编译器上疯狂跳动着看不懂的字符，我短暂跳脱出这一切的意义，感觉这简直像是异世界里发生的事。我就像在领衔主演一部无厘头电影。</p><p>我想大部分人，他们生命里的这段时光都大差不差，可以用飘摇、喧嚣、惶恐这些词来形容。2022年的6月，我从压抑的教学楼仓皇逃离，奔向苍茫天地，直入万重山，没有恐惧，不会彷徨，从不回头看。我要一腔孤勇匹马单枪，只身劫回落山的太阳。</p><p>第一次坐上重庆的轻轨时，车厢驶到地上部分，豁然出现了很美的江景，我有一瞬间失神，我是要奔向一个无拘无束的未来。世间萧散更何人，除非清风明月我。可是2024年的12月，此时此刻，立冬，我承认已经很长时间不再梦到山峦，说不上来是这个一年里最长的夜晚长，还是我没来由的悲伤的反射弧长。明月在天上，盗版的明月碎在水洼里，冷峭的光芒到底来自哪里。走在路上，人影憧憧，冷雨霏霏，画面在脑海中跑马，头顶的时钟终于毫不掩饰地扰动起了平稳匀速运行着的时间。</p><p>每个过去的时间段都好像是一场蹒跚的梦，那么明亮又那么模糊。每次想起以前的事，我心中都会有莫名的悲伤和温馨感，这是我过去许诺过的未来，同样也是未来从未有过的过去，它不曾存在却又存在过。一下子想起十七八岁的年纪，趴在教室走廊的廊沿上看天。曾有一些好的时候那么好，至于不好的时候，我都忘记了。就好像那个一口气写了五首《菩萨蛮》的韦庄。他讲，当时年少春衫薄。</p><p>二十一岁，听到少年感这个词，或是有人叫我“青年人”时，我感觉就像被麻绳悄悄地围绕了脖颈，然后突然勒紧猛扯。<br>有时我会感觉熟知的一切都已经彻底停滞，只有陌生的世界带着我往前一路狂奔，喘不上气。成长的难题摆在我的面前，我不知道怎么解。</p><p>这让我回想起开小差时刚好被老师叫起来回答的日子，你很难想象没听课该怎么去区分tan和sin以及cos；就像我现在没准备八股，也很难回答去回答transform和translate的区别。我说实话，这真的有区别吗？那年十三站着如喽啰，这年二一坐着如喽啰。</p><p>我想装死，想逃避，想要返回一个大大的403 forbidden。</p><p>我是一个很恋旧的人，喜欢拖拖拉拉地怀念过去，总希望一切事物都按既定的秩序运行下去，最好不要骤然的变更。我的怀念往往只归咎于那些走丢的桑梓故人，疏离的细碎旧事，这是另一种刻舟求剑，我总是有意无意忽略了这个世界本身一刻也没有停下来的残酷事实。一直以来，我知道有些东西在我身体里穿行流淌，我以为是热血，是烈酒，但其实是尿。成长就是接受这回事：我们总在不准确的认知里确凿地活着，在诗与理想形而上的废墟里，现实的人仍然像野草一样热烈地疯长。</p><p>我想告诉这个世界，希望能彻头彻尾、完完整整、仔仔细细、从里到外地认识一下你，当然要是还能再这样认识一下我自己就再好不过了。其实，我现在真正想的是，能像这样认识一下redis的底层原理该多好呀。真希望所有事情不要再迂回，都可以和我空空荡荡的脑袋一样磊落。</p><br><br><p>当我们浪漫化一件事情，往往是在它要消亡的时候。就像我们觉得阿诺脑子不好，估计阿诺看我们也觉得我们脑子不好。脑袋尖尖没问题，心脏在左边然后再纠正到右边也没问题，上门厦门也无所谓，因为阿诺生活就是这样，想蹦就蹦想跳就跳，因为可能这是阿诺，但这是阿诺不太可能。阿诺本身是傻逼，但是这么一解构可就给你浪漫完了。</p><p>同样有一种很浪漫的说法，藤本树说，人死后就会去电影院，电影院里的观众和我长的很像，因为他们是每一个前代的我。于是我们看着下一代的自己在银幕上犯下相差无几的错误，走上似曾相识的路，再走过来坐在我们之间，就这样一遍又一遍。</p><p>想起小学微机课，老师在屏幕上给我们手打C语言代码，编译器是devc++，深色的，写这些时一恍惚，突然分不清过去和现在。我好想叫醒数据流里疲惫的自己，想回到十七岁那年夏天，能踢完球喝着可乐，和三两同学一起走在路上，晴空下，树影间，天不怕地不怕，放肆地开怀大笑。</p><p>我在文章里频繁地谈自己，也是出于无奈，我也想多谈谈风花雪月，谈谈前朝的历史，酒中的诗词，谈谈韶华流水，谈阳光与阴影下的美丽与忧伤。可惜我只能谈一谈我这个胆小鬼面对宏大叙事的怀疑与不安。我现在仅仅是把思绪写出来，充当一个转换口，把脑袋里的电信号变成存储设备里的电信号。一段不连续的电流，携带烧焦的记忆。</p><p>平心而论，纯粹的玩世不恭，或是极致的理想主义，其实都很幸福。归根到底改善是我自己太不纯粹，两种极端在彼此靠近却无法抵达。最终自己在现实和幻想，责任与梦的应力拉扯下，缓慢地变成了现在这个费拉不堪的样子。</p><p>我知道这篇东西写得很乱。</p><p>我写的不是散文，散文讲究形散意不散，但是当我开始写作，我的文章就像涪江的水一样，哗啦啦就流走了。看似风平浪静的江面，实则一直在翻涌着波浪，如果不是这样的话，你又如何解释我无法走进同一条河流两次呢？我的思维过分跳跃，太多想要诉说的话撑开我的嘴巴，争先恐后排着队向外蹦。而我又实在缺乏排列好它们的毅力，因为它们破碎得太小了，小得就像是我在外婆家玩耍时不小心掉到床底的弹珠，或是不小心打碎的温度计里的水银，对不起，我的人生是我唯一能够严丝合缝写完的故事。</p><p>我写这些，近似于写诗歌，但又不是，我混乱的思绪变成满地破碎的词语，拼接不出一句逻辑自洽的诗句。收集不到适合用来相互对应的韵律，因为我无法拼接，无法粘贴，只能勉强呼应若有若无的延续，仿佛一抹从我耳边吹拂离去的清风。记忆混合着泥泞，夹在我的指甲缝里。</p><p>我希望自己是霓虹闪亮碎片里面斑斓的自由，暖色调无忧虑的饥饿蝴蝶，是自己世界里卓绝的不世之才。我是程序员，大学生，我是功绩社会里辗转的责任青年，是世俗容许的错轨列车，是旧土地里挣扎着的荒草，河蚌般数年孕育不敢吐露的异色珍珠。我是一支漏墨的笔。平仄牵扯着我的头，让夜色顺着脸颊滴落出文字。我是每一个我，我是所有的我，一千万个类比也休想命中我分毫。“我是一团矛盾，但是我以自我矛盾为乐。”这段话是林语堂八十岁写出来的，真希望自己八十岁也能这样。</p><p>八十岁，真是有点遥远了。那是2083年，是小学写的作文里都没出现过的年份。突然好怀念别人问我多大，我能用十打头的那些日子。那时看现在是隔岸观火，现在看那时只有无可奈何。我不愿意承认自己会渐渐由内而外地衰老下去，我想变成永远不会进入缓存的超时数据。对不起，我饮鸩止渴一般渴望着悲剧，像是明知道会得肺癌还要抽烟，难道你能解释每一次吞吐有什么意义吗？我是一场落在生命里的雪，很少的一部分纷纷扬扬，更多的部分落在地上，变成人们行走的负累。</p><p>小时候爱吃麦当劳，但是都是跟着爸爸妈妈去吃，没自己点过。后来去上补习班，有了零花钱，大摇大摆走进麦当劳，看着菜单发愁。憋了半天支支吾吾说我要一个麦香鱼一包薯条一瓶可乐，店员说这不就是麦香鱼套餐吗，我说啊啊啊啊啊那就一份麦香鱼套餐吧。</p><p>一转眼十年过去了，我还是爱吃麦香鱼，喜欢那种蛋白质和过量油脂满溢的感觉。把麦香鱼套餐端回来的路上，世界上其他的一切都已经消失了。那些狗屁不通的先验论本体论概念论精神分析存在主义都在那一瞬间远去了，去你的k8s ssm rpc kafka，什么人生的梦想生命的价值活着的意义都短暂地不再重要了。这个世界只剩下那一份麦当劳套餐。当下的这个瞬间，连接了所有风尘仆仆的过去和所有的明天。</p><p>我以后大概会每周一到周五上班，星期六说不准，星期天休息。我一度觉得自己老下去了，可是事实上我永远不会比现在更年轻，这是非常反直觉的暴论。事实上，可以理解成，我永远活在最自己年轻的瞬间，这是AOP切面编程技术——能想到这一点我这辈子也是有了。我B站关注的电子宠物挂壁仔刚进厂，更惨，忙季两班倒无休，他问活着的意义是什么。</p><p>如果是加缪来回答这个问题，他会说这个问题本身就不对，你不能对生活进行假设，那样你就会陷入某种意义陷阱，不能把生活变成崇高，因为今天和明天的区别只有明天尚未到来。我们整日都在追逐明天，为我们甚至无法保证的未来做打算。人们总是喜欢用如果， 去勾勒一些莫须有的奇迹，我们常常承诺说 “总有一天”，接着便延后梦想，推迟冒险，把最好的自己留到以后。但时间不等人，它是唯一无法逆转的底层逻辑。”全世界的水都会重逢，北冰洋与尼罗河会在湿云中交融，即使漫游，每条路也都会带我们归家。”黑塞是这样说的。我们翻阅回忆，浏览着那些我们不知会转瞬即逝的时刻的照片。愿我们都能在走出时间之前，不留遗憾地度过每一天，每一小时，每一分钟。至于走出时间之后，所有的时间都属于我了。</p><p>我很早就读完了局外人，鼠疫，西西弗的神话，现在才后知后觉，懵懵懂懂地理解了，为什么他们会说那些一切有根据的信念的根据都是没有根据的信念。这句话很拗口，或许因为，其实这些所谓的意义都是扯淡，一切的意义都没有意义，而没有意义本身，就是最大的意义。更拗口了。</p><p>生活好在无意义，才有空间赋予意义。为什么不去拥抱那些不确定性，不完美的瞬间，以及此时此刻。我可以不停地忘掉，丢弃，迷失，然后和我所遗弃的事物反复偶遇。生活不应该变成一连串的 “如果”和 “可能”。毛姆在《月亮与六便士》中写道，“唯一重要的是永恒的现在”。</p><p>好多书，好多文章，好多诗歌，好多引用。我真的读过那些东西吗，我以为已经忘记很多事情了，一口气走了那么远的路，一回过头还是把它们统统撞见。当思绪连成一条线，就好像是突然复明，所有瞬间里，所有的自己，被时间的针脚缝补成一个闪念，一段缀在针头上的灼热目光。每一个此刻都是一枚针，每一个领悟的瞬间都是一颗针眼，它们都会变成忘不掉的句子，我含着它们，嚼嚼嚼，然后打开编译器写业务逻辑，恍若千年前的一个麦客，咬上一口干粮，晃悠悠上路。其实我都知道，我写出来的不是多华美的文字，而是一种迫不得已的爆炸；类似我忘记捕获的异常，在编译运行的时候就会一泻千里，我需要从数量众多的错误信息中拨出它们，也需要在这样的境况里拔出自己。</p><p>明天我就要开始一场新的流亡。前二十年，我一直被形形色色的“分数”、“排名”通缉着。往后，我将被“明天”这个词语追到时间的尽头。明天，我的脸会比太阳更早升起在洗漱台的镜子前。 这个世界未曾开过哪怕一次尊口，我却总是心照不宣地把一切都慢慢懂得，一次又一次继续相信。</p><p>太阳会升起会落下，会光芒万丈，我也会幸福、会绝望。</p><p>漫山遍野的野草，满屋乱爬的蟑螂，数我最难杀。</p><p><em>时光如河水 入海 向下<br>而我向高处扬升<br>七分像触向不周的共工<br>析取范式 自我分割<br>抛躯剔骨 失魂落魄<br>余下三分是文字的礁石<br>帮我固守命运 未有差池<br>那些词语 小小的 四处散落<br>如踏在水面的脚印<br>沉默地落下 寂静地应和<br>一生的遥远涟漪</em></p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-栈与队列</title>
      <link href="/2024/12/12/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B04-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2024/12/12/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B04-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>在 Java 中，栈（Stack）是一种后进先出（LIFO）的数据结构，用于存储元素。在栈中，只有栈顶的元素是可见的和可访问的，其他元素都被隐藏起来，直到栈顶的元素被移除或弹出。</p><p>Java 中的 java.util.Stack 类实现了栈的数据结构，并且是线程安全的，继承自 Vector 类。</p><p>压栈：栈的插入操作叫做进栈 &#x2F; 压栈 &#x2F; 入栈， <strong>入数据在栈顶</strong> 。</p><p>出栈：栈的删除操作叫做出栈。 <strong>出数据在栈顶</strong> 。</p><p><img src="/img/saunfa/zhan.png"></p><p>快速上手：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 压栈操作</span></span><br><span class="line">        stack.push(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 弹栈操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topLanguage</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;弹出栈顶元素：&quot;</span> + topLanguage);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看栈顶元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">currentTop</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前栈顶元素：&quot;</span> + currentTop);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判空操作</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈不为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例展示了<a href="https://so.csdn.net/so/search?q=%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C&spm=1001.2101.3001.7020">栈的基本操作</a>，包括压栈、弹栈、查看栈顶元素和判空。栈在 Java 中常用于处理需要后进先出顺序的场景，例如表达式求值、逆序输出等。</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>在 Java 中，队列（Queue）是一种先进先出（FIFO）的数据结构，用于存储元素，是只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表。</p><p>队列在 java.util 包中有多种实现，如 LinkedList、ArrayDeque 和 PriorityQueue，队列具有先进先出FIFO(First In First Out) </p><p>入队列：进行插入操作的一端称为队尾（Tail&#x2F;Rear） 。</p><p>出队列：进行删除操作的一端称为队头（Head&#x2F;Front）。</p><p>总之队列的头部是指最先被取出的元素，而尾部是指最先被插入的新元素。</p><p><img src="/img/saunfa/945fe600-1562-4040-8a75-157824cf62d1.png"></p><p>快速上手：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(<span class="number">1</span>);</span><br><span class="line">    q.offer(<span class="number">2</span>);</span><br><span class="line">    q.offer(<span class="number">3</span>);</span><br><span class="line">    q.offer(<span class="number">4</span>);</span><br><span class="line">    q.offer(<span class="number">5</span>); <span class="comment">// 从队尾入队列</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(q.size());</span><br><span class="line">    System.out.println(q.peek()); <span class="comment">// 获取队头元素</span></span><br><span class="line">    </span><br><span class="line">    q.poll();</span><br><span class="line">    System.out.println(q.poll()); <span class="comment">// 从队头出队列，并将删除的元素返回</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;队列空&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(q.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例展示了队列的基本操作，包括入队、出队、查看队头元素和判空。队列在 Java 中常用于实现任务调度、消息传递等场景，能够有效管理元素的顺序和执行顺序。</p><h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p>在 Java 中，<code>Deque</code>（双端队列）是一个接口，表示一种允许从队列两端进行插入和删除操作的集合。它继承自 <code>Queue</code> 接口，提供了比普通队列更灵活的操作方式，适用于需要在队列两端进行频繁插入和删除的场景。</p><p>常见的实现类有：</p><ul><li><strong>ArrayDeque</strong>：基于动态数组实现，通常比 <code>LinkedList</code> 更快，特别是在大多数操作（如插入、删除）上，因为它不需要频繁地进行指针操作（如链表中的指针更新）。它的空间效率较高，但在某些极端情况下（如需要频繁扩容）低效。</li><li><strong>LinkedList</strong>：基于双向链表实现，适合用于需要频繁修改队列中间部分的场景。插入和删除操作的时间复杂度为常数时间 <code>O(1)</code>，但相对于 <code>ArrayDeque</code>，其内存开销较大，因为每个元素都需要存储额外的指针。</li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>offerFirst(E e)</td><td>将元素插入队列的头部。</td></tr><tr><td>offerLast(E e)</td><td>将元素插入队列的尾部。</td></tr><tr><td>pollFirst()</td><td>删除并返回队列头部的元素。</td></tr><tr><td>pollLast()</td><td>删除并返回队列尾部的元素。</td></tr><tr><td>peekFirst()</td><td>返回队列头部的元素，不删除。</td></tr><tr><td>peekLast()</td><td>返回队列尾部的元素，不删除。</td></tr></tbody></table><p>快速上手：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DequeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 ArrayDeque 创建一个 Deque</span></span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在队列的尾部添加元素</span></span><br><span class="line">        deque.addLast(<span class="number">1</span>);  <span class="comment">// 或 deque.offerLast(1)</span></span><br><span class="line">        deque.addLast(<span class="number">2</span>);</span><br><span class="line">        deque.addLast(<span class="number">3</span>);</span><br><span class="line">        System.out.println(deque); <span class="comment">// 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在队列的头部添加元素</span></span><br><span class="line">        deque.addFirst(<span class="number">0</span>);  <span class="comment">// 或 deque.offerFirst(0)</span></span><br><span class="line">        System.out.println(deque); <span class="comment">// 输出: [0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从头部移除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> deque.removeFirst();  <span class="comment">// 或 deque.pollFirst()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Removed from front: &quot;</span> + first); <span class="comment">// 输出: 0</span></span><br><span class="line">        System.out.println(deque); <span class="comment">// 输出: [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从尾部移除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> deque.removeLast();  <span class="comment">// 或 deque.pollLast()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Removed from end: &quot;</span> + last); <span class="comment">// 输出: 3</span></span><br><span class="line">        System.out.println(deque); <span class="comment">// 输出: [1, 2]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取队列头部和尾部的元素（不移除）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">peekFirst</span> <span class="operator">=</span> deque.getFirst();  <span class="comment">// 或 deque.peekFirst()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">peekLast</span> <span class="operator">=</span> deque.getLast();    <span class="comment">// 或 deque.peekLast()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;First: &quot;</span> + peekFirst + <span class="string">&quot;, Last: &quot;</span> + peekLast); <span class="comment">// 输出: First: 1, Last: 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="相互实现"><a href="#相互实现" class="headerlink" title="相互实现"></a>相互实现</h1><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232.用栈实现队列</a></p><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><p><strong>说明：</strong></p><ul><li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责进栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;    </span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) <span class="keyword">return</span>; </span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty())&#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225.用队列实现栈</a></p><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>注意：</strong></p><ul><li>你只能使用队列的标准操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li><li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queue1; <span class="comment">// 用于存放栈元素的主队列</span></span><br><span class="line">    Queue&lt;Integer&gt; queue2; <span class="comment">// 辅助队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue2.offer(x);</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty()) </span><br><span class="line">            queue2.offer(queue1.poll());</span><br><span class="line">        Queue&lt;Integer&gt; temp = queue1;</span><br><span class="line">        queue1 = queue2;</span><br><span class="line">        queue2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.poll(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.peek(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><p><a href="https://leetcode.cn/problems/valid-parentheses/">20.有效的括号</a></p><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><p><strong>输入：</strong>s &#x3D; “()”</p><p><strong>输出：</strong>true</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>s &#x3D; “()[]{}”</p><p><strong>输出：</strong>true</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始我的思路是使用哈希表，因为只有三种括号，六个字符，可以创建一个长度为3的数组，每一位都代表一种括号。最后判断每一位是否为0。这种思路是错误的，因为括号存在顺序，需要匹配相对应的类型。</p><p>事实上，如果不匹配，只有三种情况：</p><ol><li>括号类型不匹配  <code>[ ( ] )</code></li><li>左边的括号多了 <code>&#123;&#123;  &#125;`3. 右边的括号多了 `&#123;  &#125;&#125;</code></li></ol><p>思路是，遇到左括号就把对应类型的右括号放入栈里，这样依次向右遍历；遇到右括号就检查栈顶元素是否匹配，如果匹配则将此元素出栈，继续遍历，不匹配则直接终止判断返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>); </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( stack.isEmpty() || c != stack.pop())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除相邻重复项"><a href="#删除相邻重复项" class="headerlink" title="删除相邻重复项"></a>删除相邻重复项</h1><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></p><p>给出由小写字母组成的字符串 <code>s</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p><p>在 <code>s</code> 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p><strong>示例：</strong></p><p>输入：”abbaca”<br>输出：”ca”<br>解释：<br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</p><p><strong>提示：</strong></p><ol><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> 仅由小写英文字母组成。</li></ol><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>真的很暴力。超时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String S)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">now</span> <span class="operator">=</span> S.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (now != next) &#123;</span><br><span class="line">            now = S.length();  </span><br><span class="line">            S = S.replace(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;bb&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;cc&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;dd&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;ee&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;ff&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;gg&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;hh&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;ii&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;jj&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;kk&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;ll&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;mm&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;nn&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;oo&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;pp&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;qq&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;rr&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;ss&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;tt&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;uu&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;vv&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;ww&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;xx&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                 .replace(<span class="string">&quot;yy&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;zz&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            next = S.length(); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> S; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>将这个字符串里的每一位字符依次入栈，一旦发现栈顶的字符和将要入栈的字符一样，就直接出栈。在遍历完整个字符串以后，就可以保证整个栈里没有相邻重复项了。处理一下栈里的元素，反转成字符串即可。</p><p>栈的目的就是存放遍历过的元素，当遍历当前这个元素时，去栈里检查我们是不是遍历过相同数值的相邻元素。然后再去做对应的消除操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>( <span class="type">char</span> c : s.toCharArray() ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !stack.isEmpty() &amp;&amp; stack.peek() == c )&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ( !stack.isEmpty() ) &#123;</span><br><span class="line">            result.append(stack.pop()); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h1><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值</a></p><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a> 表示的算术表达式。</p><p>请你计算该表达式。返回一个表示表达式值的整数。</p><p><strong>注意：</strong></p><ul><li>有效的算符为 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code> 和 <code>&#39;/&#39;</code> 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是 <strong>向零截断</strong> 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 <strong>32 位</strong> 整数表示。</li></ul><p><strong>示例 1：</strong></p><p>输入：tokens &#x3D; [“2”,”1”,”+”,”3”,”*”]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) &#x3D; 9</p><p><strong>示例 2：</strong></p><p>输入：tokens &#x3D; [“4”,”13”,”5”,”&#x2F;“,”+”]<br>输出：6<br>解释：该算式转化为常见的中缀算术表达式为：(4 + (13 &#x2F; 5)) &#x3D; 6</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>典中典之逆波兰表达式，没做过的感觉没上过数据结构课。</p><p>五星上将麦克阿瑟说过：遇到这种逆波兰表达式，根据规则用栈处理就秒了。</p><p>注意减法和除法存在顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">         <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;+&quot;</span>.equals(s))&#123;</span><br><span class="line">                stack.push( stack.pop() + stack.pop() );</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>.equals(s))&#123;</span><br><span class="line">                stack.push( -(stack.pop() - stack.pop()) );</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;*&quot;</span>.equals(s))&#123;</span><br><span class="line">                stack.push( stack.pop() * stack.pop() );</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/&quot;</span>.equals(s)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.push(num2 / num1);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;         </span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h1><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></p><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><p><strong>示例 1：</strong></p><p>输入：nums &#x3D; [1,3,-1,-3,5,3,6,7], k &#x3D; 3<br>输出：[3,3,5,5,6,7]<br>解释：<br>滑动窗口的位置                最大值</p><hr><p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p><p><strong>示例 2：</strong></p><p>输入：nums &#x3D; [1], k &#x3D; 1<br>输出：[1]</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><h3 id="暴力-1"><a href="#暴力-1" class="headerlink" title="暴力"></a>暴力</h3><p>最简单的思路就是每次更新窗口都遍历一次，找到最大值返回。这样的时间复杂度是O(n * k)，超时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span> || k == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; i + k; j++)</span><br><span class="line">                max = Math.max(max, nums[j]);</span><br><span class="line">            result[i] = max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>为了降低时间复杂度到O(n)，我们需要使用单调队列的方法。</p><p>简单来讲，就是需要自定义一个队列，这个队列内含有窗口里的元素，随着窗口的移动，队列也一进一出，每次移动之后，可以返回队列里面的最大值是什么。</p><p>首先我们知道要查询最大值，所以队列里的元素一定是要排序的，而且必须从队头到队尾递减，保证最大值放在队头，这样才可以在peek这个队列时直接返回最大值。但窗口移动的时候，队列就需要弹出元素，我们已经进行了排序，现在无法得知应该弹出哪一位元素。</p><p><strong>其实队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素，同时保证队列里的元素数值是由大到小的。</strong>这个维护元素单调递减的队列就叫做<strong>单调队列，即单调递减或单调递增的队列。</strong>这里我们需要保证从队头到队尾递减，也就是一个单调递减的队列。</p><p>就是说，我们需要实现以下功能：</p><ol><li><p>add( )</p><p>向队列里加入新进入窗口的元素。为了保证单调递减，如果这个元素大于左侧元素，就意味着左侧的这个元素在新元素加入后，<strong>必不可能成为任何一个窗口内的最大值</strong>，可以把它从队列里直接删去。</p></li><li><p>poll( )</p></li></ol><p>   删除队列里离开窗口的元素。现在poll( )需要处理的一定是队列里的最大值。最大值需要主动从队列里删除的情况有且只有此元素已经不在窗口内，否则早就被更新掉了。</p><ol start="3"><li><p>peek( ) </p><p>返回队列里最大的值，就是返回队头的元素，peek一下就可以了。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length - k + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">MyQueue</span> <span class="variable">myQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k ; i++ )&#123;</span><br><span class="line">            myQueue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res[<span class="number">0</span>] = myQueue.peek();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            myQueue.poll(nums[i - k]);</span><br><span class="line">            myQueue.add(nums[i]);</span><br><span class="line">            res[num++] = myQueue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !deque.isEmpty() &amp;&amp; val == deque.peek() )&#123;</span><br><span class="line">            deque.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; val &gt; deque.peekLast())&#123;</span><br><span class="line">            deque.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        deque.offerLast(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deque.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现的单调队列并不仅仅是对窗口里面的数进行排序，它的核心在于维护一个窗口。如果只是排序的话，和优先级队列就没有区别了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-哈希</title>
      <link href="/2024/12/10/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B03-%E5%93%88%E5%B8%8C/"/>
      <url>/2024/12/10/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B03-%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>哈希（Hash）是一个广泛应用于数据结构和算法中的概念，主要用于快速查找、存储和比较数据。</p><p>哈希的核心在于哈希函数（Hash Function），它将输入（通常称为键，key）映射到一个固定范围的输出值，这个输出值称为哈希值（Hash Value）或哈希码（HashCode）。</p><p>哈希的目的在于将原本复杂、不规则的数据转化为简洁的、固定长度的值，使得数据的存储和检索更加高效。</p><h2 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h2><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p><p>其实直白来讲其实数组就是一张哈希表。哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p><p><img src="/img/saunfa/20210104234805168.png" alt="哈希表1"></p><p><strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong>例如要查询一个名字是否在这所学校里。要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。</p><p>只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>Java中的HashMap是一个实现Map接口的类，它提供了一个存储键值对（key-value pairs）的数据结构。HashMap允许使用唯一的键来映射到特定的值，并且能够高效地进行插入、删除和查找操作。键值对之间没有特定的顺序，HashMap也不是线程安全的。</p><p>关键特性和内部工作原理的详细说明：</p><p><img src="/img/saunfa/48d2aaec-b6dd-48ec-bf2c-893d86704b74.png"></p><p>特性：</p><ul><li>键值关联：HashMap存储的是键值对，其中键是唯一的，而值可以重复。</li><li>无序性：HashMap中的元素没有特定的顺序，迭代时的顺序并不反映插入时的顺序。</li><li>允许null值和null键：HashMap是少数几个可以接受null键和null值的Java集合之一，但每个HashMap只能有一个null键。</li><li>线程不安全：HashMap不是线程安全的，多线程环境下若不采取额外的同步措施，可能导致数据不一致性。</li><li>可调整大小：随着元素的增加，HashMap会自动扩容来维持其性能，通过重新哈希所有元素到更大的数组中实现。</li><li>性能：平均情况下，HashMap提供O(1)的时间复杂度进行插入、删除和查找操作。</li></ul><p>应用场景：</p><ul><li>缓存：HashMap非常适合做轻量级的缓存，快速存取热点数据。</li><li>数据映射：在需要快速根据键查找相关联值的场景，如配置参数管理。</li><li>计数：可以用HashMap统计元素出现的频率，键是元素，值是出现次数。</li><li>去重：虽然HashSet更直接，但在需要存储额外信息或自定义比较逻辑时，HashMap可以用来去重。</li><li>图的邻接表表示：在图算法中，HashMap可以用来表示顶点的邻接关系，键是顶点，值是一个列表或集合，包含与该顶点相邻的所有顶点。</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>Java中的HashSet是一个实现了Set接口的集合类，它提供了一种存储不可重复元素的高效数据结构。HashSet的实现基于HashMap，这意味着它内部使用了哈希表来管理元素，这使得HashSet能够提供快速的插入、删除和查找操作。</p><p>为了确保HashSet能正确识别重复元素，存储在HashSet中的自定义对象必须正确重写<code>equals()</code>和<code>hashCode()</code>方法，保证相等的对象具有相同的哈希值，并且通过<code>equals()</code>方法判断也为相等。</p><p>以下是关于HashSet的一些关键特性和内部工作原理的详细说明：</p><p><img src="/img/saunfa/2DF4F52BE8C7520A3313D2DDF9AD036D.png"></p><p>特性：</p><ul><li><p>无序性：HashSet不保证元素的插入顺序，每次遍历HashSet时，元素的顺序可能不同。这是因为HashSet在内部使用哈希表，元素的存储位置由其哈希值决定。</p></li><li><p>不允许重复：HashSet中不能包含重复的元素。这是通过比较元素的哈希值以及equals()方法来实现的。如果两个元素的哈希值相同，并且通过equals()方法比较也认为是相等的，则视为重复元素，后者将不会被加入集合中。</p></li><li><p>允许null值：HashSet允许存储一个null元素，因为HashMap允许一个键为null。</p></li><li><p>非线程安全：HashSet不是线程安全的。如果多个线程同时访问一个HashSet，且至少有一个线程修改了HashSet，则必须通过外部同步来保证线程安全。</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个HashSet实例</span></span><br><span class="line">        HashSet&lt;String&gt; myHashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        myHashSet.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        myHashSet.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        myHashSet.add(<span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet after adding elements: &quot;</span> + myHashSet);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 检查元素是否存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPresent</span> <span class="operator">=</span> myHashSet.contains(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Is &#x27;Banana&#x27; in the HashSet? &quot;</span> + isPresent);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 尝试添加重复元素</span></span><br><span class="line">        myHashSet.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet after trying to add duplicate &#x27;Apple&#x27;: &quot;</span> + myHashSet);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isRemoved</span> <span class="operator">=</span> myHashSet.remove(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Is &#x27;Banana&#x27; removed? &quot;</span> + isRemoved);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet after removing &#x27;Banana&#x27;: &quot;</span> + myHashSet);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 遍历HashSet</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Iterating over HashSet:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String fruit : myHashSet) &#123;</span><br><span class="line">            System.out.println(fruit);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清空HashSet</span></span><br><span class="line">        myHashSet.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet after clearing: &quot;</span> + myHashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于hashCode-方法"><a href="#关于hashCode-方法" class="headerlink" title="关于hashCode()方法"></a>关于hashCode()方法</h3><p><strong>作用</strong>：Java中的每个对象都继承自Object类，而Object类有一个hashCode()方法，这个方法被设计用来返回对象的哈希码。默认的hashCode()实现通常基于对象的内存地址，但子类通常会重写此方法，以便根据对象的实际内容生成更有意义的哈希值。</p><p>在Object类中，hashCode()方法的默认实现是根据对象的内存地址计算得到的哈希码。换句话说，如果两个对象在内存中的地址不同，那么它们的哈希码就也会不同。</p><p>hashCode()方法返回对象的哈希码值（哈希码），是一个int类型的整数。哈希码是根据对象的内存地址或者根据对象的内容计算得到的一个唯一标识符。在Java中，hashCode()方法通常与equals()方法一起使用，用于判断两个对象是否相等。</p><p><strong>重写规则：</strong>在自定义类中，通常需要重写hashCode()方法，以便根据对象的内容来生成哈希码，而不是依赖于默认的内存地址。<br>如果重写了equals()方法，就应该同时重写hashCode()方法，保证相等的对象拥有相等的哈希码。</p><p>哈希值虽然可以用于快速比较，但不保证绝对唯一，因此在判断对象相等时，除了比较哈希值外，还需要通过<code>equals()</code> 方法比较对象的实际内容。在实现自定义类的hashCode()时，应当遵守与equals()方法的一致性原则，即如果两个对象通过equals()判断为相等，它们的哈希码也必须相等。反之，哈希码相等的对象不一定通过equals()判断相等。</p><p>重写hashCode()方法时，应该遵循以下规则：</p><ul><li>相等的对象必须具有相等的哈希码。</li><li>不相等的对象尽量产生不同的哈希码，以减少哈希冲突的发生。</li></ul><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>数据映射到哈希表上涉及到了<strong>hash function ，也就是哈希函数</strong>。</p><p>把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p><p>哈希函数如下图所示，通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p>哈希函数应该是高效的，计算速度快，且应该尽量均匀分布，以减少哈希冲突。</p><p><img src="/img/saunfa/2021010423484818.png" alt="哈希表2"></p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>如果学生的数量大于哈希表的大小，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表同一个索引下标的位置。</p><p>如图所示，小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希冲突</strong>。</p><p><img src="/img/saunfa/2021010423494884.png" alt="哈希表3"></p><p>解决哈希碰撞方法非常多，这里简写两种常见解决方法， 拉链法和线性探测法。</p><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235015226.png" alt="哈希表4"></p><p>（数据规模是dataSize， 哈希表的大小为tableSize）</p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p><p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235109950.png" alt="哈希表5"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。</p><p>但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><h1 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h1><p><a href="https://leetcode.cn/problems/valid-anagram/">242.有效的字母异位词</a></p><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s &#x3D; “anagram”, t &#x3D; “nagaram” 输出: true</p><p>示例 2: 输入: s &#x3D; “rat”, t &#x3D; “car” 输出: false</p><p><strong>说明:</strong> 你可以假设字符串只包含小写字母。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>定义一个数组record用来上记录字符串s里字符出现的次数。</p><p>需要把字符映射到数组也就是哈希表的索引下标上，<strong>因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。</strong></p><p>再遍历 字符串s的时候，<strong>只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。</strong> 这样就将字符串s中字符出现的次数统计出来了。</p><p>那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。</p><p>那么最后检查一下，<strong>record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。</strong></p><p>最后如果record数组所有元素都为0，说明字符串s和t是字母异位词，return true。</p><p>时间复杂度为O(n)，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>]; <span class="comment">// 创建一个长度为 26 的数组，用来记录每个字母的出现次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历字符串 s，将字符映射为数组索引 0 到 25，增加该字符的计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历字符串 t，同样操作，减少对应字符的计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 record 数组中的所有值是否都为 0</span></span><br><span class="line">    <span class="comment">// 如果某个字符的计数不为 0，说明两个字符串的字符组成不同</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> count: record) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果所有字符计数都为 0，说明是字母异位词</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类似题目"><a href="#类似题目" class="headerlink" title="类似题目"></a>类似题目</h2><ul><li><p><a href="https://leetcode.cn/problems/ransom-note/description/">383.赎金信</a></p><p>这个题主要是理解题意，就是ransomNote里的所有字符必须是被magazine所包含的，所以我们把26个英文字母字符映射到一个26位的数组上。分别操作这两个字符串。</p><p>合法的ransomNote里存在的每个字符的数量，都一定小于magazine中存在的相应字符的数量。</p><p>换句话说，这个ransomNote不能把magazine取空了，都要大于0才行。所以每一位上都要有(count &gt;&#x3D; 0) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  <span class="comment">// 用来记录 &#x27;a&#x27; 到 &#x27;z&#x27; 字母的计数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">            record[ransomNote.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">            record[magazine.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> count: record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://leetcode.cn/problems/group-anagrams/">49.字母异位词分组</a></p><p>这个题是需要把字符串数组里的字母异位词全都组合在一起，然后以列表的形式输出。就是说，每一组字母异位词都可以被视作一个特殊的集合。</p><p>我们知道，当遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。</p><p>遍历 strs 数组中的每一个字符串，然后把这个字符串转换为字符数组，进行一个sort的排序，这样所有的字母异位词都会呈现一个同一的形态，我们把它作为这个HashMap的key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 HashMap，键是排序后的字符串，值是一个 List，存放所有与该键相同的字母异位词</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; theHash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 strs 数组中的每一个字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> str : strs) &#123;</span><br><span class="line">            <span class="comment">// 将字符串转换为字符数组</span></span><br><span class="line">            <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对字符数组进行排序</span></span><br><span class="line">            Arrays.sort(charArray);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将排序后的字符数组转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sortedStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果 theHash 中没有 sortedStr 作为键，</span></span><br><span class="line">            <span class="comment">// 则创建一个新的空 ArrayList 因为需要填补原字符串</span></span><br><span class="line">            <span class="keyword">if</span> (!theHash.containsKey(sortedStr)) &#123;</span><br><span class="line">                theHash.put(sortedStr, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将原字符串添加到 sortedStr 对应的 List 中</span></span><br><span class="line">            theHash.get(sortedStr).add(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 theHash 中所有值的 List，也就是所有字母异位词的分组</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(theHash.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438.找到字符串中所有字母异位词</a></p><p>就是找到字符串P里存在的所有S的字母异位词，返回这些子串的起始索引。</p><p>首先，这些字母异位词的长度一定是和P一样的。这是一个固定长度的窗口。</p><p>就不断比较这个窗口里的部分P和S，找到了就把下标计入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || p == <span class="literal">null</span> || s.length() &lt; p.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 p 和窗口的字符频率</span></span><br><span class="line">        <span class="type">int</span>[] pCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">        <span class="type">int</span>[] windowCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 统计 p 的字符频率</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">            pCount[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始窗口</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            windowCount[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查初始窗口</span></span><br><span class="line">        <span class="keyword">if</span> (matches(pCount, windowCount)) &#123;</span><br><span class="line">            result.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> p.length(); i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 添加新字符</span></span><br><span class="line">            windowCount[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="comment">// 移除旧字符</span></span><br><span class="line">            windowCount[s.charAt(i - p.length()) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查当前窗口</span></span><br><span class="line">            <span class="keyword">if</span> (matches(pCount, windowCount)) &#123;</span><br><span class="line">                result.add(i - p.length() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两个字符频率数组是否相同</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(<span class="type">int</span>[] pCount, <span class="type">int</span>[] windowCount)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pCount[i] != windowCount[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></p><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集。</p><p>输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p><strong>示例 1：</strong></p><p>输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]<br>输出：[2]</p><p><strong>示例 2：</strong></p><p>输入：nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]<br>输出：[9,4]<br>解释：[4,9] 也是可通过的</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>设置两个数组，分别表示nums1和nums2的哈希。避免哈希冲突，数组的长度是nums的长度。</p><p>查找数组nums1和nums2中的数，更新hash1和hash2。</p><p>最后遍历一次，将hash1和hash2中都大于0的数加入数组输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">        <span class="type">int</span>[] hash2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)</span><br><span class="line">            hash1[i]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2)</span><br><span class="line">            hash2[i]++;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++)</span><br><span class="line">            <span class="keyword">if</span>(hash1[i] &gt; <span class="number">0</span> &amp;&amp; hash2[i] &gt; <span class="number">0</span>)</span><br><span class="line">                resList.add(i);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res[] = <span class="keyword">new</span> <span class="title class_">int</span>[resList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : resList)</span><br><span class="line">            res[index++] = i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>使用数组来做哈希的题目，是因为题目都限制了数值的大小。而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</p><p>这一题更好的方法是使用set，因为已知输出结果中的每个元素一定是唯一的，而且我们可以不考虑输出结果的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            set1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set1.contains(i)) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//申请一个数组存放setRes中的元素,最后返回数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[result.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : result)&#123;</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类似题目-1"><a href="#类似题目-1" class="headerlink" title="类似题目"></a>类似题目</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays-ii/">350.两个数组的交集 II</a></p><h1 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h1><p><a href="https://leetcode.cn/problems/happy-number/">202.快乐数</a></p><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为 1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True ；不是，则返回 False 。</p><p><strong>示例：</strong></p><p>输入：19<br>输出：true<br>解释：<br>1^2 + 9^2 &#x3D; 82<br>8^2 + 2^2 &#x3D; 68<br>6^2 + 8^2 &#x3D; 100<br>1^2 + 0^2 + 0^2 &#x3D; 1</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>这道题只有两种结束条件：</p><ol><li>这个数最终变成了1；</li><li>这个数无限<strong>循环</strong>，sum会重复出现；</li></ol><p>所以这道题目使用哈希法，来判断这个sum是否重复出现，如果重复了就是return false， 否则一直找到sum为1为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span> &amp;&amp; !record.contains(n) )&#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNextNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res += (n % <span class="number">10</span>)*(n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>梦开始的地方。这一次我们使用哈希。</p><p><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p><p><strong>示例 2：</strong></p><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p><p><strong>示例 3：</strong></p><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>附上我2022.11.21的python代码，第一次AC，一切都从这里开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self,nums, target</span>):</span><br><span class="line">        lens = <span class="built_in">len</span>(nums)</span><br><span class="line">        j=-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lens):</span><br><span class="line">            <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> (nums.count(target - nums[i]) == <span class="number">1</span>)&amp;(target - nums[i] == nums[i]):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j = nums.index(target - nums[i],i+<span class="number">1</span>)                </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [i,j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h3 id="哈希-1"><a href="#哈希-1" class="headerlink" title="哈希"></a>哈希</h3><p>原先的解法是循环嵌套，使用哈希表的话，可以让查询的时间复杂度从O(n)缩减到O(1)。</p><p>这里的思路是把已经遍历过的元素的值与下标都放在一个HashMap里。每遍历到一个新的位置，就会在HashMap里查找这些遍历过的元素中，是否存在可以满足条件的元素。使用<code>containsKey( )</code>就可以搞定，这样查询的时间复杂度缩减到O(1)。</p><p>四个重点内容：</p><ul><li><p>为什么会想到用哈希表？</p><p>当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就可以使用哈希法。这里的情况是我们需要找到一个和新位置元素匹配的值，要有一个集合来存放我们遍历过的元素，然后在遍历数组的时候去访问这个集合获知某元素是否遍历过，也就是<strong>是否出现在这个集合</strong>。正好使用哈希表。</p></li><li><p>哈希表为什么用map？</p><p>因为我们不仅需要储存值，还需要记录下标。</p></li><li><p>本题map是用来存什么的？</p><p>map目的用来存放我们访问过的元素，因为遍历数组的时候，需要记录我们之前遍历过哪些元素和对应的下标，这样才能找到值相加等于target的目标元素，返回下标。</p></li><li><p>map中的key和value用来存什么的？</p><p>因为我们需要判断这个元素是否出现过，如果出现过，返回这个元素的下标。那么判断元素是否出现，这个元素就要作为key，所以数组中的元素作为key，有key对应的就是value，value用来存下标。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四数相加"><a href="#四数相加" class="headerlink" title="四数相加"></a>四数相加</h1><p><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></p><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>示例 1：</strong></p><p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [-2,-1], nums3 &#x3D; [-1,2], nums4 &#x3D; [0,2]<br>输出：2<br>解释：<br>两个元组如下：</p><ol><li>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</li><li>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</li></ol><p><strong>示例 2：</strong></p><p>输入：nums1 &#x3D; [0], nums2 &#x3D; [0], nums3 &#x3D; [0], nums4 &#x3D; [0]<br>输出：1</p><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>这个题要求是在四个长度一致的数组里各抽取一个元素出来，然后这些元素之和为0。</p><p>如果是一个四层循环，我们的时间开销会直接爆炸成O(n^4)，是无法通过的。这道题需要采取用空间换时间的办法，这也是哈希表的功能之一。</p><p>先求nums1，nums2所有情况的和，这样时间复杂度来到了 O(n^2)，把这些和全都塞进一个HashMap里作为key，value则是特定的和出现的次数。</p><p>接下来求num3，num4所有情况的和，这样时间复杂度也还是 O(n^2)，查找map里有没有数正好是跟num3，num4之和相加为0的。也就是查找- (i + j) 所对应的value，然后遍历完成后作为答案输出即可。</p><p>时间复杂度: O(n^2)</p><p>空间复杂度: O(n^2)，最坏情况下A和B的值各不相同，相加产生的数字个数为 n^2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2) </span><br><span class="line">                map.put(sum, map.getOrDefault(i + j, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i:nums3)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums4)</span><br><span class="line">                res += map.getOrDefault(-(i+j) , <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="水果成篮"><a href="#水果成篮" class="headerlink" title="水果成篮"></a>水果成篮</h1><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><ul><li>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</li><li>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li><li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li></ul><p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p><p><strong>示例 1：</strong></p><p>输入：fruits &#x3D; [1,2,1]<br>输出：3<br>解释：可以采摘全部 3 棵树。</p><p><strong>示例 2：</strong></p><p>输入：fruits &#x3D; [0,1,2,2]<br>输出：3<br>解释：可以采摘 [1,2,2] 这三棵树。<br>如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</p><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>题目翻译成人话就是 ：找至多包含两种元素的最长子串，返回其长度。</p><p>我们的思路是通过滑动窗口不断扩展子串的长度，通过 <code>left</code> 和 <code>right</code> 两个指针来表示当前的窗口区间。<code>right</code> 指针从左到右遍历数组，而 <code>left</code> 指针用于收缩窗口。确保窗口内的水果种类不超过两种。</p><p>为了维护窗口区间，我们需要记录窗口内每种水果的数量。一旦超过两种，我们会收缩区间到合法范围内。这里我们使用HashMap实现，因为这样我们的储存，查询操作都会简化为O(1)的时间复杂度，而且可以同时储存水果的种类和个数，方便管理。在调整窗口时，就不断减少 <code>left</code> 指针指向的水果的计数，直到该水果的计数变为 0，就相当于从哈希表中移除该水果种类，并且左指针 <code>left</code> 接着向右移动，继续收缩窗口。在每次调整窗口后，更新 <code>maxFruits</code> 为当前窗口大小，即 <code>right - left + 1</code>。这是HashMap的典型表现形式。</p><p>整个过程中的每个元素最多被 <code>right</code> 和 <code>left</code> 两个指针各访问一次，所以时间复杂度为 O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="comment">// 用哈希表来记录窗口内每种水果的数量</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 左指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxFruits</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最大水果数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历整个数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; fruits.length; right++) &#123;</span><br><span class="line">            <span class="comment">// 将右指针指向的水果加入窗口</span></span><br><span class="line">            map.put(fruits[right], map.getOrDefault(fruits[right], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果窗口内有超过两种水果，调整左指针</span></span><br><span class="line">            <span class="keyword">while</span> (map.size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">leftFruit</span> <span class="operator">=</span> fruits[left];</span><br><span class="line">                map.put(leftFruit, map.get(leftFruit) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (map.get(leftFruit) == <span class="number">0</span>) &#123;</span><br><span class="line">                    map.remove(leftFruit); <span class="comment">// 移除水果种类</span></span><br><span class="line">                &#125;</span><br><span class="line">                left++; <span class="comment">// 收缩窗口</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新最大水果数</span></span><br><span class="line">            maxFruits = Math.max(maxFruits, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxFruits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-链表</title>
      <link href="/2024/12/09/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02-%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/12/09/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。</p><p>链表的入口节点称为链表的头结点也就是head。</p><p>如图所示： <img src="/img/saunfa/20200806195200276.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>单链表：指针域只能指向节点的下一个节点。</p></li><li><p>双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。既可以向前查询也可以向后查询。</p></li><li><p>循环链表：顾名思义，就是链表首尾相连。</p></li></ul><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>链表在内存中不是连续分布的，是通过指针域的指针链接在内存中各个节点。</p><p>所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p><img src="/img/saunfa/20200806194613920.png"></p><p>这个链表起始节点为2， 终止节点为7， 各个节点分布在内存的不同地址空间上，通过指针串联在一起。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><img src="/img/saunfa/20200806195114541-20230310121459257.png"></p><p>将C节点的next指针指向E节点就可以。</p><p>在C++里最好手动释放D节点，释放这块内存。</p><p>其他语言例如Java、Python有自己的内存回收机制。</p><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p><img src="/img/saunfa/20200806195134331-20230310121503147.png"></p><p>把新节点F的next指针指向C节点原本的next，再让C节点原本的next指针指向F节点。链表的增添和删除都是O(1)操作，也不会影响到其他节点。</p><p>要是删除E节点，就需要从头节点查找到D节点，再通过next指针进行删除操作，查找的时间复杂度是O(n)。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p><h1 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/"> 203.移除链表元素</a></p><p>题意：删除链表中等于给定值 val 的所有节点。</p><p>示例 1： 输入：head &#x3D; [1,2,6,3,4,5,6], val &#x3D; 6 输出：[1,2,3,4,5]</p><p>示例 2： 输入：head &#x3D; [], val &#x3D; 1 输出：[]</p><p>示例 3： 输入：head &#x3D; [7,7,7,7], val &#x3D; 7 输出：[]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原链表操作"><a href="#原链表操作" class="headerlink" title="原链表操作"></a>原链表操作</h3><p>其实上面已经讲过了。移除操作，就是让节点next指针直接指向下下一个节点就可以了，</p><p>因为单链表的特殊性，只能指向下一个节点，如果删除的是头结点又该怎么办呢？</p><p>这里就涉及如下链表操作的两种方式：</p><ul><li><strong>直接使用原来的链表来进行删除操作。</strong></li><li><strong>设置一个虚拟头结点在进行删除操作。</strong></li></ul><p>如果直接使用原来的链表来进行移除，移除头结点和移除其他节点的操作是不一样的。</p><p>因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点，只能将头结点向后移动一位从链表中移除。需要单独写一段逻辑来处理移除头结点的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;head = head.next;&#125;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟头结点"><a href="#虚拟头结点" class="headerlink" title="虚拟头结点"></a>虚拟头结点</h3><p><strong>设置一个虚拟头结点</strong>，这样原链表的所有节点就都可以按照统一的方式进行移除了。它充当链表的伪头部，帮助处理边界情况。在循环中，我们不需要检查 <code>head</code> 是否为 <code>null</code>，而是可以从虚拟节点开始遍历，简化了代码的结构。</p><p>这里一开始设置dummy指向head，cur是当前指向节点的指针，初始化时指向虚拟头节点。接下来，我们遍历链表，直到 链表结束。</p><p>最后，返回dummy.next，即去除目标值节点后的链表的头结点。如果链表头部的节点被删除了，它就是新的头节点。如果链表头部没有被删除，它依然指向原始链表的头节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置一个虚拟的头结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    dummy.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.next.val == val) &#123;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur.next;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h1><p><a href="https://leetcode.cn/problems/design-linked-list/">707.设计链表</a></p><p>题意：</p><p>在一个链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>定义链表结构，初始化。</p><p> head &#x3D; new ListNode(0)，设置虚拟头结点，在初始化时即存在于链表首位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-index"><a href="#get-index" class="headerlink" title="get(index)"></a>get(index)</h3><p>获取链表中第 index 个节点的值。如果索引无效，则返回-1。</p><p>index是从0开始的，第0个节点就是头结点。</p><p>先判断index合法性，然后找到index对应的节点，取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addAtHead-val"><a href="#addAtHead-val" class="headerlink" title="addAtHead(val)"></a>addAtHead(val)</h3><p>你怎么敢违抗有虚拟头结点的我呢.jpg。</p><p>直接让新的头结点指向原本的首位，再让虚拟头结点指向新的头结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="addAtTail-val"><a href="#addAtTail-val" class="headerlink" title="addAtTail(val)"></a>addAtTail(val)</h3><p>遍历到cur.next &#x3D;&#x3D; null，此时已经是末尾。</p><p>然后补充一个节点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="keyword">while</span> (cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">           cur = cur.next;</span><br><span class="line">       &#125;</span><br><span class="line">       cur.next = newNode;</span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="addAtIndex-index-val"><a href="#addAtIndex-index-val" class="headerlink" title="addAtIndex(index,val)"></a>addAtIndex(index,val)</h3><p>将一个节点插入到链表中下标为index的节点之前。如果 index等于链表的长度，那么该节点会被追加到链表的末尾。如果 index比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</p><p>总之就是先判断index合法性，然后要找到目标节点的前一位，改变next即可实现插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="deleteAtIndex-index"><a href="#deleteAtIndex-index" class="headerlink" title="deleteAtIndex(index)"></a>deleteAtIndex(index)</h3><p>先判断index合法性，然后要找到目标节点的前一位，指向next的next，即可实现删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index ; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h1><p><a href="https://leetcode.cn/problems/reverse-linked-list/">206.翻转链表</a></p><p>题意：反转一个单链表。</p><p>示例: </p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL </p><p>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。并没有添加或者删除节点，仅仅是改变next指针的方向。</p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>哥们，其实有三个指针，pre，cur，next。</p><p>首先定义一个cur指针，指向头结点，再定义一个pre指针，初始化为null。</p><p>然后开始反转，首先要把 cur.next 节点用next指针保存一下，因为接下来要将现在的cur.next 指向pre ，此时就已经反转了第一个节点了。</p><p>接下来继续移动pre和cur指针。最后，cur 指针已经指向了null，循环结束，链表也反转完毕。 此时pre指针就指向了新的头结点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>其实就是不断将cur指向pre，当cur为空的时候循环结束的过程。</p><p>关键是初始化的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;</span><br><span class="line">        cur.next = prev;</span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="交换相邻节点"><a href="#交换相邻节点" class="headerlink" title="交换相邻节点"></a>交换相邻节点</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24.两两交换链表中的节点</a></p><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>使用虚拟头结点，这样就不需要单独处理首位的逻辑了。</p><p>正常模拟即可，prev,cur,next三个指针不断更新位置，直到cur &#x3D;&#x3D; 0 或者 next &#x3D;&#x3D; 0 为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummy;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (prev.next != <span class="literal">null</span> &amp;&amp; prev.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> prev.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> first.next;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 交换</span></span><br><span class="line">            cur.next = next.next;</span><br><span class="line">            next.next = cur;</span><br><span class="line">            prev.next = second;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新 </span></span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此思路在递归中亦有记载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 获取当前节点的下一个节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">// 进行递归</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line">        <span class="comment">// 这里进行交换</span></span><br><span class="line">        next.next = head;</span><br><span class="line">        head.next = newNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="删除倒数第N个节点"><a href="#删除倒数第N个节点" class="headerlink" title="删除倒数第N个节点"></a>删除倒数第N个节点</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">[19. 删除链表的倒数第 N 个结点]</a></p><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>经典快慢指针。</p><p>我们要删除 index 为 n 的这个结点，就需要找到 index 为 n-1 的结点，使它的next指向next的next，跳过目标结点实现删除。</p><p>所以，我们设置两个指针，快指针比慢指针领先n跳的位置。这样当快指针的next指向null时，慢指针的next也就指向了目标结点。</p><p>使用虚拟头结点，使逻辑简化，同时处理一些特殊情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="寻找链表交点"><a href="#寻找链表交点" class="headerlink" title="寻找链表交点"></a>寻找链表交点</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">160.链表相交</a></p><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。 </span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>0 &lt;= m, n &lt;= 3 * 104</code></li><li><code>1 &lt;= Node.val &lt;= 105</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li></ul><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>简单来说，就是求两个链表交点节点的<strong>指针</strong>。 交点不是数值相等，而是指针相等。</p><h3 id="尾部对齐"><a href="#尾部对齐" class="headerlink" title="尾部对齐"></a>尾部对齐</h3><p>首先，既然存在交点，那么对于这两个链表而言，交点之后的所有结点就是一模一样的。同时，这个点一定存在于较短的链表的长度范围内。例如A长度为10，B长度为5，绝对会出现在A的后5位，而不是前5位。</p><p>那么我们需要做的，就是先求出两个链表的长度，并求出长度的差值，对齐这两个链表，再使用两个指针curA curB逐次操作，让长链表能从短链表起始的位置处开始和短链表结点比较。</p><p>如果遇到curA &#x3D;&#x3D; curB，则找到交点。否则循环退出返回空指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA; <span class="type">ListNode</span> <span class="variable">curB</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求链表的长度</span></span><br><span class="line">        <span class="keyword">while</span> (curA != <span class="literal">null</span>) &#123; </span><br><span class="line">            lenA++;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (curB != <span class="literal">null</span>) &#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA; curB = headB;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这一步确保A是较长的链表，免去繁琐判断</span></span><br><span class="line">        <span class="keyword">if</span> (lenB &gt; lenA) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpLen</span> <span class="operator">=</span> lenA;</span><br><span class="line">            lenA = lenB;</span><br><span class="line">            lenB = tmpLen;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> curA;</span><br><span class="line">            curA = curB;</span><br><span class="line">            curB = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对齐</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> lenA - lenB;</span><br><span class="line">        <span class="keyword">while</span> (gap != <span class="number">0</span>) &#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            gap--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curA == curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>将A,B两个链表里的内容分别入栈，再依次出栈并比较，当两者不一样时，则已经找到了相交节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建两个栈</span></span><br><span class="line">        Stack&lt;ListNode&gt; stackA = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;ListNode&gt; stackB = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将链表A的节点入栈</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentA</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="keyword">while</span> (currentA != <span class="literal">null</span>) &#123;</span><br><span class="line">            stackA.push(currentA);</span><br><span class="line">            currentA = currentA.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将链表B的节点入栈</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentB</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="keyword">while</span> (currentB != <span class="literal">null</span>) &#123;</span><br><span class="line">            stackB.push(currentB);</span><br><span class="line">            currentB = currentB.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 弹栈并比较节点，直到找到交点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">intersection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stackA.isEmpty() &amp;&amp; !stackB.isEmpty()) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nodeA</span> <span class="operator">=</span> stackA.pop();</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nodeB</span> <span class="operator">=</span> stackB.pop();</span><br><span class="line">            <span class="comment">// 如果两个节点相同，则说明找到了交点</span></span><br><span class="line">            <span class="keyword">if</span> (nodeA == nodeB) &#123;</span><br><span class="line">                intersection = nodeA;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回交点，如果没有交点，则返回null</span></span><br><span class="line">        <span class="keyword">return</span> intersection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/"> 142.环形链表II</a></p><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p><strong>首先是判断是否有环。</strong></p><p>如果链表里存在环，分别定义 fast 和 slow 指针，循环着移向下一位的指针永远也不会到达null。如果这两个指针一个快一个慢，它们迟早会撞上，而且一定是在环内相遇。</p><p><strong>其次是如何寻找这个入口。</strong></p><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。</p><p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针，<code> （y+z）</code>为 一圈内节点的个数A。</p><p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：<code>(x + y) * 2 = x + y + n (y + z)</code></p><p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p><p>因为要找环形的入口，我们希望得到x的值，因为x表示 头结点到 环形入口节点的的距离。</p><p><code>x = n (y + z) - y</code> ,</p><p>整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> </p><p><code> (n - 1) (y + z)</code>是一个完整的环，不对相遇产生影响，所以这个公式可以理解成：<code>x = z</code>。</p><p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p><p>就可以在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;<span class="comment">// 有环</span></span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="comment">// 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口</span></span><br><span class="line">                <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 SpringFrameWork</title>
      <link href="/2024/12/08/1SpringFrameWork/"/>
      <url>/2024/12/08/1SpringFrameWork/</url>
      
        <content type="html"><![CDATA[<h1 id="总体概述"><a href="#总体概述" class="headerlink" title="总体概述"></a>总体概述</h1><p><strong>广义的 Spring：Spring 技术栈</strong></p><p>广义上的 Spring 泛指以 Spring Framework 为基础的 Spring 技术栈。</p><p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，Spring Framework 是其他子项目的基础。例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，涵盖了从企业级应用开发到云计算等各方面的内容。</p><p><strong>狭义的 Spring：Spring Framework</strong></p><p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。它提供了很多功能，例如：依赖注入（Dependency Injection）、面向切面编程（AOP）、声明式事务管理（TX）等。</p><p><img src="/img/spring/image1.png"></p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>TX</td><td>声明式事务管理。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h1 id="Spring-IoC容器"><a href="#Spring-IoC容器" class="headerlink" title="Spring IoC容器"></a>Spring IoC容器</h1><h2 id="关于组件"><a href="#关于组件" class="headerlink" title="关于组件"></a>关于组件</h2><p>常规的三层架构处理请求流程，整个项目就是由各种组件搭建而成的：</p><p><img src="/img/spring/image3.png"></p><p>组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象。</p><p><strong>组件</strong>：通常是指在软件开发中具有独立功能并可复用的模块，往往封装了某些特定的行为和状态。组件通常具有一些显式的接口，可以被其他组件或系统调用。</p><p><strong>对象</strong>：是面向对象编程中的基本概念，指的是类的实例，包含状态（属性）和行为（方法）。对象不一定是一个完整的、具有独立功能的模块，通常是某个类的实例，可能只是一个简单的结构体或数据容器。</p><p>组件一定是对象，对象不一定是组件。</p><p>只要是组件，就可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等。我们只需要编写元数据（配置文件）告知Spring 管理哪些类组件和他们的关系即可。</p><p>Spring具体的组件管理动作包含：</p><ul><li>组件对象实例化</li><li>组件属性属性赋值</li><li>组件对象之间引用</li><li>组件对象存活周期管理</li><li>……</li></ul><p>综上所述，Spring 充当一个组件容器，创建、管理、存储组件。</p><ul><li>降低了组件之间的耦合性：Spring IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。</li><li>提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能交给Spring IoC容器处理，使得组件代码更加模块化、可重用、更易于维护。</li><li>方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。</li><li>交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明事务管理）等</li></ul><h2 id="关于容器"><a href="#关于容器" class="headerlink" title="关于容器"></a>关于容器</h2><p><strong>程序中的普通容器：</strong></p><ul><li>数组</li><li>集合：List</li><li>集合：Set</li></ul><p><strong>程序中的复杂容器：</strong></p><p>Servlet 容器能够管理 Servlet(init,service,destroy)、Filter、Listener 这样的组件的一生，它是一个复杂容器。</p><table><thead><tr><th>名称</th><th>时机</th><th>次数</th></tr></thead><tbody><tr><td>创建对象</td><td>默认情况：接收到第一次请求  修改启动顺序后：Web应用启动过程中</td><td>一次</td></tr><tr><td>初始化操作</td><td>创建对象之后</td><td>一次</td></tr><tr><td>处理请求</td><td>接收到请求</td><td>多次</td></tr><tr><td>销毁操作</td><td>Web应用卸载之前</td><td>一次</td></tr></tbody></table><p>我们即将要学习的 Spring IoC 容器也是一个复杂容器。它们不仅要负责创建组件的对象、存储组件的对象，销毁组件，还要负责管理组件之间依赖关系，调用组件的方法让它们工作，最终在特定情况下销毁组件。</p><h2 id="Spring-IoC-容器概念"><a href="#Spring-IoC-容器概念" class="headerlink" title="Spring IoC 容器概念"></a>Spring IoC 容器概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>IoC容器</strong></p><p><strong>Spring IoC 容器</strong></p><p>负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p><p><strong>IoC（Inversion of Control）控制反转</strong></p><p>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。</p><p>这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p><p><strong>DI (Dependency Injection) 依赖注入</strong></p><p>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。</p><p>在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p><p>容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。配置元数据以 XML、Java 注解或 Java 代码形式表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><p><img src="/img/spring/image4.png"></p><p>上图显示了 Spring 容器工作原理的高级视图。应用程序类与配置元数据相结合，拥有完全配置且可执行的系统或应用程序。</p><h3 id="具体接口和实现类"><a href="#具体接口和实现类" class="headerlink" title="具体接口和实现类"></a>具体接口和实现类</h3><p><code>BeanFactory</code> 接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口，甚至可以说，它就是SpringIoC容器本身。</p><p><code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。它扩展了以下功能：</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化？）</li><li>特定于应用程序给予此接口实现，例如Web 应用程序的 <code>WebApplicationContext</code></li></ul><p> <code>BeanFactory</code> 提供了配置框架和基本功能，而 <code>ApplicationContext</code> 添加了更多特定的功能。 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的完整超集。</p><p><strong>ApplicationContext容器实现类</strong>：</p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>Spring框架提供了多种配置方式：</p><ol><li>XML配置方式：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息。</li><li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li><li>Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。</li></ol><h1 id="Spring-IoC-应用"><a href="#Spring-IoC-应用" class="headerlink" title="Spring IoC 应用"></a>Spring IoC 应用</h1><h2 id="Spring-IoC-x2F-DI-实现步骤"><a href="#Spring-IoC-x2F-DI-实现步骤" class="headerlink" title="Spring IoC &#x2F; DI 实现步骤"></a>Spring IoC &#x2F; DI 实现步骤</h2><h3 id="配置元数据（配置）"><a href="#配置元数据（配置）" class="headerlink" title="配置元数据（配置）"></a><strong>配置元数据（配置）</strong></h3><p>配置元数据，就是编写交给SpringIoC容器管理组件的信息，配置方式有三种。</p><p>基于 XML 的配置元数据的基本结构：</p><p>&lt;bean id&#x3D;”…” [1] class&#x3D;”…” [2]&gt;  </p><!-- collaborators and configuration for this bean go here -->  </bean><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">1</span>] <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">2</span>]&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring IoC 容器管理一个或多个组件。这些 组件是使用你提供给容器的配置元数据（例如，以 XML <code>&lt;bean/&gt;</code> 定义的形式）创建的。</p><p><bean /> 标签 &#x3D;&#x3D; 组件信息声明</p><ul><li><code>id</code> 属性是标识单个 Bean 定义的字符串。</li><li><code>class</code> 属性定义 Bean 的类型并使用完全限定的类名。</li></ul><h3 id="实例化IoC容器"><a href="#实例化IoC容器" class="headerlink" title="实例化IoC容器"></a><strong>实例化IoC容器</strong></h3><p>提供给 <code>ApplicationContext</code> 构造函数的位置路径是资源字符串地址，允许容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code> 等）加载配置元数据。</p><p>我们应该选择一个合适的容器实现类，进行IoC容器的实例化工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化ioc容器,读取外部配置文件,最终会在容器内进行ioc和di动作</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取Bean（组件）"><a href="#获取Bean（组件）" class="headerlink" title="获取Bean（组件）"></a><strong>获取Bean（组件）</strong></h3><p><code>ApplicationContext</code> 是一个高级工厂的接口，能够维护不同 bean 及其依赖项的注册表。通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code> ，可以检索 bean 的实例。</p><p>允许读取 Bean 定义并访问它们，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建ioc容器对象，指定配置文件，ioc也开始实例组件对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取ioc容器的组件对象</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">//使用组件对象</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><h2 id="XML方式配置Bean"><a href="#XML方式配置Bean" class="headerlink" title="XML方式配置Bean"></a>XML方式配置Bean</h2><h3 id="组件信息声明配置"><a href="#组件信息声明配置" class="headerlink" title="组件信息声明配置"></a>组件信息声明配置</h3><p>Spring IoC 容器自动管理一个或多个 bean。这些 Bean 是使用提供给容器的配置元数据创建的（例如，以 XML <code>&lt;bean/&gt;</code> 定义的形式）。</p><p><img src="/img/spring/img006.png"></p><p>创建maven工程，导入SpringIoC相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于无参数构造函数"><a href="#基于无参数构造函数" class="headerlink" title="基于无参数构造函数"></a>基于无参数构造函数</h4><p>当通过构造函数方法创建一个 bean（组件对象） 时，所有普通类都可以由 Spring 使用并与之兼容。也就是说，正在开发的类不需要实现任何特定的接口或以特定的方式进行编码。只需指定 Bean 类信息就足够了。但是，默认情况下，我们需要一个默认（空）构造函数。</p><ol><li>准备组件类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认包含无参数构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello SpringFrameWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建携带spring约束的xml配置文件</p></li><li><p>编写配置文件：</p><p> 文件：resources&#x2F;spring-bean-01.xml</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建bean --&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;happyComponent&quot;</span> class=<span class="string">&quot;com.atguigu.ioc.HappyComponent&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件信息</li><li>id属性：bean的唯一标识,方便后期获取Bean</li><li>class属性：组件类的全限定符</li><li>要求当前组件类必须包含无参数构造函数，一般都默认包含了。</li></ul><h4 id="基于静态工厂方法实例化"><a href="#基于静态工厂方法实例化" class="headerlink" title="基于静态工厂方法实例化"></a>基于静态工厂方法实例化</h4><p>除了使用构造函数实例化对象，还有一类是通过工厂模式实例化对象。</p><ol><li>准备组件类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ClientService</span> <span class="variable">clientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientService</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">ClientService</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title function_">createInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>xml配置文件编写</p><p> 文件：resources&#x2F;spring-bean-01.xml</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;examples.ClientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>class属性：指定工厂类的全限定符！</li><li>factory-method: 指定静态工厂方法，</li><li>该方法必须是static方法。</li></ul><h4 id="基于实例工厂方法实例化"><a href="#基于实例工厂方法实例化" class="headerlink" title="基于实例工厂方法实例化"></a>基于实例工厂方法实例化</h4><ol><li>准备组建类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultServiceLocator</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">static</span> <span class="variable">ClientServiceImplclientService</span> </span><br><span class="line">      <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ClientService <span class="title function_">createClientServiceInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>xml配置文件编写</p><p> 文件：resources&#x2F;spring-bean-01.xml</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将工厂类进行ioc配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serviceLocator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.DefaultServiceLocator&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据工厂对象的实例工厂方法进行实例化组件对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-bean</span>=<span class="string">&quot;serviceLocator&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;createClientServiceInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>factory-bean属性：指定当前容器中工厂Bean 的名称</li><li>factory-method:  指定实例工厂方法名</li><li>实例方法必须是非static的</li></ul><p><img src="/img/spring/image5.png"></p><h3 id="组件依赖注入配置"><a href="#组件依赖注入配置" class="headerlink" title="组件依赖注入配置"></a>组件依赖注入配置</h3><p>通过配置文件,实现IoC容器中Bean之间的引用（依赖注入DI配置）。主要基于构造函数的依赖注入和基于 Setter 的依赖注入。</p><p><img src="/img/spring/image6.png"></p><h4 id="基于构造函数"><a href="#基于构造函数" class="headerlink" title="基于构造函数"></a>基于构造函数</h4><p>基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p><ol><li>准备组件类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(<span class="type">int</span> age , String name ,UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的角标注入数据 </span></span><br><span class="line"><span class="comment">           index从0开始 构造函数(0,1,2....)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>constructor-arg标签：指定构造参数和对应的值</li><li>constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值</li></ul><h4 id="基于Setter方法"><a href="#基于Setter方法" class="headerlink" title="基于Setter方法"></a><strong>基于Setter方法</strong></h4><p>开发中，更多使用的Setter方法进行注入。</p><ol><li>准备组件类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class MovieFinder&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String movieName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieName</span><span class="params">(String movieName)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.movieName = movieName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​  2.编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMovieLister&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.SimpleMovieLister&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入movieFinder对象的标识id</span></span><br><span class="line"><span class="comment">       name = 属性名  ref = 引用bean的id值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;movieFinder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- setter方法，注入基本数据类型movieName</span></span><br><span class="line"><span class="comment">       name = 属性名 value= 基本类型值</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;消失的她&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.MovieFinder&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>property标签： 可以给setter方法对应的属性赋值</li><li>property 标签： name属性代表<strong>set方法标识</strong>、ref代表引用bean的标识id、value属性代表基本属性值</li></ul><h3 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h3><p>我们可以在组件类中定义生命周期方法，当IoC容器实例化和销毁组件对象时调用。</p><p>类似于Servlet的init&#x2F;destroy方法,我们可以在周期方法完成初始化和释放资源等工作。</p><p>周期方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTwo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 释放资源逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>周期方法配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.BeanOne&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.BeanTwo&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;cleanup&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>bean标签声明Bean，只是将Bean的信息配置给SpringIoC容器，</p><p>在IoC容器中，这些bean标签对应的信息转成Spring内部 BeanDefinition 对象，BeanDefinition 对象内包含了定义的信息（id,class,属性等等）。BeanDefinition和类概念一样，SpringIoC容器可以可以根据BeanDefinition对象反射创建多个Bean对象实例。</p><p>具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定。</p><p>作用域可选值，一般默认singleton</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p>如果在WebApplicationContext环境下，还会有另外两个作用域（不常用）：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table><p>作用域配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyComponent&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p><code>FactoryBean</code> 接口是Spring IoC容器实例化逻辑的可插拔性点。</p><p>用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code> 的getObject方法。</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：</p><ul><li><p><code>T getObject()</code>: </p><p>  返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</p></li><li><p><code>boolean isSingleton()</code>: </p><p>  如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> 。</p></li><li><p><code>Class&lt;?&gt; getObjectType()</code>: 返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。</p></li></ul><p><img src="/img/spring/imagee.png"></p><p>FactoryBean使用场景：</p><ol><li>代理类的创建</li><li>第三方框架整合</li><li>复杂对象实例化等</li></ol><p>Factorybean应用：</p><ol><li>准备FactoryBean实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现FactoryBean接口时需要指定泛型</span></span><br><span class="line"><span class="comment">// 泛型类型就是当前工厂要生产的对象的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;HappyMachine&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 方法内部模拟创建、设置一个对象的复杂过程</span></span><br><span class="line">        <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    </span><br><span class="line">        happyMachine.setMachineName(<span class="built_in">this</span>.machineName);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 返回要生产的对象的类型</span></span><br><span class="line">        <span class="keyword">return</span> HappyMachine.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2. 配置FactoryBean实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FactoryBean机制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine7&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.ioc.HappyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签仍然可以用来通过setXxx()方法给属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iceCreamMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​3. 测试读取FactoryBean和FactoryBean.getObject对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment07</span><span class="params">()</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-07.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意: 直接根据声明FactoryBean的id,获取的是getObject方法返回的对象</span></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyMachine7&quot;</span>,HappyMachine.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;happyMachine = &quot;</span> + happyMachine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想要获取FactoryBean对象, 直接在id前添加&amp;符号即可!  &amp;happyMachine7 这是一种固定的约束</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;&amp;happyMachine7&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bean = &quot;</span> + bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FactoryBean和BeanFactory区别：</p><p>**FactoryBean **是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean。是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。</p><p>一般情况下，整合第三方框架，都是通过定义FactoryBean实现。</p><p><strong>BeanFactory</strong> 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。</p><p>总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。</p><h2 id="注解方式配置Bean"><a href="#注解方式配置Bean" class="headerlink" title="注解方式配置Bean"></a>注解方式配置Bean</h2><h3 id="注解标记与扫描"><a href="#注解标记与扫描" class="headerlink" title="注解标记与扫描"></a>注解标记与扫描</h3><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p>本质上，所有一切的操作都是 Java 代码来完成的，XML 和注解只是告诉框架中的 Java 代码如何执行。</p><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><p>查看源码，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><p>对于Spring，使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>使用注解标记示例：</p><p>普通组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dao组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件确定扫描范围示例：</p><p>情况1：基本扫描配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.atguigu.controller,com.atguigu.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.components&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况2：指定排除组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.components&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况3：指定扫描组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ioc.components&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识——id 属性的值，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。</p><p>默认情况下，类名首字母小写就是 bean 的 id。例如：SoldierController 类对应的 bean 的 id 就是 soldierController。</p><p>使用value属性指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tian&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型自动装配"><a href="#引用类型自动装配" class="headerlink" title="引用类型自动装配"></a>引用类型自动装配</h3><p>参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。</p><p>在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。</p><p>举例：给Controller装配Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tian&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Autowired注解细节</strong></p><p><img src="/img/spring/img018.png"></p><p>首先根据所需要的组件类型到 IOC 容器中查找。</p><p>如果能够找到唯一的 bean就直接执行装配。</p><p>如果完全找不到匹配这个类型的 bean报错装配失败。</p><p>如果和所需类型匹配的 bean 不止一个，分情况讨论。</p><p>使用 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的id进行匹配。</p><p>没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配。</p><h3 id="JSR-250注解"><a href="#JSR-250注解" class="headerlink" title="JSR-250注解"></a>JSR-250注解</h3><p>JSR（Java Specification Requests）是Java平台标准化进程中的一种技术规范，而JSR注解是其中一部分重要的内容。JSR是Java提供的技术规范，也只是规定了注解和注解的含义，并不是直接提供特定的实现，而是提供标准，由第三方框架（Spring）和库来实现和提供对应的功能。</p><p>JSR-250主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注解，包括：</p><ul><li><code>@Resource</code>: 标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。</li><li><code>@PostConstruct</code>: 标识一个方法作为初始化方法。</li><li><code>@PreDestroy</code>: 标识一个方法作为销毁方法。</li><li><code>@Resource.AuthenticationType</code>: 标识注入的资源的身份验证类型。</li><li><code>@Resource.AuthenticationType</code>: 标识注入的资源的默认名称。</li></ul><p>JSR-250 @Resource注解</p><p>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据Bean名称装配，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型装配。</strong></li><li><strong>@Autowired注解默认根据类型装配，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，高于JDK11或低于JDK8需要引入以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Resource使用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 如果没有指定name,先根据属性名查找IoC中组件xxxService</span></span><br><span class="line"><span class="comment">     * 2. 如果没有指定name,并且属性名没有对应的组件,会根据属性类型查找</span></span><br><span class="line"><span class="comment">     * 3. 可以指定name名称查找!  <span class="doctag">@Resource</span>(name=&#x27;test&#x27;) == <span class="doctag">@Autowired</span> + <span class="doctag">@Qualifier</span>(value=&#x27;test&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> XxxService xxxService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;指定beanName&quot;)</span></span><br><span class="line">    <span class="comment">//private XxxService xxxService;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XxxController.show&quot;</span>);</span><br><span class="line">        xxxService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本类型赋值"><a href="#基本类型赋值" class="headerlink" title="基本类型赋值"></a>基本类型赋值</h3><p><code>@Value</code> 通常用于注入外部化属性</p><p><strong>声明外部配置</strong></p><p>application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catalog.name=MovieCatalog</span><br></pre></td></tr></table></figure><p><strong>xml引入外部配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入外部配置文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;application.properties&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>@Value注解读取配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.components;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 情况1: $&#123;key&#125; 取外部配置key对应的值!</span></span><br><span class="line"><span class="comment">     * 情况2: $&#123;key:defaultValue&#125; 没有key,可以给与默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;catalog:hahaha&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置类方式配置Bean"><a href="#配置类方式配置Bean" class="headerlink" title="配置类方式配置Bean"></a>配置类方式配置Bean</h2><p>Spring 完全注解配置（Fully Annotation-based Configuration）是指通过 Java配置类 代码来配置 Spring 应用程序，使用注解来替代原本在 XML 配置文件中的配置。相对于 XML 配置，完全注解配置具有更强的类型安全性和更好的可读性。</p><p>![](&#x2F;img&#x2F;spring&#x2F;image (7).png)</p><h3 id="配置类和扫描注解"><a href="#配置类和扫描注解" class="headerlink" title="配置类和扫描注解"></a>配置类和扫描注解</h3><p>@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件。</p><p>@ComponentScan(basePackages &#x3D; {“a”,”b”}) 替代&lt;context:component-scan标签实现注解扫描。</p><p>@PropertySource(“classpath:配置文件地址”) 替代 &lt;context:property-placeholder标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//使用注解读取外部配置，替代 &lt;context:property-placeholder标签</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="comment">//使用@ComponentScan注解,可以配置扫描包,替代&lt;context:component-scan标签</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建IoC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext 根据配置类创建 IOC 容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfiguration.class);</span><br></pre></td></tr></table></figure><p>此外，可以使用 no-arg 构造函数实例化 AnnotationConfigApplicationContext ，然后使用 register() 方法对其进行配置。此方法在以编程方式生成 AnnotationConfigApplicationContext 时特别有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext-IOC容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"><span class="comment">//外部设置配置类</span></span><br><span class="line">iocContainerAnnotation.register(MyConfiguration.class);</span><br><span class="line"><span class="comment">//刷新后方可生效</span></span><br><span class="line">iocContainerAnnotation.refresh();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Bean定义组件"><a href="#Bean定义组件" class="headerlink" title="Bean定义组件"></a>Bean定义组件</h3><p>第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解，因为源码jar包内容为只读模式。</p><p>@Bean 注释用于指示方法实例化、配置和初始化要由 Spring IoC 容器管理的新对象。@Bean 注释与 <bean/> 元素起着相同的作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//引入jdbc.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;,&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第三方类进行IoC管理,无法直接使用@Component相关注解</span></span><br><span class="line">    <span class="comment">//解决方案: 配置类方式,可以使用方法返回值+@Bean注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>String password,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>String driverClassName)</span>&#123;</span><br><span class="line">        <span class="comment">//使用Java代码实例化</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        <span class="comment">//返回结果即可</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种配置方式总结"><a href="#三种配置方式总结" class="headerlink" title="三种配置方式总结"></a>三种配置方式总结</h2><p>XML方式配置总结</p><ol><li>所有内容写到xml格式配置文件中</li><li>声明bean通过&lt;bean标签</li><li>&lt;bean标签包含基本信息（id,class）和属性信息 &lt;property name value &#x2F; ref</li><li>引入外部的properties文件可以通过&lt;context:property-placeholder</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><p>XML+注解方式配置总结</p><ol><li>注解负责标记IoC的类和进行属性装配</li><li>xml文件依然需要，需要通过&lt;context:component-scan标签指定注解范围</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><p>完全注解方式配置总结</p><ol><li>完全注解方式指的是去掉xml文件，使用配置类 + 注解实现</li><li>xml文件替换成使用@Configuration注解标记的类</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>&lt;context:component-scan标签指定注解范围使用@ComponentScan(basePackages &#x3D; {“com.atguigu.components”})替代</li><li>&lt;context:property-placeholder引入外部配置文件使用@PropertySource({“classpath:application.properties”,”classpath:jdbc.properties”})替代</li><li>&lt;bean 标签使用@Bean注解和方法实现</li><li>IoC具体容器实现选择AnnotationConfigApplicationContext对象</li></ol><h1 id="Spring-AOP-面向切面编程"><a href="#Spring-AOP-面向切面编程" class="headerlink" title="Spring AOP 面向切面编程"></a>Spring AOP 面向切面编程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>AOP（面向切面编程）是一种编程范式，它通过将通用的横切关注点（如日志、事务、权限控制等）与业务逻辑分离，使得代码更加清晰、简洁、易于维护。AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。</p><p>不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系。例如日志功能，日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此。</p><p>这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP技术利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>使用AOP，可以在不修改原来代码的基础上添加新功能。</p><p>AOP可以应用于各种场景，以下是一些常见的AOP应用场景：</p><ol><li>日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。</li><li>事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。</li><li>安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。</li><li>性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。</li><li>异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。</li><li>缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。</li><li>动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。</li></ol><p><strong>AOP术语名词介绍</strong></p><p>1-横切关注点</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><p><img src="/img/spring/aopimg007.png"></p><p>AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事务、异常等。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><p>2-通知(增强)</p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法，也称之为增强。</p><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法成功结束后执行</li><li>异常通知：在被代理的目标方法异常结束后执行</li><li>后置通知：在被代理的目标方法最终结束后执行</li><li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p><img src="/img/spring/aopimg008.png"></p><p>3-连接点 joinpoint</p><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>指那些被拦截到的点。在 Spring 中，可以被动态代理拦截目标类的方法</p><p><img src="/img/spring/apoimg010.png"></p><p>4-切入点 pointcut</p><p>定位连接点的方式，或者可以理解成被选中的连接点。</p><p>是一个表达式，比如execution(* com.spring.service.impl.<em>.</em>(..))。符合条件的每个方法都是一个具体的连接点。</p><p>5-切面 aspect</p><p>切入点和通知的结合。是一个类。</p><p><img src="/img/spring/aopimg009.png"></p><p>6-目标 target</p><p>被代理的目标对象。</p><p>7-代理 proxy</p><p>向目标对象应用通知之后创建的代理对象。</p><p>8-织入 weave</p><p>指把通知应用到目标上，生成代理对象的过程。可以在编译期织入，也可以在运行期织入，Spring采用后者。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>  <img src="/img/spring/aopimg006-1716953659294.png"></p><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口。</p><p>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。</p><p>AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。</p><p>如果目标类有接口,选择使用jdk动态代理，如果目标类没有接口,选择cglib动态代理。</p><p>对实现了接口的类应用切面:</p><p><img src="/img/spring/imag23e.png"></p><p>对没实现接口的类应用切面:</p><p><img src="/img/spring/ima22ge.png"></p><p>实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.proxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现计算接口,加减乘除基本实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// @Before注解：声明当前方法是前置通知方法</span></span><br><span class="line">    <span class="comment">// value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP前置通知] 方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP返回通知] 方法成功返回了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterException</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP异常通知] 方法抛异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.atguigu.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogFinallyEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP后置通知] 方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启aspectj注解支持,配置类方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;MyConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculator</span><span class="params">()</span>&#123;</span><br><span class="line">        calculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-17\bin\java.exe&quot;</span> -ea -Didea.test.cyclic.buffer.size=<span class="number">104857.</span>....</span><br><span class="line">[AOP前置通知] 方法开始了</span><br><span class="line">[AOP返回通知] 方法成功返回了</span><br><span class="line">[AOP后置通知] 方法最终结束了</span><br></pre></td></tr></table></figure><h2 id="重用切点表达式"><a href="#重用切点表达式" class="headerlink" title="重用切点表达式"></a>重用切点表达式</h2><p>上面案例，是我们之前编写切点表达式的方式，发现， 所有增强方法的切点表达式相同，出现了冗余，如果需要切换也不方便统一维护。我们可以将切点提取，在增强上进行引用。</p><p>同一类内部引用</p><ul><li>提取：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切入点表达式重用</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.atguigu.aop.api.Calculator.add(int,int)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">public void declarPointCut() &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>提取切点注解使用@Pointcut(切点表达式) ， 需要添加到一个无参数无返回值方法上即可。</p><ul><li>引用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCoreOperation</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure><ul><li>不同类中引用：</li></ul><p>不同类在引用切点，只需要添加类的全限定符+方法名即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;com.atguigu.spring.aop.aspect.LogAspect.declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">roundAdvice</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure><ul><li>切点统一管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtguiguPointCut</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.sub(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguGlobalPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguSecondPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transactionPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议将切点表达式统一存储到一个类中进行集中管理和维护。</p><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>环绕通知对应整个 try…catch…finally 结构，包括前面四种通知的所有功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用@Around注解标明环绕通知方法</span></span><br><span class="line"><span class="meta">@Around(value = &quot;com.atguigu.aop.aspect.AtguiguPointCut.transactionPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">manageTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 通过在通知方法形参位置声明ProceedingJoinPoint类型的形参，</span></span><br><span class="line"><span class="params">        // Spring会将这个类型的对象传给我们</span></span><br><span class="line"><span class="params">        ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取外界调用目标方法时传入的实参数组</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取目标方法的签名对象</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过签名对象获取目标方法的方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明变量用来存储目标方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">targetMethodReturnValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法执行前：开启事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 开启事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，参数列表：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 过ProceedingJoinPoint对象调用目标方法</span></span><br><span class="line">        <span class="comment">// 目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        targetMethodReturnValue = joinPoint.proceed(args);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法成功返回后：提交事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 提交事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，方法返回值：&quot;</span> + targetMethodReturnValue);</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法抛异常后：回滚事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 回滚事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，异常：&quot;</span> + e.getClass().getName());</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法最终结束后：释放数据库连接</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 释放数据库连接，方法名：&quot;</span> + methodName);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> targetMethodReturnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h2><p>  相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>  使用 @Order 注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p>  <img src="/img/spring/aopimg012.png"></p><p> 实际意义</p><p> 实际开发时，如果有多个切面嵌套的情况，要慎重考虑。例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。</p><p>  <img src="/img/spring/aopimg013.png"></p><p>  此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/img/spring/aopimg015.png"></p><h1 id="Spring-声明式事务"><a href="#Spring-声明式事务" class="headerlink" title="Spring 声明式事务"></a>Spring 声明式事务</h1><p>声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。</p><p>开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作。</p><p>使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。</p><h2 id="Spring事务管理器"><a href="#Spring事务管理器" class="headerlink" title="Spring事务管理器"></a>Spring事务管理器</h2><ol><li><p>Spring声明式事务对应依赖</p><ul><li>spring-tx: 包含声明式事务实现的基本规范（事务管理器规范接口和事务增强等等）</li><li>spring-jdbc: 包含DataSource方式事务管理器实现类DataSourceTransactionManager</li><li>spring-orm: 包含其他持久层框架的事务管理器实现类例如：Hibernate&#x2F;Jpa等</li></ul></li><li><p>Spring声明式事务对应事务管理器接口</p><p> <img src="/img/spring/iimage.png"></p><p> 我们现在要使用的事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现。</p><p> DataSourceTransactionManager类中的主要方法：</p><ul><li>doBegin()：开启事务</li><li>doSuspend()：挂起事务</li><li>doResume()：恢复挂起的事务</li><li>doCommit()：提交事务</li><li>doRollback()：回滚事务</li></ul></li></ol><h2 id="基本事务控制"><a href="#基本事务控制" class="headerlink" title="基本事务控制"></a>基本事务控制</h2><p>数据库相关的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponenScan(&quot;com.atguigu&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化dataSource加入到ioc容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;atguigu.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.driver&#125;&quot;)</span>String driver,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.username&#125;&quot;)</span>String username,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;atguigu.password&#125;&quot;)</span>String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化JdbcTemplate对象,需要使用ioc中的DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装配事务管理实现对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>使用声明事务注解@Transactional</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>测试事务效果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(classes = DataSourceConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><h3 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h3><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><p>设置方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readOnly = true把当前事务设置为只读 默认是false</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure><p>如果一个类中每一个方法上都使用了 @Transactional 注解，那么就可以将 @Transactional 注解提取到类上。反过来说：@Transactional 注解在类级别标记，会影响到类中的每一个方法。同时，类级别标记的 @Transactional 注解中设置的事务属性也会延续影响到方法执行时的事务属性。除非在方法上又设置了 @Transactional 注解。</p><p>对一个方法来说，离它最近的 @Transactional 注解中的事务属性设置生效。</p><p>在类级别@Transactional注解中设置只读，这样类中所有的查询方法都不需要设置@Transactional注解了。因为对查询操作来说，其他属性通常不需要设置，所以使用公共设置即可。</p><p>然后在这个基础上，对增删改方法设置@Transactional注解 readOnly 属性为 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了便于核对数据库操作结果，不要修改同一条记录</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTwice</span><span class="params">(……)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// readOnly = true把当前事务设置为只读</span></span><br><span class="line">    <span class="comment">// @Transactional(readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题。此时这个程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。概括来说就是超时回滚，释放资源。</p><p>设置超时时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//休眠4秒,等待方法超时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a>事务异常</h3><ol><li><p>默认情况</p><p> 默认只针对运行时异常回滚，编译时异常不回滚。情景模拟代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>设置回滚异常</p><p> rollbackFor属性：指定哪些异常类才会回滚,默认是 RuntimeException and Error 异常方可回滚!</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>设置不回滚的异常</p><p> 在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。</p><p> noRollbackFor属性：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class,noRollbackFor = FileNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：</p><ol><li>读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。</li><li>读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li>可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li>串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。</li></ol><p>不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。</p><ol><li>事务隔离级别设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * isolation = 设置事务的隔离级别,mysql默认是repeatable read!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,</span></span><br><span class="line"><span class="meta">                   timeout = 3,</span></span><br><span class="line"><span class="meta">                   rollbackFor = Exception.class,</span></span><br><span class="line"><span class="meta">                   noRollbackFor = FileNotFoundException.class,</span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>核心点</td><td>掌握目标</td></tr><tr><td>spring框架理解</td><td>spring家族和spring framework框架</td></tr><tr><td>spring核心功能</td><td>ioc&#x2F;di , aop , tx</td></tr><tr><td>spring ioc &#x2F; di</td><td>组件管理、ioc容器、ioc&#x2F;di , 三种配置方式</td></tr><tr><td>spring aop</td><td>aop和aop框架和代理技术、基于注解的aop配置</td></tr><tr><td>spring tx</td><td>声明式和编程式事务、动态事务管理器、事务注解、属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-数组</title>
      <link href="/2024/12/01/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01-%E6%95%B0%E7%BB%84/"/>
      <url>/2024/12/01/a%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><p>数组是<strong>存放在连续内存空间上的相同类型数据的集合</strong>。</p><p>数组可以方便的通过下标索引的方式获取到下标对应的数据。</p><p>需要注意的是:</p><ul><li><strong>数组下标都是从0开始的。</strong></li><li><strong>数组内存空间的地址是连续的</strong></li></ul><p>正是因为数组在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</p><p>例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作。</p><p><strong>数组的元素是不能删的，只能覆盖。</strong></p><p>二维数组诸如 a<code>[0][1]</code>这样的，先行后列。</p><p>我们主要采用以下方法处理数组相关问题：</p><ul><li>二分法</li><li>滑动窗口</li><li>双指针</li><li>模拟过程</li><li>前缀和数组</li></ul><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p><strong>例题：</strong>[<a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a>]</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9     </span><br><span class="line">输出: 4       </span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4     </span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class="line">输出: -1        </span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1        </span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>写二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。最关键的地方就是<strong>定义好每一个边界</strong>。</p><p>二分法经常写乱，主要是因为<strong>区间的定义</strong>没有想清楚，区间的定义就是<strong>不变量</strong>。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p><p>有这些边界需要处理：</p><ul><li>while 循环里，是(left&lt; right)   还是 (left&lt;&#x3D; right) </li><li>nums[mid] &gt; target时，right 是否是 mid-1 ？</li><li>nums[mid] &lt; target时，left 是否是 mid+1 ？</li></ul><p>定义一个在左闭右开的区间为例子，也就是[left, right)。</p><p>首先对于while循环，我们必须保证当前while的条件是合法的。因为left &#x3D;&#x3D; right在区间[left, right)是没有意义的，这里使用 &lt;。</p><p>其次，if (nums[mid] &gt; target) right 应该更新为 mid。因为当前已经确认nums[mid]不等于target，要去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为mid。如果这里更新为mid-1，查询中会丢失nums[mid-1]。</p><p>其次，if (nums[mid]&lt;target) left 应该更新为 mid+1。因为当前已经确认nums[mid]不等于target，要去右区间继续寻找，而寻找区间是左闭右开区间，如果这里更新为mid，查询中会多比较一次nums[mid]。</p><p>即：保证下一个查询区间不会去比较nums[mid]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左闭右闭同理，只是两次更新需要分别进行mid-1，mid+1的处理，这样才能保证不重复搜索边界上的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><ul><li><p><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.cn/problems/search-insert-position/description/">35.搜索插入位置)</a></p></li><li><p><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34.在排序数组中查找元素的第一个和最后一个位置</a></p></li><li><p><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.cn/problems/sqrtx/">69.x 的平方根</a></p></li><li><p><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.cn/problems/valid-perfect-square/">367.有效的完全平方数</a></p></li></ul><h1 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1><p><a href="https://leetcode.cn/problems/remove-element/"> 27. 移除元素</a></p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums &#x3D; [3,2,2,3], val &#x3D; 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p><strong>你不需要考虑数组中超出新长度后面的元素。</strong></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>两层for循环，一个for循环遍历数组元素 ，第二个for循环更新数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 用于追踪有效元素的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[k] = nums[i];  </span><br><span class="line">                k++; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置，可以作为新数组长度的索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>; fast &lt; nums.length ; fast++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val)&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h2><ul><li><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26.删除排序数组中的重复项</a></p></li><li><p><a href="https://leetcode.cn/problems/move-zeroes/">283.移动零</a></p></li><li><p><a href="https://leetcode.cn/problems/backspace-string-compare/">844.比较含退格的字符串</a></p></li><li><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977.有序数组的平方</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">977.Math.abs()</span><br><span class="line"></span><br><span class="line">844.栈的思想,Array操作:</span><br><span class="line">private StringBuilder buildFinalString(String str) &#123;</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    for (char c : str.toCharArray()) &#123;</span><br><span class="line">        if (c == &#x27;#&#x27;) &#123;</span><br><span class="line">            if (sb.length() &gt; 0) &#123;</span><br><span class="line">                sb.deleteCharAt(sb.length() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sb.append(c); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977.有序数组的平方</a></p><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><ul><li>输入：nums &#x3D; [-4,-1,0,3,10]</li><li>输出：[0,1,9,16,100]</li><li>解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</li></ul><p>示例 2：</p><ul><li>输入：nums &#x3D; [-7,-3,2,3,11]</li><li>输出：[4,9,9,49,121]</li></ul><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><h3 id="暴力-1"><a href="#暴力-1" class="headerlink" title="暴力"></a>暴力</h3><p>每个数平方之后，排个序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = nums[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><p>数组平方的最大值就在数组的两端，不是最左边就是最右边，反正绝对不可能是中间。</p><p>双指针一左一右，比较大小，把较大的填到答案数组里，然后移动指针。</p><p>最终循环次数达到nums.length-1，说明遍历结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] sortedSquares(int[] nums) &#123;</span><br><span class="line">        int left = 0, right = nums.length - 1;</span><br><span class="line">        int[] result = new int[nums.length];</span><br><span class="line">        </span><br><span class="line">        for (int index = nums.length - 1; index &gt;= 0; index--) &#123;</span><br><span class="line">            if (Math.abs(nums[left]) &gt; Math.abs(nums[right])) &#123;</span><br><span class="line">                result[index] = nums[left] * nums[left++];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result[index] = nums[right] * nums[right--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209.长度最小的子数组</a></p><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><ul><li>输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</li><li>输出：2</li><li>解释：子数组 [4,3] 是该条件下的长度最小的子数组。</li></ul><p>提示：</p><ul><li>1 &lt;&#x3D; target &lt;&#x3D; 10^9</li><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10^5</li><li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10^5</li></ul><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length+<span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) &#123;</span><br><span class="line">            sum += nums[right];  <span class="comment">// 向右扩展窗口，更新 sum</span></span><br><span class="line">            right++;  <span class="comment">// 移动右指针</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当 sum &gt;= target 时，尝试缩小窗口</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                len = Math.min(len, right - left);  <span class="comment">// 记录最小子数组长度</span></span><br><span class="line">                sum -= nums[left];  <span class="comment">// 缩小窗口，减去左边界的值</span></span><br><span class="line">                left++;  <span class="comment">// 移动左指针</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len == nums.length+<span class="number">1</span> ? <span class="number">0</span> : len; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关题目-2"><a href="#相关题目-2" class="headerlink" title="相关题目"></a>相关题目</h2><ul><li><a href="https://leetcode.cn/problems/fruit-into-baskets/">904.水果成篮(opens new window)</a></li><li><a href="https://leetcode.cn/problems/minimum-window-substring/">76.最小覆盖子串(opens new window)</a></li></ul><h1 id="螺旋矩阵II"><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">[59. 螺旋矩阵 II]</a></p><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p>示例:</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><p>输入: 3 </p><p>输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>这是一个典型的模拟过程题。</p><p>要写出正确的二分法一定要坚持<strong>循环不变量原则</strong>。而求解本题依然是要坚持循环不变量原则。</p><p>模拟顺时针画矩阵的过程:</p><ul><li>填充上行从左到右</li><li>填充右列从上到下</li><li>填充下行从右到左</li><li>填充左列从下到上</li></ul><p>保持一个不变，另一个变，就这样由外向内一圈一圈画下去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[][] generateMatrix(int n) &#123;</span><br><span class="line">        int[][] nums = new int[n][n];</span><br><span class="line">        </span><br><span class="line">        int left = 0, right = n - 1, top = 0, bottom = n - 1;</span><br><span class="line">        int current = 1;</span><br><span class="line">        </span><br><span class="line">        // 四个边界 (left, right, top, bottom) 限制填充范围</span><br><span class="line">        while (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line"></span><br><span class="line">            for (int i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                nums[top][i] = current++;</span><br><span class="line">            &#125;top++; </span><br><span class="line">            </span><br><span class="line">            for (int i = top; i &lt;= bottom; i++) &#123;</span><br><span class="line">                nums[i][right] = current++;</span><br><span class="line">            &#125;right--; </span><br><span class="line">            </span><br><span class="line">            if (top &lt;= bottom) &#123;</span><br><span class="line">                for (int i = right; i &gt;= left; i--) &#123;</span><br><span class="line">                    nums[bottom][i] = current++;</span><br><span class="line">                &#125;bottom--; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (left &lt;= right) &#123;</span><br><span class="line">                for (int i = bottom; i &gt;= top; i--) &#123;</span><br><span class="line">                    nums[i][left] = current++;</span><br><span class="line">                &#125;left++; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类似题目"><a href="#类似题目" class="headerlink" title="类似题目"></a>类似题目</h2><ul><li><a href="https://leetcode.cn/problems/spiral-matrix/">54.螺旋矩阵(opens new window)</a></li><li><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指Offer 29.顺时针打印矩阵(opens new window)</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 54</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> result;  <span class="comment">// 如果矩阵为空，直接返回空列表</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;  <span class="comment">// 获取矩阵的列数</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = m - <span class="number">1</span>, top = <span class="number">0</span>, bottom = n - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 四个边界 (left, right, top, bottom) 限制填充范围</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">                result.add(matrix[top][i]);</span><br><span class="line">            &#125;top++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &lt;= bottom; i++) &#123;</span><br><span class="line">                result.add(matrix[i][right]);</span><br><span class="line">            &#125;right--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (top &lt;= bottom) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right; i &gt;= left; i--) &#123;</span><br><span class="line">                    result.add(matrix[bottom][i]);</span><br><span class="line">                &#125;bottom--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom; i &gt;= top; i--) &#123;</span><br><span class="line">                    result.add(matrix[i][left]);</span><br><span class="line">                &#125;left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// LCR 146</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] spiralArray(<span class="type">int</span>[][] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];  <span class="comment">// 处理空矩阵的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> array[<span class="number">0</span>].length; <span class="comment">// 处理非方阵情况</span></span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n * m];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = m - <span class="number">1</span>, top = <span class="number">0</span>, bottom = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 四个边界 (left, right, top, bottom) 限制填充范围</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从左到右填充顶部</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">                nums[current++] = array[top][i];</span><br><span class="line">            &#125;</span><br><span class="line">            top++; <span class="comment">// 顶部边界向下移动</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从上到下填充右侧</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &lt;= bottom; i++) &#123;</span><br><span class="line">                nums[current++] = array[i][right];</span><br><span class="line">            &#125;</span><br><span class="line">            right--; <span class="comment">// 右边界向左移动</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (top &lt;= bottom) &#123;</span><br><span class="line">                <span class="comment">// 从右到左填充底部</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right; i &gt;= left; i--) &#123;</span><br><span class="line">                    nums[current++] = array[bottom][i];</span><br><span class="line">                &#125;</span><br><span class="line">                bottom--; <span class="comment">// 底部边界向上移动</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="comment">// 从下到上填充左侧</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom; i &gt;= top; i--) &#123;</span><br><span class="line">                    nums[current++] = array[i][left];</span><br><span class="line">                &#125;</span><br><span class="line">                left++; <span class="comment">// 左边界向右移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h1><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">题目链接(opens new window)</a></p><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><p>输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p><p>示例 2：</p><p>输入：height &#x3D; [4,2,0,3,2,5]<br>输出：9</p><p>提示：</p><ul><li>n &#x3D;&#x3D; height.length</li><li>1 &lt;&#x3D; n &lt;&#x3D; 2 * 104</li><li>0 &lt;&#x3D; height[i] &lt;&#x3D; 105</li></ul><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>首先对局部分析，一个格子里能接雨水的高度都取决于较短的邻边。如果雨水的高度超过了邻边的高度，它就会流出。</p><p>所以，在这个局部，最多能接的雨水量是：</p><p><strong>最矮的邻边高度和这一格高度的差值。</strong></p><p>推广到整体，任一处水的高度都绝对不会超过<strong>两侧最高的边里较低的那一个</strong>，否则它就会流出。</p><p>因此得出结论，一格里最多能接的雨水量是：<strong>两侧最高的边里更矮的那一个的高度和这一格高度的差值。</strong></p><p>这里不用担心邻边不够高而导致水流出去，因为在整体满足这一条件的情况下，邻边的空位也一定会被水填满。</p><p>我们的思路是：使用两个数组，分别是前缀数组和后缀数组，储存各自某一位之前的最大值。</p><p>然后对height数组遍历，用前缀和后缀数组的最小值表示当前格左右两侧最高值中较小的那一个的值。接下来减去高度值，就是上文提及的差值。</p><p>最后将差值累加，遍历结束后输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 返回较大的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回较小的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSize</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">if</span> (heightSize == <span class="number">0</span>) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// premax 数组保存左边每个位置的最大值</span></span><br><span class="line">        <span class="type">int</span>[] premax = <span class="keyword">new</span> <span class="title class_">int</span>[heightSize];</span><br><span class="line">        <span class="comment">// submax 数组保存右边每个位置的最大值</span></span><br><span class="line">        <span class="type">int</span>[] submax = <span class="keyword">new</span> <span class="title class_">int</span>[heightSize];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 premax 和 submax</span></span><br><span class="line">        premax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        submax[heightSize - <span class="number">1</span>] = height[heightSize - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充 premax 数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; heightSize; i++) &#123;</span><br><span class="line">            premax[i] = max(premax[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充 submax 数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> heightSize - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            submax[i] = max(submax[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个位置上能接的水</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heightSize; i++) &#123;</span><br><span class="line">            ans += min(submax[i], premax[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类似题目-1"><a href="#类似题目-1" class="headerlink" title="类似题目"></a>类似题目</h2><p><a href="">11.盛最多水的容器</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 Maven</title>
      <link href="/2024/11/29/1Maven%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2024/11/29/1Maven%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven-简介与快速入门"><a href="#Maven-简介与快速入门" class="headerlink" title="Maven 简介与快速入门"></a>Maven 简介与快速入门</h1><h2 id="简要理解"><a href="#简要理解" class="headerlink" title="简要理解"></a>简要理解</h2><p>Maven 是为 Java 项目构建管理、依赖管理的工具，可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。</p><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><ul><li><strong>依赖管理</strong>：Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。通过 Maven，我们可以方便地维护项目所依赖的外部库，而我们仅仅需要编写配置即可。</li><li><strong>构建管理：</strong>项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程。Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。</li></ul><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><ol><li><p>安装</p><p> <strong>软件结构：</strong></p><p> <img src="/%5Cimg%5Cmaven%5Cimage.png" alt="img"></p></li><li><p>环境变量</p><p> <strong>环境变量：</strong>配置maven_home 和 path</p><p> <img src="/%5Cimg%5Cmaven%5Cimag2e.png" alt="img"></p><p> <img src="/%5Cimg%5Cmaven%5Cima3e.png" alt="img"></p></li><li><p>命令测试</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn -v </span><br><span class="line"><span class="comment"># 输出版本信息，如果此处错误，检查java_home变量</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置文件</p><blockquote><p>我们需要需改<strong>maven&#x2F;conf&#x2F;settings.xml</strong>配置文件，来修改maven的一些默认配置。</p><p>主要修改三个配置：</p><p>1.依赖本地缓存位置（本地仓库位置）</p><p>2.maven下载镜像</p><p>3.maven选用编译项目的jdk版本</p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment"> | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- conf/settings.xml 55行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-17<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>17<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>idea配置本地maven</p><blockquote><p>将配置好的maven软件配置到idea开发工具中</p></blockquote><ol><li><p>打开idea配置文件，构建工具配置</p><p> 依次点击</p><p> file &#x2F; settings &#x2F; build &#x2F; build tool &#x2F; maven</p></li><li><p>选中本地maven软件<img src="/%5Cimg%5Cmaven%5Cimage4.png" alt="img"></p></li><li><p>测试是否配置成功</p><p> <img src="/%5Cimg%5Cmaven%5Cimage5.png" alt="img"></p></li></ol></li></ol><h2 id="GAVP属性"><a href="#GAVP属性" class="headerlink" title="GAVP属性"></a>GAVP属性</h2><p>Maven 中的 GAVP 是指 GroupId、ArtifactId、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。这四个属性主要为每个项目在maven仓库总做一个标识，方便maven软件对项目进行管理和互相引用。</p><p><strong>GAV遵循以下规则：</strong></p><ul><li><p><strong>GroupID 格式</strong>：</p><p>com.{公司&#x2F;BU }.业务线.[子业务线]，最多 4 级。</p></li><li><p><strong>ArtifactID 格式</strong>：</p></li></ul><p>  产品线名-模块名。语义不重复不遗漏。</p><ul><li><p><strong>Version版本号格式</strong>：</p><p>主版本号.次版本号.修订号 1.0.0</p><p>主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。</p><p>次版本号：当做了向下兼容的功能性新增（新增类、接口等）。</p><p>修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。</p></li><li><p><strong>Packaging定义规则：</strong></p><p>指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型</p><p>packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。</p><p>packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。</p><p>packaging 属性为 pom，代表不会打包，用来做继承的父工程。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;project&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br></pre></td></tr></table></figure><h2 id="结构说明"><a href="#结构说明" class="headerlink" title="结构说明"></a>结构说明</h2><ul><li>pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。</li><li>src&#x2F;main&#x2F;java：存放项目的 Java 源代码。</li><li>src&#x2F;main&#x2F;resources：存放项目的资源文件，如配置文件、静态资源等。</li><li>src&#x2F;main&#x2F;webapp&#x2F;WEB-INF：存放 Web 应用的配置文件。</li><li>src&#x2F;main&#x2F;webapp&#x2F;index.html：Web 应用的入口页面。</li><li>src&#x2F;test&#x2F;java：存放项目的测试代码。</li><li>src&#x2F;test&#x2F;resources：存放测试相关的资源文件，如测试配置文件等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|-- pom.xml                               # Maven 项目管理文件 </span><br><span class="line">|-- src</span><br><span class="line">    |-- main                              # 项目主要代码</span><br><span class="line">    |   |-- java                          # Java 源代码目录</span><br><span class="line">    |   |   `-- com/example/myapp         # 开发者代码主目录</span><br><span class="line">    |   |       |-- controller            # 存放 Controller 层代码的目录</span><br><span class="line">    |   |       |-- service               # 存放 Service 层代码的目录</span><br><span class="line">    |   |       |-- dao                   # 存放 DAO 层代码的目录</span><br><span class="line">    |   |       `-- model                 # 存放数据模型的目录</span><br><span class="line">    |   |-- resources                     # 资源目录，存放配置文件、静态资源等</span><br><span class="line">    |   |   |-- log4j.properties          # 日志配置文件</span><br><span class="line">    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件</span><br><span class="line">    |   |   `-- static                    # 存放静态资源的目录</span><br><span class="line">    |   |       |-- css                   # 存放 CSS 文件的目录</span><br><span class="line">    |   |       |-- js                    # 存放 JavaScript 文件的目录</span><br><span class="line">    |   |       `-- images                # 存放图片资源的目录</span><br><span class="line">    |   `-- webapp                        # 存放 WEB 相关配置和资源</span><br><span class="line">    |       |-- WEB-INF                   # 存放 WEB 应用配置文件</span><br><span class="line">    |       |   |-- web.xml               # Web 应用的部署描述文件</span><br><span class="line">    |       |   `-- classes               # 存放编译后的 class 文件</span><br><span class="line">    |       `-- index.html                # Web 应用入口页面</span><br><span class="line">    `-- test                              # 项目测试代码</span><br><span class="line">        |-- java                          # 单元测试目录</span><br><span class="line">        `-- resources                     # 测试资源目录</span><br></pre></td></tr></table></figure><h1 id="Maven-核心功能"><a href="#Maven-核心功能" class="headerlink" title="Maven 核心功能"></a>Maven 核心功能</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>其实就是定义pom.xml文件而已。</p><p>Maven 就能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><p>maven项目信息属性配置和读取：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成</span></span><br><span class="line"><span class="comment">如com.Qing.test</span></span><br><span class="line"><span class="comment">maven会将该项目打成的jar包放本地路径：/com/Qing/test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span> com.Qing.test <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>projectX<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--打包方式</span></span><br><span class="line"><span class="comment">    默认：jar</span></span><br><span class="line"><span class="comment">    jar指的是普通的java项目打包方式！ 项目打成jar包。</span></span><br><span class="line"><span class="comment">    war指的是web项目打包方式！项目打成war包。</span></span><br><span class="line"><span class="comment">    pom指这个项目作为父工程，被其他工程聚合或者继承，不打包。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar/pom/war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖管理和添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖。</span></span><br><span class="line"><span class="comment">   scope属性是可选的，可以指定依赖生效范围，用得少。</span></span><br><span class="line"><span class="comment">            生效范围</span></span><br><span class="line"><span class="comment">            - compile ：main目录 test目录  打包打包 [默认]</span></span><br><span class="line"><span class="comment">            - provided：main目录 test目录  Servlet</span></span><br><span class="line"><span class="comment">            - runtime： 打包运行           MySQL</span></span><br><span class="line"><span class="comment">            - test:    test目录           junit</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   依赖信息查询方式：</span></span><br><span class="line"><span class="comment">      1. maven仓库信息官网 https://mvnrepository.com/ 用得极少</span></span><br><span class="line"><span class="comment">      2. mavensearch插件搜索 主要方式</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖版本提取和维护:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用properties声明版本，弱耦合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>依赖传递指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。</p><p>这种依赖传递结构可以形成一个依赖树。当我们引入一个库或框架时，Maven会自动解析和加载其所有的直接和间接依赖，确保这些依赖都可用。</p><p>依赖传递的作用是：</p><ol><li><strong>减少重复依赖：</strong>当多个项目依赖同一个库时，Maven 可以自动下载并且只下载一次该库。这样可以减少项目的构建时间和磁盘空间。</li><li><strong>自动管理依赖:</strong> Maven 可以自动管理依赖项，使用依赖传递，简化了依赖项的管理，使项目构建更加可靠和一致。</li><li><strong>确保依赖版本正确性：</strong>通过依赖传递的依赖，之间都不会存在版本兼容性问题，确实依赖的版本正确性.</li></ol><p>依赖传递演示：</p><p> 项目中，需要导入jackson相关的依赖，通过之前导入经验，jackson需要导入三个依赖，分别为：</p><p><img src="/%5Cimg%5Cmaven%5Cimag6e.png" alt="img"></p><p> 通过查看网站介绍的依赖传递特性：data-bind中，依赖其他两个依赖</p><p><img src="/%5Cimg%5Cmaven%5C234234.png" alt="img"></p><p>  直接导入data-bind，就可以自动依赖传递需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A依赖B，B依赖C，导入A就可以自动实现其余的间接依赖。</p><p>简单来说，就是导入最底层的依赖即可。</p><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！</p><p><img src="/%5Cimg%5Cmaven%5Ciage.png" alt="img"></p><p>解决依赖冲突（如何选择重复依赖）方式：</p><ul><li><p>短路优先原则（第一原则）</p><p>  A—&gt;B—&gt;C—&gt;D—&gt;E—&gt;X(version 0.0.1)</p><p>  A—&gt;F—&gt;X(version 0.0.2)</p><p>  则A依赖于X(version 0.0.2)。</p></li><li><p>依赖路径长度相同情况下，则“先声明优先”（第二原则）</p><p>  A—&gt;E—&gt;X(version 0.0.1)</p><p>  A—&gt;F—&gt;X(version 0.0.2)</p><p>  在<depencies></depencies>中，先声明的，路径相同，会优先选择！</p></li></ul><h2 id="构建管理"><a href="#构建管理" class="headerlink" title="构建管理"></a>构建管理</h2><p>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</p><p><img src="/%5Cimg%5Cmaven%5Cgjg.png" alt="img"></p><p><strong>主动触发的情况：</strong></p><ul><li>重新编译 : 编译不充分, 部分文件没有被编译!</li><li>打包 : 独立部署到外部服务器软件,打包部署</li><li>部署本地或者私服仓库 : maven工程加入到本地或者私服仓库,供其他工程使用</li></ul><p><strong>命令方式构建:</strong></p><p>语法: mvn 构建命令  构建命令….</p><table><thead><tr><th>命令</th><th align="center">描述</th></tr></thead><tbody><tr><td>mvn clean</td><td align="center">清理编译或打包后的项目结构,删除target文件夹</td></tr><tr><td>mvn compile</td><td align="center">编译项目，生成target文件</td></tr><tr><td>mvn test</td><td align="center">执行测试源码 (测试)</td></tr><tr><td>mvn site</td><td align="center">生成一个项目依赖信息的展示页面</td></tr><tr><td>mvn package</td><td align="center">打包项目，生成war &#x2F; jar 文件</td></tr><tr><td>mvn install</td><td align="center">打包后上传到maven本地仓库(本地部署)</td></tr><tr><td>mvn deploy</td><td align="center">只打包，上传到maven私服仓库(私服部署)</td></tr></tbody></table><p><strong>构建命令周期:</strong></p><p>构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！也是一种简化构建的思路!</p><ul><li><p>清理周期：主要是对项目编译生成文件进行清理</p><p>  包含命令：clean</p></li><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><p>  包含命令：compile - test - package - install &#x2F; deploy</p></li><li><p>报告周期</p><p>  包含命令：site</p><p>  打包: mvn clean package 本地仓库: mvn clean install</p></li></ul><p><strong>一般使用方案:</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打包: mvn clean package</span><br><span class="line">重新编译: mvn clean compile</span><br><span class="line">本地部署: mvn clean install </span><br></pre></td></tr></table></figure><h1 id="继承和聚合特性"><a href="#继承和聚合特性" class="headerlink" title="继承和聚合特性"></a>继承和聚合特性</h1><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p>继承是指在Maven项目里，一个项目从另一个项目里直接继承配置信息的机制。有助于简化配置信息，方便管理和维护。</p><img src="\img\maven\12image.png" alt="img" /><p>一般应用场景：</p><ul><li>对一个大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>需求：</p><ul><li>多个模块要使用同一个框架，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一管理。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合保证了整个项目使用规范、准确的 jar 包，节约时间和精力。</p><p>继承语法：</p><ul><li>父工程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Qing.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作为父工程，打包方式必须是 pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>- 子工程</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父工程的坐标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Qing.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>依赖统一管理：</p><ul><li>父工程声明版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被管理的依赖并没有引入到工程，这里是声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>- 子工程引用版本</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程引用父工程中的依赖信息时，写版本号就以自己的为准  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 否则由父工程的dependencyManagement来决定。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h2><p>聚合是指在将多个项目组织到一个父级项目里，触发父工程的构建，统一触发子工程的构建。</p><p>聚合作用：</p><ul><li><p>统一管理子项目构建，将多个子项目组织在一起，方便管理和维护。</p></li><li><p>优化构建顺序，对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.Qing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 前端工程化</title>
      <link href="/2024/11/12/1%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2024/11/12/1%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="ECMA6Script"><a href="#ECMA6Script" class="headerlink" title="ECMA6Script"></a>ECMA6Script</h2><h3 id="es6的介绍"><a href="#es6的介绍" class="headerlink" title="es6的介绍"></a>es6的介绍</h3><blockquote><p>ECMAScript 6，简称ES6，是<strong>JavaScript</strong>语言的一次重大更新。它于<strong>2015</strong>年发布，是原来的ECMAScript标准的第六个版本。ES6带来了大量的新特性，包括箭头函数、模板字符串、let和const关键字、解构、默认参数值、模块系统等等，大大提升了JavaScript的开发体验。<code>由于VUE3中大量使用了ES6的语法,所以ES6成为了学习VUE3的门槛之一</code><br>ES6对JavaScript的改进在以下几个方面：</p></blockquote><ol><li>更加简洁：ES6引入了一些新的语法，如箭头函数、类和模板字符串等，使代码更加简洁易懂。</li><li>更强大的功能：ES6引入了一些新的API、解构语法和迭代器等功能，从而使得JavaScript更加强大。</li><li>更好的适用性：ES6引入的模块化功能为JavaScript代码的组织和管理提供了更好的方式，不仅提高了程序的可维护性，还让JavaScript更方便地应用于大型的应用程序。</li></ol><blockquote><p>总的来说，ES6在提高JavaScript的核心语言特性和功能方面取得了很大的进展。由于ES6已经成为了JavaScript的标准，它的大多数新特性都已被现在浏览器所支持，因此现在可以放心地使用ES6来开发前端应用程序。</p></blockquote><p><strong>历史版本：</strong></p><table><thead><tr><th>标准版本</th><th>发布时间</th><th>新特性</th></tr></thead><tbody><tr><td>ES1</td><td>1997年</td><td>第一版 ECMAScript</td></tr><tr><td>ES2</td><td>1998年</td><td>引入setter和getter函数，增加了try&#x2F;catch，switch语句允许字符串</td></tr><tr><td>ES3</td><td>1999年</td><td>引入了正则表达式和更好的字符串处理</td></tr><tr><td>ES4</td><td>取消</td><td>取消，部分特性被ES3.1和ES5继承</td></tr><tr><td>ES5</td><td>2009年</td><td>Object.defineProperty，JSON，严格模式，数组新增方法等</td></tr><tr><td>ES5.1</td><td>2011年</td><td>对ES5做了一些勘误和例行修订</td></tr><tr><td><code>ES6</code></td><td><code>2015年</code></td><td><code>箭头函数、模板字符串、解构、let和const关键字、类、模块系统等</code></td></tr><tr><td>ES2016</td><td>2016年</td><td>数组.includes，指数操作符（**），Array.prototype.fill等</td></tr><tr><td>ES2017</td><td>2017年</td><td>异步函数async&#x2F;await，Object.values&#x2F;Object.entries，字符串填充</td></tr><tr><td>ES2018</td><td>2018年</td><td>正则表达式命名捕获组，几个有用的对象方法，异步迭代器等</td></tr><tr><td>ES2019</td><td>2019年</td><td>Array.prototype.{flat,flatMap}，Object.fromEntries等</td></tr><tr><td>ES2020</td><td>2020年</td><td>BigInt、动态导入、可选链操作符、空位合并操作符</td></tr><tr><td>ES2021</td><td>2021年</td><td>String.prototype.replaceAll，逻辑赋值运算符，Promise.any等</td></tr><tr><td>… …</td><td></td><td></td></tr></tbody></table><h3 id="es6的变量和模板字符串"><a href="#es6的变量和模板字符串" class="headerlink" title="es6的变量和模板字符串"></a>es6的变量和模板字符串</h3><blockquote><p>ES6 新增了<code>let</code>和<code>const</code>，用来声明变量,使用的细节上也存在诸多差异</p></blockquote><ul><li><p>let 和var的差别</p><p>  1、let 不能重复声明</p><p>  2、let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问。</p><p>  3、let不会预解析进行变量提升</p><p>  4、let 定义的全局变量不会作为window的属性</p><p>  5、let在es6中推荐优先使用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. let只有在当前代码块有效代码块. 代码块、函数、全局</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> a = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> b = <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;   </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// a is not defined   花括号外面无法访问</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 可以正常输出</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 不能重复声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name = <span class="string">&#x27;天真&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name = <span class="string">&#x27;无邪&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. 不存在变量提升（先声明，在使用）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test) <span class="comment">//可以     但是值为undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> test = <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(test1) <span class="comment">//不可以  let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> test1 = <span class="string">&#x27;test1&#x27;</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4、不会成为window的属性   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">//100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="number">200</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>) <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//5. 循环中推荐使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>const和var的差异</p><p>  1、新增const和let类似，只是const定义的变量不能修改</p><p>  2、并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明场景语法,建议变量名大写区分</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.常量声明必须有初始化值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//const A ; //报错</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.常量值不可以改动</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//const A  = &#x27;atguigu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//A  = &#x27;xx&#x27; //不可改动</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3.和let一样，块儿作用域</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> A = <span class="string">&#x27;atguigu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//console.log(A);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4.对应数组和对象元素修改，不算常量修改，修改值，不修改地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;郭富城&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;黎明&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>=[] <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串（template string）是增强版的字符串，用反引号（&#96;）标识  </p></blockquote><p>1、字符串中可以出现换行符</p><p>2、可以使用 ${xxx} 形式输出变量和拼接变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 多行普通字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;ul&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;JAVA&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;html&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;VUE&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr)    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 多行模板字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr2 = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;JAVA&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;html&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;VUE&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr2)        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3  普通字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name =<span class="string">&#x27;张小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr =name+<span class="string">&#x27;被评为本年级优秀学员&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4  模板字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr2 =<span class="string">`<span class="subst">$&#123;name&#125;</span>被评为本年级优秀学员`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr2)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="es6的解构表达式"><a href="#es6的解构表达式" class="headerlink" title="es6的解构表达式"></a>es6的解构表达式</h3><blockquote><p>ES6的解构赋值是一种方便的语法，可以快速将数组或对象中的值拆分并赋值给变量。解构赋值的语法使用花括号 <code>&#123;&#125;</code> 表示对象，方括号 <code>[]</code> 表示数组。通过解构赋值，函数更方便进行参数接受等！</p></blockquote><blockquote><p><strong>数组解构赋值</strong></p></blockquote><ul><li>可以通过数组解构将数组中的值赋值给变量，语法为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//新增变量名任意合法即可，本质是按照顺序进行初始化变量的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>该语句将数组 [1, 2, 3] 中的第一个值赋值给 a 变量，第二个值赋值给 b 变量，第三个值赋值给 c 变量。<br>  可以使用默认值为变量提供备选值，在数组中缺失对应位置的值时使用该默认值。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d = <span class="number">4</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>对象解构赋值</strong></p></blockquote><ul><li>可以通过对象解构将对象中的值赋值给变量，语法为：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//新增变量名必须和属性名相同，本质是初始化变量的值为对象中同名属性的值</span></span><br><span class="line"><span class="comment">//等价于 let a = 对象.a  let b = 对象.b</span></span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>该语句将对象 {a: 1, b: 2} 中的 a 属性值赋值给 a 变量，b 属性值赋值给 b 变量。<br>  可以为标识符分配不同的变量名称，使用 : 操作符指定新的变量名。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: x, <span class="attr">b</span>: y&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>函数参数解构赋值</strong></p></blockquote><ul><li>解构赋值也可以用于函数参数。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li><p>该函数接受一个数组作为参数，将其中的第一个值赋给 x，第二个值赋给 y，然后返回它们的和。</p></li><li><p>ES6 解构赋值让变量的初始化更加简单和便捷。通过解构赋值，我们可以访问到对象中的属性，并将其赋值给对应的变量，从而提高代码的可读性和可维护性。</p></li></ul><h3 id="es6的箭头函数"><a href="#es6的箭头函数" class="headerlink" title="es6的箭头函数"></a>es6的箭头函数</h3><blockquote><p>ES6 允许使用“箭头” 义函数。语法类似Java中的Lambda表达式</p></blockquote><h4 id="声明和特点"><a href="#声明和特点" class="headerlink" title="声明和特点"></a>声明和特点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ES6 允许使用“箭头”（=&gt;）定义函数。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 函数声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fn1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn2</span> = (<span class="params"></span>)=&gt;&#123;&#125; <span class="comment">//箭头函数,此处不需要书写function关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn3</span> = x =&gt;&#123;&#125; <span class="comment">//单参数可以省略(),多参数无参数不可以!</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fn4</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//只有一行方法体可以省略&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun5</span> = x =&gt; x + <span class="number">1</span> <span class="comment">//当函数体只有一句返回值时，可以省略花括号和 return 语句</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 使用特点 箭头函数this关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在 JavaScript 中，this 关键字通常用来引用函数所在的对象，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 或者在函数本身作为构造函数时，来引用新对象的实例。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 但是在箭头函数中，this的含义与常规函数定义中的含义不同，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并且是由箭头函数定义时的上下文来决定的，而不是由函数调用时的上下文来决定的。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 箭头函数没有自己的this，this指向的是外层上下文环境的this</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">showName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//  这里的this是person</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">viewName</span>: <span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//  这里的this是window</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">showName</span>()</span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">viewName</span>()</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//this应用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这里的 this 是上一层作用域中的 this，即 Counter实例化对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实践和应用场景"><a href="#实践和应用场景" class="headerlink" title="实践和应用场景"></a>实践和应用场景</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#xdd</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;xdd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> xdd = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xdd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 方案1 </span></span></span><br><span class="line"><span class="language-javascript">       xdd.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> _this= <span class="variable language_">this</span>;  <span class="comment">//this 是xdd</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开启定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//变粉色</span></span></span><br><span class="line"><span class="language-javascript">                _this.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方案2</span></span></span><br><span class="line"><span class="language-javascript">        xdd.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//开启定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">// 使用setTimeout() 方法所在环境时的this对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//变粉色</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="rest和spread"><a href="#rest和spread" class="headerlink" title="rest和spread"></a>rest和spread</h4><blockquote><p>rest参数,在形参上使用 和JAVA中的可变参数几乎一样</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 参数列表中多个普通参数  普通函数和箭头函数中都支持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun1 = <span class="keyword">function</span> (<span class="params">a,b,c,d=<span class="number">10</span></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params">a,b,c,d=<span class="number">10</span></span>) =&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun2</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 ...作为参数列表,称之为rest参数 普通函数和箭头函数中都支持 ,因为箭头函数中无法使用arguments,rest是一种解决方案</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun3 = <span class="keyword">function</span> (<span class="params">...args</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(args)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun4</span> = (<span class="params">...args</span>) =&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(args)&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun3</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun4</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// rest参数在一个参数列表中的最后一个只,这也就无形之中要求一个参数列表中只能有一个rest参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let fun5 =  (...args,...args2) =&gt;&#123;&#125; // 这里报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>spread参数,在实参上使用rest</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let arrSpread = ...arr;// 这样不可以,...arr必须在调用方法时作为实参使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> =(<span class="params">a,b,c</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用方法时,对arr进行转换 转换为1,2,3 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(...arr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景1 合并数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr3=[...arr,...arr2]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景2 合并对象属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2=&#123;<span class="attr">age</span>:<span class="number">10</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3=&#123;<span class="attr">gender</span>:<span class="string">&quot;boy&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;...p1,...p2,...p3&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="es6的对象创建和拷贝"><a href="#es6的对象创建和拷贝" class="headerlink" title="es6的对象创建和拷贝"></a>es6的对象创建和拷贝</h3><h4 id="对象创建的语法糖"><a href="#对象创建的语法糖" class="headerlink" title="对象创建的语法糖"></a>对象创建的语法糖</h4><blockquote><p>ES6中新增了对象创建的语法糖,支持了class extends constructor等关键字,让ES6的语法和面向对象的语法更加接近</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">      <span class="comment">// 属性</span></span><br><span class="line">      #n;</span><br><span class="line">      age;</span><br><span class="line">      <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">n</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">n</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">n</span> =n;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 实例方法</span></span><br><span class="line">      <span class="title function_">eat</span>(<span class="params">food</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">n</span>+<span class="string">&quot;用筷子吃&quot;</span>+food)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 静态方法</span></span><br><span class="line">      <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> a+b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 构造器</span></span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">n</span>=name;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> person =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 访问对象属性</span></span><br><span class="line">  <span class="comment">// 调用对象方法</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">n</span>)</span><br><span class="line">  person.<span class="property">name</span>=<span class="string">&quot;小明&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line">  person.<span class="title function_">eat</span>(<span class="string">&quot;火锅&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">      grade ;</span><br><span class="line">      score ;</span><br><span class="line">      <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name,age </span>) &#123;</span><br><span class="line">          <span class="variable language_">super</span>(name,age);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> stu =<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;学生小李&quot;</span>,<span class="number">18</span>);</span><br><span class="line">  stu.<span class="title function_">eat</span>(<span class="string">&quot;面条&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="对象的深拷贝和浅拷贝"><a href="#对象的深拷贝和浅拷贝" class="headerlink" title="对象的深拷贝和浅拷贝"></a>对象的深拷贝和浅拷贝</h4><blockquote><p>对象的拷贝,快速获得一个和已有对象相同的对象的方式</p></blockquote><ul><li>浅拷贝</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr  =[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">language</span>:arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 浅拷贝,person2和person指向相同的内存</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person2 = person;</span></span><br><span class="line"><span class="language-javascript">    person2.<span class="property">name</span>=<span class="string">&quot;小黑&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>深拷贝</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr  =[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">language</span>:arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 深拷贝,通过JSON和字符串的转换形成一个新的对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">    person2.<span class="property">name</span>=<span class="string">&quot;小黑&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="es6的模块化处理"><a href="#es6的模块化处理" class="headerlink" title="es6的模块化处理"></a>es6的模块化处理</h3><h4 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h4><blockquote><p>模块化是一种组织和管理前端代码的方式，将代码拆分成小的模块单元，使得代码更易于维护、扩展和复用。它包括了定义、导出、导入以及管理模块的方法和规范。前端模块化的主要优势如下：</p></blockquote><ol><li>提高代码可维护性：通过将代码拆分为小的模块单元，使得代码结构更为清晰，可读性更高，便于开发者阅读和维护。</li><li>提高代码可复用性：通过将重复使用的代码变成可复用的模块，减少代码重复率，降低开发成本。</li><li>提高代码可扩展性：通过模块化来实现代码的松耦合，便于更改和替换模块，从而方便地扩展功能。</li></ol><blockquote><p>目前，前端模块化有多种规范和实现，包括 CommonJS、AMD 和 ES6 模块化。ES6 模块化是 JavaScript 语言的模块标准，使用 import 和 export 关键字来实现模块的导入和导出。现在，大部分浏览器都已经原生支持 ES6 模块化，因此它成为了最为广泛使用的前端模块化标准. &#96;</p></blockquote><ul><li>ES6模块化的几种暴露和导入方式<ol><li>分别导出</li><li>统一导出</li><li>默认导出</li></ol></li><li><code>ES6中无论以何种方式导出,导出的都是一个对象,导出的内容都可以理解为是向这个对象中添加属性或者方法</code></li></ul><h4 id="分别导出"><a href="#分别导出" class="headerlink" title="分别导出"></a>分别导出</h4><p><img src="/img/images/1684461046181.png" alt="1684461046181"></p><ul><li>module.js 向外分别暴露成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.分别暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,添加export关键字即可!</span></span><br><span class="line"><span class="comment">// 导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出一个类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js 导入module.js中的成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI</span>)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person =<span class="keyword">new</span> m1.<span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><ul><li>index.html作为程序启动的入口  导入 app.js</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入JS文件 添加type=&#x27;module&#x27; 属性,否则不支持ES6的模块化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><h4 id="统一导出"><a href="#统一导出" class="headerlink" title="统一导出"></a>统一导出</h4><p><img src="/img/images/1684461701620.png" alt="1684461701620"></p><ul><li>module.js向外统一导出成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.统一暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,export统一暴露想暴露的内容!</span></span><br><span class="line"><span class="comment">// 定义一个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统一对外导出(暴露)</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"><span class="variable constant_">PI</span>,</span><br><span class="line">    sum,</span><br><span class="line">    <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js导入module.js中的成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入要使用的来自于module.js中的成员</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入的名称要和module.js中导出的一致,也可以在此处起别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中如果定义了别名,那么在当前模块中就只能使用别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入成员的顺序可以不是暴露的顺序</span></span><br><span class="line"><span class="comment">    一个模块中可以同时有多个import</span></span><br><span class="line"><span class="comment">    多个import可以导入多个不同的模块,也可以是同一个模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//import &#123;PI ,Person ,sum &#125;  from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">//import &#123;PI as pi,Person as People,sum as add&#125;  from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> ,<span class="title class_">Person</span> ,sum,<span class="variable constant_">PI</span> <span class="keyword">as</span> pi,<span class="title class_">Person</span> <span class="keyword">as</span> <span class="title class_">People</span>,sum <span class="keyword">as</span> add&#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result1 =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person1 =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person1.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="keyword">let</span> person2 =<span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">person2.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h4 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h4><p><img src="/img/images/1684463528680.png" alt="1684463528680"></p><ul><li>modules混合向外导出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3默认和混合暴露</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    默认暴露语法  export default sum</span></span><br><span class="line"><span class="comment">    默认暴露相当于是在暴露的对象中增加了一个名字为default的属性</span></span><br><span class="line"><span class="comment">    三种暴露方式可以在一个module中混合使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br><span class="line"><span class="comment">// 统一导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">   <span class="title class_">Person</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>app.js的default和其他导入写法混用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 用的少</span></span><br><span class="line"><span class="keyword">import</span> add2 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 等效于 import &#123;default as add2&#125; from &#x27;./module.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">default</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="keyword">let</span> result3 =<span class="title function_">add2</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入其他方式暴露的内容</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span>,<span class="title class_">Person</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的Person类</span></span><br><span class="line"><span class="keyword">let</span> person =<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">person.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br></pre></td></tr></table></figure><h2 id="前端工程化环境搭建"><a href="#前端工程化环境搭建" class="headerlink" title="前端工程化环境搭建"></a>前端工程化环境搭建</h2><h3 id="nodejs的简介和安装"><a href="#nodejs的简介和安装" class="headerlink" title="nodejs的简介和安装"></a>nodejs的简介和安装</h3><h4 id="什么是Nodejs"><a href="#什么是Nodejs" class="headerlink" title="什么是Nodejs"></a>什么是Nodejs</h4><img src="/img/images//1684487715655.png" alt="1684487715655" style="zoom: 33%;" /><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，可以使 JavaScript 运行在服务器端。使用 Node.js，可以方便地开发服务器端应用程序，如 Web 应用、API、后端服务，还可以通过 Node.js 构建命令行工具等。相比于传统的服务器端语言（如 PHP、Java、Python 等），Node.js 具有以下特点：</p></blockquote><ul><li>单线程，但是采用了事件驱动、异步 I&#x2F;O 模型，可以处理高并发请求。</li><li>轻量级，使用 C++ 编写的 V8 引擎让 Node.js的运行速度很快。</li><li>模块化，Node.js 内置了大量模块，同时也可以通过第三方模块扩展功能。</li><li>跨平台，可以在 Windows、Linux、Mac 等多种平台下运行。</li></ul><blockquote><p>Node.js的核心是其管理事件和异步 I&#x2F;O的能力。Node.js的异步 I&#x2F;O 使其能够处理大量并发请求，并且能够避免在等待 I&#x2F;O 资源时造成的阻塞。此外，Node.js 还拥有高性能网络库和文件系统库，可用于搭建 WebSocket 服务器、上传文件等。<code>在 Node.js 中，我们可以使用 JavaScript 来编写服务器端程序，这也使得前端开发人员可以利用自己已经熟悉的技能来开发服务器端程序，同时也让 JavaScript 成为一种全栈语言。</code>Node.js 受到了广泛的应用，包括了大型企业级应用、云计算、物联网、游戏开发等领域。常用的 Node.js 框架包括 Express、Koa、Egg.js 等，它们能够显著提高开发效率和代码质量。</p></blockquote><h4 id="如何安装nodejs"><a href="#如何安装nodejs" class="headerlink" title="如何安装nodejs"></a>如何安装nodejs</h4><ol><li>打开官网<a href="https://nodejs.org/en%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84">https://nodejs.org/en下载对应操作系统的</a> LTS 版本。</li><li>双击安装包进行安装，安装过程中遵循默认选项即可(或者参照<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a> )。安装完成后，可以在命令行终端输入 <code>node -v</code> 和 <code>npm -v</code> 查看 Node.js 和 npm的版本号。</li></ol><p><img src="/img/images/1687765256680.png" alt="1687765256680"></p><ol start="3"><li>定义一个app.js文件,cmd到该文件所在目录,然后在dos上通过<code>node app.js</code>命令即可运行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h3 id="npm-配置和使用"><a href="#npm-配置和使用" class="headerlink" title="npm 配置和使用"></a>npm 配置和使用</h3><h4 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h4><img src="/img/images//1684487779164.png" alt="1684487779164" style="zoom:50%;" /><blockquote><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于后端的Maven 。</p></blockquote><h4 id="npm-安装和配置"><a href="#npm-安装和配置" class="headerlink" title="npm 安装和配置"></a>npm 安装和配置</h4><blockquote><p>1.安装</p></blockquote><ul><li>安装node，自动安装npm包管理工具！</li></ul><blockquote><p>2.配置依赖下载使用阿里镜像</p></blockquote><ul><li>npm 安装依赖包时默认使用的是官方源，由于国内网络环境的原因，有时会出现下载速度过慢的情况。为了解决这个问题，可以配置使用阿里镜像来加速 npm的下载速度，具体操作如下：</li><li>打开命令行终端，执行以下命令，配置使用阿里镜像：</li><li>原来的 registry.npm.taobao.org 已替换为 registry.npmmirror.com</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul><li>确认配置已生效，可以使用以下命令查看当前 registry的配置：如果输出结果为 <code>https://registry.npmmirror.com</code>，说明配置已成功生效。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ul><li>如果需要恢复默认的官方源，可以执行以下命令：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><blockquote><p>3.配置全局依赖下载后存储位置</p></blockquote><ul><li><p>在 Windows 系统上，npm的全局依赖默认安装在 <code>&lt;用户目录&gt;\AppData\Roaming\npm</code> 目录下。</p></li><li><p>如果需要修改全局依赖的安装路径，可以按照以下步骤操作：</p><ol><li><p>创建一个新的全局依赖存储目录，例如 <code>D:\GlobalNodeModules</code>。</p></li><li><p>打开命令行终端，执行以下命令来配置新的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\GlobalNodeModules&quot;</span><br></pre></td></tr></table></figure></li><li><p>确认配置已生效，可以使用以下命令查看当前的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>4.升级npm版本</p></blockquote><ul><li><p>cmd 输入npm -v 查看版本</p></li><li><p>如果node中自带的npm版本过低！则需要升级至9.6.6！</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@9.6.6</span><br></pre></td></tr></table></figure><h4 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h4><blockquote><p>1.项目初始化</p></blockquote><ul><li>npm init<ul><li>进入一个vscode创建好的项目中, 执行 npm init 命令后，npm 会引导您在命令行界面上回答一些问题,例如项目名称、版本号、作者、许可证等信息，并最终生成一个package.json 文件。package.json信息会包含项目基本信息！类似maven的pom.xml</li></ul></li><li>npm init -y<ul><li>执行，-y yes的意思，所有信息使用当前文件夹的默认值！不用挨个填写！</li></ul></li></ul><blockquote><p>2.安装依赖  (查看所有依赖地址  <a href="https://www.npmjs.com/">https://www.npmjs.com</a> )</p></blockquote><ul><li>npm install 包名 或者 npm install 包名@版本号<ul><li>安装包或者指定版本的依赖包(安装到当前项目中)</li></ul></li><li>npm install -g 包名<ul><li>安装全局依赖包(安装到d:&#x2F;GlobalNodeModules)则可以在任何项目中使用它，而无需在每个项目中独立安装该包。</li></ul></li><li>npm install<ul><li>安装package.json中的所有记录的依赖</li></ul></li></ul><blockquote><p>3.升级依赖</p></blockquote><ul><li>npm update 包名<ul><li>将依赖升级到最新版本</li></ul></li></ul><blockquote><p>4.卸载依赖</p></blockquote><ul><li>npm uninstall 包名</li></ul><blockquote><p>5.查看依赖</p></blockquote><ul><li><p>npm ls</p><ul><li>查看项目依赖</li></ul></li><li><p>npm list -g</p><ul><li>查看全局依赖</li></ul></li></ul><blockquote><p>6.运行命令</p></blockquote><ul><li><p>npm run 命令是在执行 npm 脚本时使用的命令。npm 脚本是一组在 package.json 文件中定义的可执行命令。npm 脚本可用于启动应用程序，运行测试，生成文档等，还可以自定义命令以及配置需要运行的脚本。</p></li><li><p>在 package.json 文件中，scripts 字段是一个对象，其中包含一组键值对，键是要运行的脚本的名称，值是要执行的命令。例如，以下是一个简单的 package.json 文件：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^27.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.39.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>scripts 对象包含 start、test 和 build 三个脚本。当您运行 npm run start 时，将运行 node index.js，并启动应用程序。同样，运行 npm run test 时，将运行 Jest 测试套件，而 npm run build 将运行 webpack 命令以生成最终的构建输出。</li><li>总之，npm run 命令为您提供了一种在 package.json 文件中定义和管理一组指令的方法，可以在项目中快速且灵活地运行各种操作。</li></ul><h2 id="Vue3简介和快速上手"><a href="#Vue3简介和快速上手" class="headerlink" title="Vue3简介和快速上手"></a>Vue3简介和快速上手</h2><h3 id="Vue3介绍"><a href="#Vue3介绍" class="headerlink" title="Vue3介绍"></a>Vue3介绍</h3><p><img src="/img/images/1684487637025.png" alt="1684487637025"></p><blockquote><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。官网为:<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p></blockquote><p> <strong>Vue的两个核心功能：</strong></p><ul><li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li><li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</li></ul><blockquote><p>VUE作者:尤雨溪</p></blockquote><img src="/img/images//1684487839928.png" alt="1684487839928" style="zoom:50%;" /><ul><li><p>尤雨溪（Evan You），毕业于科尔盖特大学，前端框架Vue.js的作者、HTML5版Clear的打造人、独立开源开发者。曾就职于Google Creative Labs和Meteor Development Group。由于工作中大量接触开源的JavaScript项目，最后自己也走上了开源之路，现全职开发和维护Vue.js</p></li><li><p>尤雨溪毕业于上海复旦附中，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，任职于纽约Google Creative Lab。</p></li><li><p>尤雨溪大学专业并非是计算机专业，在大学期间他学习专业是室内艺术和艺术史，后来读了美术设计和技术的硕士，正是在读硕士期间，他偶然接触到了JavaScript，从此被这门编程语言深深吸引，开启了自己的前端生涯。</p></li></ul><h3 id="Vue3快速体验-非工程化方式"><a href="#Vue3快速体验-非工程化方式" class="headerlink" title="Vue3快速体验(非工程化方式)"></a>Vue3快速体验(非工程化方式)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里也可以用浏览器打开连接,然后将获得的文本单独保存进入一个vue.js的文件,导入vue.js文件即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 给style属性绑定colorStyle数据 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &#123;&#123;插值表达式 直接将数据放在该位置&#125;&#125; --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;colorStyle&quot;</span>&gt;</span>&#123;&#123;headline&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- v-text设置双标签中的文本 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 给type属性绑定inputType数据 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:type</span> =<span class="string">&quot;inputType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;helloVue3&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 给按钮单击事件绑定函数 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;sayHello()&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//组合api</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 在setup内部自由声明数据和方法即可!最终返回!</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//定义数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//在VUE中实现DOM的思路是: 通过修改修数据而影响页面元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// vue3中,数据默认不是响应式的,需要加ref或者reactive处理,后面会详细讲解</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> inputType =<span class="string">&#x27;text&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> headline =<span class="string">&#x27;hello vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> article =<span class="string">&#x27;vue is awesome&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> colorStyle =&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>&#125;        </span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 定义函数</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> <span class="title function_">sayHello</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;hello Vue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//在setup函数中,return返回的数据和函数可以在html使用</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                       inputType,</span></span><br><span class="line"><span class="language-javascript">                       headline,</span></span><br><span class="line"><span class="language-javascript">                       article,</span></span><br><span class="line"><span class="language-javascript">                       colorStyle,</span></span><br><span class="line"><span class="language-javascript">                       sayHello</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//挂载到视图</span></span></span><br><span class="line"><span class="language-javascript">            app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3通过Vite实现工程化"><a href="#Vue3通过Vite实现工程化" class="headerlink" title="Vue3通过Vite实现工程化"></a>Vue3通过Vite实现工程化</h2><h3 id="Vite的介绍"><a href="#Vite的介绍" class="headerlink" title="Vite的介绍"></a>Vite的介绍</h3><img src="/img/images//1684488376469.png" alt="1684488376469" style="zoom:50%;" /><img src="/img/images//1684488405011.png" alt="1684488405011" style="zoom: 80%;" /><blockquote><p>在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因：使用工具抓取、处理并将我们的源码模块串联成可以在浏览器中运行的文件。时过境迁，我们见证了诸如 <a href="https://webpack.js.org/" title="webpack">webpack</a>、<a href="https://rollupjs.org/" title="Rollup">Rollup</a> 和 <a href="https://parceljs.org/" title="Parcel">Parcel</a> 等工具的变迁，它们极大地改善了前端开发者的开发体验</p></blockquote><ul><li>当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。</li><li>包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</li></ul><blockquote><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。<a href="https://cn.vitejs.dev/guide/why.html%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8C%85%E6%8B%AC%E4%BD%86%E4%B8%8D%E9%99%90%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%EF%BC%9A">https://cn.vitejs.dev/guide/why.html前端工程化的作用包括但不限于以下几个方面：</a></p></blockquote><ol><li>快速创建项目：使用脚手架可以快速搭建项目基本框架，避免从零开始搭建项目的重复劳动和繁琐操作，从而节省时间和精力。</li><li>统一的工程化规范：前端脚手架可以预设项目目录结构、代码规范、git提交规范等统一的工程化规范，让不同开发者在同一个项目上编写出风格一致的代码，提高协作效率和质量。</li><li>代码模板和组件库：前端脚手架可以包含一些常用的代码模板和组件库，使开发者在实现常见功能时不再重复造轮子，避免因为轮子质量不高带来的麻烦，能够更加专注于项目的业务逻辑。</li><li>自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等。</li></ol><h3 id="Vite创建Vue3工程化项目"><a href="#Vite创建Vue3工程化项目" class="headerlink" title="Vite创建Vue3工程化项目"></a>Vite创建Vue3工程化项目</h3><h4 id="Vite-Vue3项目的创建、启动、停止"><a href="#Vite-Vue3项目的创建、启动、停止" class="headerlink" title="Vite+Vue3项目的创建、启动、停止"></a>Vite+Vue3项目的创建、启动、停止</h4><blockquote><p>1 使用命令行创建工程</p></blockquote><ul><li>在磁盘的合适位置上,创建一个空目录用于存储多个前端项目</li><li>用vscode打开该目录</li><li>在vocode中打开命令行运行如下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><ul><li>第一次使用vite时会提示下载vite,输入y回车即可,下次使用vite就不会出现了</li></ul><p><img src="/img/images/1687769339457.png" alt="1687769339457"></p><ul><li>注意： 选择vue+JavaScript选项即可</li></ul><blockquote><p>2 安装项目所需依赖</p></blockquote><ul><li>cd进入刚刚创建的项目目录</li><li>npm install命令安装基础依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./vue3-demo1</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>3 启动项目</p></blockquote><ul><li>查看项目下的package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-demo1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.62.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.47&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><img src="/img/images//image_PHNwnXnsWv.png" style="zoom: 33%;" /><blockquote><p>5 停止项目</p></blockquote><ul><li>命令行上 ctrl+c</li></ul><h4 id="Vite-Vue3项目的目录结构"><a href="#Vite-Vue3项目的目录结构" class="headerlink" title="Vite+Vue3项目的目录结构"></a>Vite+Vue3项目的目录结构</h4><blockquote><p>1.下面是 Vite 项目结构和入口的详细说明：</p></blockquote><p><img src="/img/images/1684489112904.png" alt="1684489112904"></p><ul><li>public&#x2F; 目录：用于存放一些公共资源，如 HTML 文件、图像、字体等，这些资源会被直接复制到构建出的目标目录中。</li><li>src&#x2F; 目录：存放项目的源代码，包括 JavaScript、CSS、Vue 组件、图像和字体等资源。在开发过程中，这些文件会被 Vite 实时编译和处理，并在浏览器中进行实时预览和调试。以下是src内部划分建议：<ol><li><code>assets/</code> 目录：用于存放一些项目中用到的静态资源，如图片、字体、样式文件等。</li><li><code>components/</code> 目录：用于存放组件相关的文件。组件是代码复用的一种方式，用于抽象出一个可复用的 UI 部件，方便在不同的场景中进行重复使用。</li><li><code>layouts/</code> 目录：用于存放布局组件的文件。布局组件通常负责整个应用程序的整体布局，如头部、底部、导航菜单等。</li><li><code>pages/</code> 目录：用于存放页面级别的组件文件，通常是路由对应的组件文件。在这个目录下，可以创建对应的文件夹，用于存储不同的页面组件。</li><li><code>plugins/</code> 目录：用于存放 Vite 插件相关的文件，可以按需加载不同的插件来实现不同的功能，如自动化测试、代码压缩等。</li><li><code>router/</code> 目录：用于存放 Vue.js的路由配置文件，负责管理视图和 URL 之间的映射关系，方便实现页面之间的跳转和数据传递。</li><li><code>store/</code> 目录：用于存放 Vuex 状态管理相关的文件，负责管理应用程序中的数据和状态，方便统一管理和共享数据，提高开发效率。</li><li><code>utils/</code> 目录：用于存放一些通用的工具函数，如日期处理函数、字符串操作函数等。</li></ol></li><li>vite.config.js 文件：Vite的配置文件，可以通过该文件配置项目的参数、插件、打包优化等。该文件可以使用 CommonJS 或 ES6 模块的语法进行配置。</li><li>package.json 文件：标准的 Node.js 项目配置文件，包含了项目的基本信息和依赖关系。其中可以通过 scripts 字段定义几个命令，如 dev、build、serve 等，用于启动开发、构建和启动本地服务器等操作。</li><li>Vite 项目的入口为 src&#x2F;main.js 文件，这是 Vue.js 应用程序的启动文件，也是整个前端应用程序的入口文件。在该文件中，通常会引入 Vue.js 及其相关插件和组件，同时会创建 Vue 实例，挂载到 HTML 页面上指定的 DOM 元素中。</li></ul><blockquote><p> 2.vite的运行界面</p></blockquote><ul><li>在安装了 Vite的项目中，可以在 npm scripts 中使用 <code>vite</code> 可执行文件，或者直接使用 <code>npx vite</code> 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：(package.json)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span> <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span> <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>运行设置端口号：(vite.config.js)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改vite项目配置文件 vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Vite-Vue3项目组件-SFC入门"><a href="#Vite-Vue3项目组件-SFC入门" class="headerlink" title="Vite+Vue3项目组件(SFC入门)"></a>Vite+Vue3项目组件(SFC入门)</h4><blockquote><p>什么是VUE的组件?</p></blockquote><ul><li>一个页面作为整体,是由多个部分组成的,每个部分在这里就可以理解为一个组件</li><li>每个.vue文件就可以理解为一个组件,多个.vue文件可以构成一个整体页面</li><li>组件化给我们带来的另一个好处就是组件的复用和维护非常的方便</li></ul><img src="/img/images//image_uTNSasJcFd.png" style="zoom:40%;" /><blockquote><p>什么是.vue文件?</p></blockquote><ul><li><p>传统的页面有.html文件.css文件和.js文件三个文件组成(多文件组件) </p></li><li><p>vue将这文件合并成一个.vue文件(Single-File Component，简称 SFC,单文件组件)</p></li><li><p>.vue文件对js&#x2F;css&#x2F;html统一封装,这是VUE中的概念 该文件由三个部分组成    <code>&lt;script&gt;    &lt;template&gt;    &lt;style&gt;</code></p><ul><li>template标签     代表组件的html部分代码代替传统的.html文件</li><li>script标签           代表组件的js代码 代替传统的.js文件</li><li>style标签            代表组件的css样式代码 代替传统的.css文件</li></ul></li></ul><p></p><blockquote><p>工程化vue项目如何组织这些组件?</p></blockquote><ul><li>index.html是项目的入口,其中 <code>&lt;div id =&#39;app&#39;&gt;&lt;/div&gt;</code>是用于挂载所有组建的元素</li><li>index.html中的script标签引入了一个main.js文件,具体的挂载过程在main.js中执行</li><li>main.js是vue工程中非常重要的文件,他决定这项目使用哪些依赖,导入的第一个组件</li><li>App.vue是vue中的核心组件,所有的其他组件都要通过该组件进行导入,该组件通过路由可以控制页面的切换</li></ul><p><img src="/img/images/1684912274904.png" alt="1684912274904"></p><h4 id="Vite-Vue3响应式入门和setup函数"><a href="#Vite-Vue3响应式入门和setup函数" class="headerlink" title="Vite+Vue3响应式入门和setup函数"></a>Vite+Vue3响应式入门和setup函数</h4><blockquote><p>1 使用vite创建一个 vue+JavaScript项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面的样式的是html代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    /** 存储的是css代码! <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span> 是 Vue.js 单文件组件中用于设置组件样式的一种方式。</span></span><br><span class="line"><span class="language-xml">    它的含义是将样式局限在当前组件中，不对全局样式造成影响。 */</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 vue3响应式数据入门</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//非响应式数据: 修改后VUE不会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应式数据:   修改后VUE会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE2中数据默认是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE3中数据要经过ref或者reactive处理后才是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref是VUE3框架提供的一个函数,需要导入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//let counter = 1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref处理的响应式数据在js编码修改的时候需要通过.value操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref响应式数据在绑定到html上时不需要.value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过.value修改响应式数据</span></span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                counter,</span></span><br><span class="line"><span class="language-javascript">                increase,</span></span><br><span class="line"><span class="language-javascript">                decrease</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrease()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3 vue3 setup函数和语法糖</p></blockquote><ul><li>位置：src&#x2F;App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; setup&gt;</span><br><span class="line">   </span><br><span class="line">/* &lt;script type=&quot;module&quot; setup&gt; 通过setup关键字</span><br><span class="line">可以省略 export default &#123;setup()&#123;   return&#123;&#125;&#125;&#125;这些冗余的语法结构 */</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    // 定义响应式数据</span><br><span class="line">    let counter = ref(1)</span><br><span class="line">    // 定义函数</span><br><span class="line">    function increase()&#123;</span><br><span class="line">        counter.value++</span><br><span class="line">    &#125;</span><br><span class="line">    function decrease()&#123;</span><br><span class="line">        counter.value--</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;increase()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    button&#123;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Vite-Vue3关于样式的导入方式"><a href="#Vite-Vue3关于样式的导入方式" class="headerlink" title="Vite+Vue3关于样式的导入方式"></a>Vite+Vue3关于样式的导入方式</h4><ol><li>全局引入main.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span> <span class="comment">//书写引入的资源的相对路径即可！</span></span><br></pre></td></tr></table></figure></li><li>vue文件script代码引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Vue文件style代码引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Vue3视图渲染技术"><a href="#Vue3视图渲染技术" class="headerlink" title="Vue3视图渲染技术"></a>Vue3视图渲染技术</h2><h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><blockquote><p>Vue 使用一种基于 HTML的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p></blockquote><h4 id="插值表达式和文本渲染"><a href="#插值表达式和文本渲染" class="headerlink" title="插值表达式和文本渲染"></a>插值表达式和文本渲染</h4><blockquote><p>插值表达式:最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 ,即双大括号<code>&#123;&#123;&#125;&#125;</code></p></blockquote><ul><li>插值表达式是将数据渲染到元素的指定位置的手段之一</li><li>插值表达式不绝对依赖标签,其位置相对自由</li><li>插值表达式中支持javascript的运算表达式</li><li>插值表达式中也支持函数的调用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> msg =<span class="string">&quot;hello vue3&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getMsg</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="string">&#x27;hello vue3 message&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> age = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> bee = <span class="string">&#x27;蜜 蜂&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 购物车</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> carts = [&#123;<span class="attr">name</span>:<span class="string">&#x27;可乐&#x27;</span>,<span class="attr">price</span>:<span class="number">3</span>,<span class="attr">number</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;薯片&#x27;</span>,<span class="attr">price</span>:<span class="number">6</span>,<span class="attr">number</span>:<span class="number">8</span>&#125;];</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//计算购物车总金额</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> carts)&#123;</span></span><br><span class="line"><span class="language-javascript">          count += carts[index].<span class="property">price</span>*carts[index].<span class="property">number</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    msg的值为: &#123;&#123; msg &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    getMsg返回的值为:&#123;&#123; getMsg() &#125;&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    是否成年: &#123;&#123; age&gt;=18?&#x27;true&#x27;:&#x27;false&#x27; &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    反转: &#123;&#123; bee.split(&#x27; &#x27;).reverse().join(&#x27;-&#x27;) &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    购物车总金额: &#123;&#123; compute() &#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    购物车总金额: &#123;&#123;carts[0].price*carts[0].number + carts[1].price*carts[1].number&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了渲染双标中的文本,我们也可以选择使用<code>v-text</code>和<code>v-html</code>命令</p></blockquote><ul><li>v-*** 这种写法的方式使用的是vue的命令</li><li>v-***的命令必须依赖元素,并且要写在元素的开始标签中</li><li>v-***指令支持ES6中的字符串模板</li><li>插值表达式中支持javascript的运算表达式</li><li>插值表达式中也支持函数的调用</li><li>v-text可以将数据渲染成双标签中间的文本,但是不识别html元素结构的文本</li><li>v-html可以将数据渲染成双标签中间的文本,识别html元素结构的文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> msg =<span class="string">&#x27;hello vue3&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getMsg</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> msg</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> age = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> bee = <span class="string">&#x27;蜜 蜂&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> redMsg =<span class="string">&#x27;&lt;font color=\&#x27;red\&#x27;&gt;msg&lt;/font&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> greenMsg =<span class="string">`&lt;font color=\&#x27;green\&#x27;&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/font&gt;`</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;redMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;getMsg()&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;age&gt;18?&quot;成年&quot;:&quot;未成年&quot;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&#x27;bee.split(&quot; &quot;).reverse().join(&quot;-&quot;)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;redMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&#x27;greenMsg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;`&lt;font color=&#x27;green&#x27;&gt;$&#123;msg&#125;&lt;/font&gt;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Attribute属性渲染"><a href="#Attribute属性渲染" class="headerlink" title="Attribute属性渲染"></a>Attribute属性渲染</h4><blockquote><p>想要渲染一个元素的 attribute，应该使用 <code>v-bind</code>指令</p></blockquote><ul><li>由于插值表达式不能直接放在标签的属性中,所有要渲染元素的属性就应该使用v-bind</li><li>v-bind可以用于渲染任何元素的属性,语法为 <code>v-bind:属性名=&#39;数据名&#39;</code>, 可以简写为 <code>:属性名=&#39;数据名&#39;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>:<span class="string">&quot;http://www.atguigu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">logo</span>:<span class="string">&quot;http://www.atguigu.com//img/images//index_new/logo.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:href</span>=<span class="string">&#x27;data.url&#x27;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">&quot;data.logo&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:title</span>=<span class="string">&quot;data.name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">:value</span>=<span class="string">&quot;`点击访问$&#123;data.name&#125;`&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h4><blockquote><p>我们可以使用 <code>v-on</code> 来监听 DOM 事件，并在事件触发时执行对应的 Vue的JavaScript代码。</p></blockquote><ul><li>用法：<code>v-on:click=&quot;handler&quot;</code> 或简写为 <code>@click=&quot;handler&quot;</code></li><li>vue中的事件名&#x3D;原生事件名去掉<code>on</code> 前缀   如:<code>onClick --&gt; click</code></li><li>handler的值可以是方法事件处理器,也可以是内联事件处理器</li><li>绑定事件时,可以通过一些绑定的修饰符,常见的事件修饰符如下<ul><li><code>.once：只触发一次事件。[重点]</code></li><li><code>.prevent：阻止默认事件。[重点]</code></li><li>.stop：阻止事件冒泡。</li><li>.capture：使用事件捕获模式而不是冒泡模式。</li><li>.self：只在事件发送者自身触发时才触发事件。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 响应式数据 当发生变化时,会自动更新 dom树</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> count=<span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">addCount</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">incrCount</span>= (<span class="params">event</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过事件对象阻止组件的默认行为</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>count的值是:&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方法事件处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount()&quot;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联事件处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>incrCount<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件修饰符 once 只绑定事件一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>addOnce<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件修饰符 prevent 阻止组件的默认行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>prevent<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 原生js方式阻止组件默认行为 (推荐) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;incrCount($event)&quot;</span>&gt;</span>prevent<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h3><blockquote><p> 此处的响应式是指  : 数据模型发生变化时,自动更新DOM树内容,页面上显示的内容会进行同步变化,vue3的数据模型不是自动响应式的,需要我们做一些特殊的处理</p></blockquote><h4 id="响应式需求案例"><a href="#响应式需求案例" class="headerlink" title="响应式需求案例"></a>响应式需求案例</h4><blockquote><p>需求：实现 +  - 按钮,实现数字加一减一</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; counter &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此案例,我们发现counter值,会改变,但是页面不改变! 默认Vue3的数据是非响应式的!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="响应式实现关键字ref"><a href="#响应式实现关键字ref" class="headerlink" title="响应式实现关键字ref"></a>响应式实现关键字ref</h4><blockquote><p><code>ref</code> 可以将一个基本类型的数据（如字符串，数字等）转换为一个响应式对象。 <code>ref</code> 只能包裹单一元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入ref方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作ref处理过的数据,需要通过.value形式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; counter &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在上面的例子中，我们使用 <code>ref</code> 包裹了一个数字，在代码中给这个数字加 1 后，视图也会跟着动态更新。需要注意的是，由于使用了 <code>ref</code>，因此需要在访问该对象时使用 <code>.value</code> 来获取其实际值。</li></ul><h4 id="响应式实现关键字reactive"><a href="#响应式实现关键字reactive" class="headerlink" title="响应式实现关键字reactive"></a>响应式实现关键字reactive</h4><blockquote><p>我们可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive" title="reactive()">reactive()</a> 函数创建一个响应式对象或数组：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入reactive方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(data.<span class="property">counter</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作reactive处理过的数据,需要通过 对象名.属性名的方式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; data.counter &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>对比ref和reactive:</p></blockquote><ul><li><p>使用 <code>ref</code> 适用于以下开发场景：</p><ul><li>包装基本类型数据：<code>ref</code> 主要用于包装基本类型数据（如字符串、数字等），即只有一个值的数据，如果你想监听这个值的变化，用 <code>ref</code> 最为方便。在组件中使用时也很常见。</li><li>访问方式简单：<code>ref</code> 对象在访问时与普通的基本类型值没有太大区别，只需要通过 <code>.value</code> 访问其实际值即可。</li></ul></li><li><p>使用 <code>reactive</code> 适用于以下开发场景：</p><ul><li>包装复杂对象：<code>reactive</code> 可以将一个普通对象转化为响应式对象，这样在数据变化时会自动更新界面，特别适用于处理复杂对象或者数据结构。</li><li>需要递归监听的属性：使用 <code>reactive</code> 可以递归追踪所有响应式对象内部的变化，从而保证界面的自动更新。</li></ul></li><li><p>综上所述，<code>ref</code> 适用与简单情形下的数据双向绑定，对于只有一个字符等基本类型数据或自定义组件等情况，建议可以使用 <code>ref</code>；而对于对象、函数等较为复杂的数据结构，以及需要递归监听的属性变化，建议使用 <code>reactive</code>。当然，在实际项目中根据需求灵活选择也是十分必要的。</p></li></ul><h4 id="扩展响应式关键字toRefs-和-toRef"><a href="#扩展响应式关键字toRefs-和-toRef" class="headerlink" title="扩展响应式关键字toRefs 和 toRef"></a>扩展响应式关键字toRefs 和 toRef</h4><blockquote><p>toRef基于reactive响应式对象上的一个属性，创建一个对应的 ref响应式数据。这样创建的 ref 与其源属性保持同步：改变源属性的值将更新 ref的值，反之亦然。toRefs将一个响应式对象多个属性转换为一个多个ref数据，这个普通对象的每个属性都是指向源对象相应属性的 ref。每个单独的 ref 都是使用 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref" title="toRef()">toRef()</a> 创建的。</p></blockquote><p>案例：响应显示reactive对象属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 从vue中引入reactive方法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将一个reactive响应式对象中的某个属性转换成一个ref响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ct =<span class="title function_">toRef</span>(data,<span class="string">&#x27;counter&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将一个reactive响应式对象中的多个属性转换成多个ref响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;counter,name&#125; = <span class="title function_">toRefs</span>(data)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(data.<span class="property">counter</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取ref的响应对象,需要通过.value属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(counter.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(name.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 函数中要操作ref处理过的数据,需要通过.value形式 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">decr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">counter</span>--;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">incr</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* ref响应式数据,要通过.value属性访问 */</span></span></span><br><span class="line"><span class="language-javascript">      counter.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decr()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    &#123;&#123; data.counter &#125;&#125; </span><br><span class="line">    <span class="symbol">&amp;amp;</span></span><br><span class="line">    &#123;&#123; ct &#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;data.counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span>显示counter值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="条件和列表渲染"><a href="#条件和列表渲染" class="headerlink" title="条件和列表渲染"></a>条件和列表渲染</h3><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><blockquote><p><code>v-if</code> 条件渲染</p></blockquote><ul><li><p><code>v-if=&#39;表达式&#39; </code>只会在指令的表达式返回真值时才被渲染</p></li><li><p>也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。</p></li><li><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 元素后面，否则它将不会被识别。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-show</code>条件渲染扩展：</p></blockquote><ul><li><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样：</p></li><li><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code>的 CSS 属性。</p></li><li><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> awesome = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;ha&quot;</span>  <span class="attr">v-show</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hb&quot;</span>  <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hc&quot;</span>  <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/images/1684565503347.png" alt="1684565503347"></p><blockquote><p><strong><code>v-if</code></strong>    <strong>vs</strong> <strong><code>v-show</code></strong></p></blockquote><ul><li><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</p></li><li><p><code>v-if</code> 也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p></li><li><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换。</p></li><li><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适。</p></li></ul><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><blockquote><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表。</p></blockquote><ul><li><p><code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的<strong>别名</strong>：</p></li><li><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> parentMessage= <span class="title function_">ref</span>(<span class="string">&#x27;产品&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> items =<span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;item1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;薯片&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>:<span class="string">&#x27;item2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&quot;可乐&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- :key不写也可以 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in items&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- index表示索引,当然不是非得使用index这个单词 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>案例：实现购物车显示和删除购物项</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//准备购物车数据,设置成响应数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> carts = <span class="title function_">reactive</span>([&#123;<span class="attr">name</span>:<span class="string">&#x27;可乐&#x27;</span>,<span class="attr">price</span>:<span class="number">3</span>,<span class="attr">number</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;薯片&#x27;</span>,<span class="attr">price</span>:<span class="number">6</span>,<span class="attr">number</span>:<span class="number">8</span>&#125;])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//计算购物车总金额</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> carts)&#123;</span></span><br><span class="line"><span class="language-javascript">        count += carts[index].<span class="property">price</span>*carts[index].<span class="property">number</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//删除购物项方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">removeCart</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      carts.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;carts.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 有数据显示--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;cart,index in carts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.price + &#x27;元&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.number &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123; cart.price*cart.number  + &#x27;元&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeCart(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 没有数据显示--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>购物车没有数据!<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        购物车总金额: &#123;&#123; compute() &#125;&#125; 元</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><blockquote><p>单项绑定和双向绑定</p></blockquote><ul><li>单向绑定: 响应式数据的变化会更新dom树,但是dom树上用户的操作造成的数据改变不会同步更新到响应式数据</li><li>双向绑定: 响应式数据的变化会更新dom树,但是dom树上用户的操作造成的数据改变会同步更新到响应式数据<ul><li>用户通过表单标签才能够输入数据,所以双向绑定都是应用到表单标签上的,其他标签不行</li><li>v-model专门用于双向绑定表单标签的value属性,语法为 <code>v-model:value=&#39;&#39;</code>,可以简写为 <code>v-model=&#39;&#39;</code></li><li>v-model还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> hbs = <span class="title function_">ref</span>([]); <span class="comment">//装爱好的值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> user = <span class="title function_">reactive</span>(&#123;<span class="attr">username</span>:<span class="literal">null</span>,<span class="attr">password</span>:<span class="literal">null</span>,<span class="attr">introduce</span>:<span class="literal">null</span>,<span class="attr">pro</span>:<span class="literal">null</span>&#125;)   </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(hbs.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">clearx</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//user = &#123;&#125;;// 这中写法会将数据变成非响应的,应该是user.username=&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">username</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">password</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">introduce</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">pro</span>=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    hbs.<span class="property">value</span>.<span class="title function_">splice</span>(<span class="number">0</span>,hbs.<span class="property">value</span>.<span class="property">length</span>);;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      爱好： </span><br><span class="line">        吃 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃&quot;</span>&gt;</span> </span><br><span class="line">        喝 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;喝&quot;</span>&gt;</span></span><br><span class="line">        玩 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玩&quot;</span>&gt;</span></span><br><span class="line">        乐 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hbs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乐&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      简介:<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;user.introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      籍贯:</span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;user.pro&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>黑<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>吉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>辽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>冀<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clearx()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      显示爱好:&#123;&#123; hbs &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      显示用户信息:&#123;&#123; user &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性计算"><a href="#属性计算" class="headerlink" title="属性计算"></a>属性计算</h3><blockquote><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里的模板看起来有些复杂。我们必须认真看好一会儿才能明白它的计算依赖于 <code>author.books</code>。更重要的是，如果在模板中需要不止一次这样的计算，我们可不想将这样的代码在模板里重复好多遍。</li></ul><blockquote><p>因此我们推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑。这是重构后的示例：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个计算属性 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;publishedBooksMessage&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">hasBooks</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hasBooks&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span>?<span class="string">&#x27;Yes&#x27;</span>:<span class="string">&#x27;no&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; hasBooks() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- 调用方法,每个标签都会调用一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; hasBooks() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;author.name&#125;&#125; Has published books?:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- 属性计算,属性值不变时,多个个标签只会调用一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>我们在这里定义了一个计算属性 <code>publishedBooksMessage</code>。<code>computed()</code> 方法期望接收一个 getter 函数，返回值为一个<strong>计算属性 ref</strong>。和其他一般的 ref 类似，你可以通过 <code>publishedBooksMessage.value</code> 访问计算结果。计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 <code>.value</code>。</p></li><li><p>Vue的计算属性会自动追踪响应式依赖。它会检测到 <code>publishedBooksMessage</code> 依赖于 <code>author.books</code>，所以当 <code>author.books</code> 改变时，任何依赖于 <code>publishedBooksMessage</code>的绑定都会同时更新。</p></li></ul><blockquote><p>计算属性缓存 vs 方法</p></blockquote><ul><li>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果!</li></ul><h3 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h3><blockquote><p>计算属性允许我们声明性地计算衍生值。然而在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。我们可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#watch" title="watch">watch</a><a href="https://cn.vuejs.org/api/reactivity-core.html#watch" title=" 函数"> 函数</a>在每次响应式状态发生变化时触发回调函数：</p></blockquote><ul><li>watch主要用于以下场景：<ul><li>当数据发生变化时需要执行相应的操作</li><li>监听数据变化，当满足一定条件时触发相应操作</li><li>在异步操作前或操作后需要执行相应的操作</li></ul></li></ul><blockquote><p>监控响应式数据（watch）：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref,reactive,watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> firstname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lastname=<span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fullname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听一个ref响应式数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(firstname,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;oldValue&#125;</span>变为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听reactive响应式数据的指定属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(<span class="function">()=&gt;</span>lastname.<span class="property">name</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;oldValue&#125;</span>变为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听reactive响应式数据的所有属性(深度监视,一般不推荐)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//deep:true 深度监视</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//immediate:true 深度监视在进入页面时立即执行一次</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(<span class="function">()=&gt;</span>lastname,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时的newValue和oldValue一样,都是lastname</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=firstname.<span class="property">value</span>+lastname.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>,<span class="attr">immediate</span>:<span class="literal">false</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    全名:&#123;&#123;fullname&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname.name&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>监控响应式数据(watchEffect)：</p></blockquote><ul><li>watchEffect默认监听所有的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//引入模块</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref,reactive,watch, watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> firstname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lastname=<span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fullname=<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//监听所有响应式数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//直接在内部使用监听属性即可！不用外部声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//也不需要，即时回调设置！默认初始化就加载！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(firstname.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lastname.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">    fullname.<span class="property">value</span>=<span class="string">`<span class="subst">$&#123;firstname.value&#125;</span><span class="subst">$&#123;lastname.name&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    全名:&#123;&#123;fullname&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname.name&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>watch</code> vs. <code>watchEffect</code></p></blockquote><ul><li><code>watch</code> 和 <code>watchEffect</code> 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：<ul><li><code>watch</code> 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。<code>watch</code> 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</li><li><code>watchEffect</code>，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</li></ul></li></ul><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><h4 id="生命周期简介"><a href="#生命周期简介" class="headerlink" title="生命周期简介"></a>生命周期简介</h4><blockquote><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为<code>生命周期钩子的函数</code>，让开发者有机会在特定阶段运行自己的代码!</p></blockquote><ul><li>周期图解：</li></ul><img src="/img/images//image_elceCM4Wbp.png" style="zoom: 50%;" /><ul><li>常见钩子函数<ul><li>onMounted()              注册一个回调函数，在组件挂载完成后执行。 </li><li>onUpdated()               注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。 </li><li>onUnmounted()         注册一个回调函数，在组件实例被卸载之后调用。 </li><li>onBeforeMount()       注册一个钩子，在组件被挂载之前被调用。 </li><li>onBeforeUpdate()      注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用。 </li><li>onBeforeUnmount()  注册一个钩子，在组件实例被卸载之前调用。</li></ul></li></ul><h4 id="生命周期案例"><a href="#生命周期案例" class="headerlink" title="生命周期案例"></a>生命周期案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,onUpdated,onMounted,onBeforeUpdate&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message =<span class="title function_">ref</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 挂载完毕生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onMounted---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新前生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onBeforeUpdate---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新完成生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onUpdated---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><h4 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h4><blockquote><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。组件就是实现应用中局部功能代码和资源的集合！在实际应用中，组件常常被组织成层层嵌套的树状结构：</p></blockquote><img src="/img/images//image_9dCv8raLh-.png" style="zoom:50%;" /><ul><li>这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。</li></ul><blockquote><p>传统方式编写应用：</p></blockquote><img src="/img/images//image_6ZwJPs9HkC.png" style="zoom: 40%;" /><blockquote><p>组件方式编写应用：</p></blockquote><img src="/img/images//image_uTNSasJcFd.png" style="zoom:40%;" /><ul><li><p>组件化：对js&#x2F;css&#x2F;html统一封装,这是VUE中的概念</p></li><li><p>模块化：对js的统一封装,这是ES6中的概念</p></li><li><p>组件化中,对js部分代码的处理使用ES6中的模块化</p></li></ul><h4 id="组件化入门案例"><a href="#组件化入门案例" class="headerlink" title="组件化入门案例"></a>组件化入门案例</h4><blockquote><p>案例需求： 创建一个页面，包含头部和菜单以及内容显示区域，每个区域使用独立组建！</p></blockquote><p><img src="/img/images/1686885192862.png" alt="1686885192862"></p><blockquote><p>1 准备vue项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">cd vite项目</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>2 安装相关依赖</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install sass</span><br><span class="line">npm install bootstrap</span><br></pre></td></tr></table></figure><blockquote><p> 3 创建子组件 在src&#x2F;components文件下 vscode需要安装Vetur插件，这样vue文件有快捷提示</p></blockquote><ul><li>Header.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        欢迎： xx <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Navigator.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue  入口组件App引入组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>4 启动测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h4 id="组件之间传递数据"><a href="#组件之间传递数据" class="headerlink" title="组件之间传递数据"></a>组件之间传递数据</h4><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><blockquote><p>Vue3 中父组件向子组件传值可以通过 props 进行，具体操作如下：</p></blockquote><ol><li><p>首先，在父组件中定义需要传递给子组件的值，接着，在父组件的模板中引入子组件，同时在引入子组件的标签中添加 props 属性并为其设置需要传递的值。</p></li><li><p>在 Vue3 中，父组件通过 props 传递给子组件的值是响应式的。也就是说，如果在父组件中的传递的值发生了改变，子组件中的值也会相应地更新。</p></li></ol><ul><li>父组件代码：App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref,reactive,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;parent data!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> title = <span class="title function_">ref</span>(<span class="number">42</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> = <span class="string">&#x27;修改数据！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件，并且传递数据！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>点击更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件代码：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,isRef,defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明父组件传递属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><ul><li>父组件： App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> pdata = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">padd</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2222&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> =data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义接收，子组件传递数据方法！ 参数为数据！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">psub</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; pdata &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> emites = <span class="title function_">defineEmits</span>([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsgToParent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------son--------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.出发父组件对应的方法，调用defineEmites对应的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> ++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsgToParent&quot;</span>&gt;</span>发送消息给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h5 id="兄弟传参"><a href="#兄弟传参" class="headerlink" title="兄弟传参"></a>兄弟传参</h5><p><img src="/img/images/image_hZ6yocZGY3.png"></p><ul><li>Navigator.vue: 发送数据到App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;sendMenu&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//触发事件，向父容器发送数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emits</span>(<span class="string">&#x27;sendMenu&#x27;</span>,data);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;学员管理&#x27;)&quot;</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;图书管理&#x27;)&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;请假管理&#x27;)&quot;</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;考试管理&#x27;)&quot;</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;讲师管理&#x27;)&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue: 发送数据到Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义接受navigator传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> navigator_menu = <span class="title function_">ref</span>(<span class="string">&#x27;ceshi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">receiver</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    navigator_menu.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      &#123;&#123; navigator_menu &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> @<span class="attr">sendMenu</span>=<span class="string">&quot;receiver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向子组件传递数据--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:message</span>=<span class="string">&quot;navigator_menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3路由机制router"><a href="#Vue3路由机制router" class="headerlink" title="Vue3路由机制router"></a>Vue3路由机制router</h2><h3 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h3><blockquote><p>1 什么是路由？</p></blockquote><ul><li>定义：路由就是根据不同的 URL 地址展示不同的内容或页面。</li><li>通俗理解：路由就像是一个地图，我们要去不同的地方，需要通过不同的路线进行导航。</li></ul><blockquote><p>2 路由的作用</p></blockquote><ul><li>单页应用程序（SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验；</li><li>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全；</li><li>路由还可以利用浏览器的前进与后退，帮助用户更好地回到之前访问过的页面。</li></ul><h3 id="路由入门案例"><a href="#路由入门案例" class="headerlink" title="路由入门案例"></a>路由入门案例</h3><blockquote><p>1 案例需求分析</p></blockquote><img src="/img/images//image_j-xo-xB5c8.png" style="zoom: 33%;" /><p>​    </p><blockquote><p>2 创建项目和导入路由依赖</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite //创建项目cd 项目文件夹 //进入项目文件夹</span><br><span class="line">npm install //安装项目需求依赖</span><br><span class="line">npm install vue-router@4 --save //安装全局的vue-router 4版本</span><br></pre></td></tr></table></figure><blockquote><p>3 准备页面和组件    </p></blockquote><ul><li>components&#x2F;Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;List.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;Add.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components&#x2F;Update.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Update页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>4 准备路由配置</p></blockquote><ul><li>src&#x2F;routers&#x2F;router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//createWebHashHistory() 是 Vue.js 基于 hash 模式创建路由的工厂函数。在使用这种模式下，路由信息保存在 URL的 hash 中，</span></span><br><span class="line">    <span class="comment">//使用 createWebHashHistory() 方法，可以创建一个路由历史记录对象，用于管理应用程序的路由。在 Vue.js 应用中，</span></span><br><span class="line">    <span class="comment">//通常使用该方法来创建路由的历史记录对象。</span></span><br><span class="line">    <span class="comment">//就是路由中缓存历史记录的对象，vue-router提供</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                component指定组件在默认的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:Home</span></span><br><span class="line"><span class="comment">                components指定组件在name为某个值的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:&#123;</span></span><br><span class="line"><span class="comment">                    default:Home,// 默认路由视图位置</span></span><br><span class="line"><span class="comment">                    homeView:Home// name为homeView的路由视图位置</span></span><br><span class="line"><span class="comment">                &#125;   </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>5 main.js引入router配置</p></blockquote><ul><li>修改文件：main.js (入口文件)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//导入router模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//绑定路由对象</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//挂在试图</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>6 启动测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><blockquote><p>重定向的作用：将一个路由重定向到另一个路由上</p></blockquote><ul><li>修改案例：访问&#x2F;list和&#x2F;showAll都定向到List.vue</li><li>router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showAll&#x27;</span>,</span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            redirect :<span class="string">&#x27;/list&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程式路由-useRouter"><a href="#编程式路由-useRouter" class="headerlink" title="编程式路由(useRouter)"></a>编程式路由(useRouter)</h3><blockquote><p>普通路由</p></blockquote><ul><li><code>&lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;  </code>这种路由,to中的内容目前是固定的,点击后只能切换&#x2F;list对象组件(声明式路由)</li></ul><blockquote><p>编程式路由</p></blockquote><ul><li>通过useRouter,动态决定向那个组件切换的路由</li><li>在 Vue 3 和 Vue Router 4 中，你可以使用 <code>useRouter</code> 来实现动态路由(编程式路由)</li><li>这里的 <code>useRouter</code> 方法返回的是一个 router 对象，你可以用它来做如导航到新页面、返回上一页面等操作。</li></ul><blockquote><p>案例需求: 通过普通按钮配合事件绑定实现路由页面跳转,不直接使用router-link标签</p></blockquote><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  routePath =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  <span class="title function_">showList</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 编程式路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接push一个路径</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(&#x27;/list&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// push一个带有path属性的对象</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 动态输入路径,点击按钮,触发单击事件的函数,在函数中通过编程是路由切换页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showList()&quot;</span>&gt;</span>showList<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由传参-useRoute"><a href="#路由传参-useRoute" class="headerlink" title="路由传参(useRoute)"></a>路由传参(useRoute)</h3><blockquote><p>路径参数</p></blockquote><ul><li>在路径中使用一个动态字段来实现，我们称之为 <strong>路径参数</strong><ul><li>例如： 查看数据详情  <code>/showDetail/1</code>  ,<code>1</code>就是要查看详情的id,可以动态添值！</li></ul></li></ul><blockquote><p>键值对参数</p></blockquote><ul><li><p>类似与get请求通过url传参,数据是键值对形式的</p><ul><li><p>例如:  查看数据详情<code>/showDetail?hid=1</code>,<code>hid=1</code>就是要传递的键值对参数</p></li><li><p>在 Vue 3 和 Vue Router 4 中，你可以使用  <code>useRoute</code> 这个函数从 Vue的组合式 API 中获取路由对象。</p></li><li><p><code>useRoute</code> 方法返回的是当前的 route 对象，你可以用它来获取关于当前路由的信息，如当前的路径、查询参数等。</p></li></ul></li></ul><blockquote><p>案例需求 : 切换到ShowDetail.vue组件时,向该组件通过路由传递参数</p></blockquote><ul><li>修改App.vue文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//动态路由路径传参方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 尝试使用拼接字符串方式传递路径参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(`showDetail/$&#123;id&#125;/$&#123;languange&#125;`)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*路径参数,需要使用params  */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;showDetail&quot;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail2</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*uri键值对参数,需要使用query */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/showDetail2&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路径参数   --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showDetail/1/JAVA&quot;</span>&gt;</span>showDetail路径传参显示JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>showDetail动态路由路径传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 键值对参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#123;path:&#x27;/showDetail2&#x27;,query:&#123;id:1,language:&#x27;Java&#x27;&#125;&#125;&quot;</span>&gt;</span>showDetail2键值对传参显示JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail2(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>showDetail2动态路由键值对传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      showDetail视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      showDetail2视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改router.js增加路径参数占位符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 此处:id  :language作为路径的占位符 */</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail/:id/:language&#x27;</span>,</span><br><span class="line">            <span class="comment">/* 动态路由传参时,根据该名字找到该路由 */</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;showDetail&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView</span>:<span class="title class_">ShowDetail</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail2&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView2</span>:<span class="title class_">ShowDetail2</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>ShowDetail.vue 通过useRoute获取路径参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onUpdated,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    onUpdated (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数</span></span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.params.id&#125;&#125;:&#123;&#123;route.params.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ShowDetail2.vue通过useRoute获取键值对参数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onUpdated,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    onUpdated (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数(通过query获取参数,此时参数是key-value形式的)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail2页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.query.id&#125;&#125;:&#123;&#123;route.query.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><blockquote><p>在 Vue 3 中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数。路由守卫可以用于许多任务，例如验证用户是否已登录、在路由切换前提供确认提示、请求数据等。Vue 3 为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫：</p></blockquote><ol><li><strong>全局前置守卫</strong>：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等。</li><li><strong>全局后置守卫</strong>：在路由切换之后被调用，可以用于处理数据、操作 DOM 、记录日志等。</li><li><strong>守卫代码的位置</strong>: 在router.js中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//to 是目标地包装对象  .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//from 是来源地包装对象 .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//next是方法，不调用默认拦截！ next() 放行,直接到达目标组件</span></span><br><span class="line">    <span class="comment">//next(&#x27;/地址&#x27;)可以转发到其他地址,到达目标组件前会再次经过前置路由守卫</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>,<span class="keyword">from</span>.<span class="property">path</span>,next)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要判断，注意避免无限重定向</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Navigate from <span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span> to <span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>登录案例，登录以后才可以进入home,否则必须进入login</p></blockquote><ul><li>定义Login.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> password =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(username.<span class="property">value</span> == <span class="string">&#x27;root&#x27;</span> &amp; password.<span class="property">value</span> == <span class="string">&#x27;123456&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">query</span>:&#123;<span class="string">&#x27;username&#x27;</span>:username.<span class="property">value</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//登录成功利用前端存储机制，存储账号！</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>,username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//sessionStorage.setItem(&#x27;username&#x27;,username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录失败，账号或者密码错误！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//  并不是每次进入home页时,都有用户名参数传入</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//let username = route.query.username</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> <span class="title function_">logout</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 清除localStorge中的username</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//window.sessionStorage.removeItem(&#x27;username&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态路由到登录页</span></span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎&#123;&#123;username&#125;&#125;登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义routers.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/login.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由的全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    to 要去那</span></span><br><span class="line"><span class="comment">    from 从哪里来</span></span><br><span class="line"><span class="comment">    next 放行路由时需要调用的方法,不调用则不放行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//放行路由  注意放行不要形成循环  </span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//let username =window.sessionStorage.getItem(&#x27;username&#x27;); </span></span><br><span class="line">        <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != username)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="Vue3数据交互axios"><a href="#Vue3数据交互axios" class="headerlink" title="Vue3数据交互axios"></a>Vue3数据交互axios</h2><h3 id="预讲知识-promise"><a href="#预讲知识-promise" class="headerlink" title="预讲知识-promise"></a>预讲知识-promise</h3><h4 id="普通函数和回调函数"><a href="#普通函数和回调函数" class="headerlink" title="普通函数和回调函数"></a>普通函数和回调函数</h4><blockquote><p>普通函数: 正常调用的函数,一般函数执行完毕后才会继续执行下一行代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1 invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数执行完毕,继续执行后续代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>回调函数: 一些特殊的函数,表示未来才会执行的一些功能,后续代码不会等待该函数执行完毕就开始执行了</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置一个2000毫秒后会执行一次的定时任务</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Promise-简介"><a href="#Promise-简介" class="headerlink" title="Promise 简介"></a>Promise 简介</h4><blockquote><p>前端中的异步编程技术，类似Java中的多线程+线程结果回调！</p></blockquote><ul><li><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p></li><li><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p></li></ul><blockquote><p><code>Promise</code>对象有以下两个特点。</p></blockquote><pre><code>（1）Promise对象代表一个异步操作，有三种状态：`Pending`（进行中）、`Resolved`（已完成，又称 Fulfilled）和`Rejected`（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是`Promise`这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从`Pending`变为`Resolved`和从`Pending`变为`Rejected`。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</code></pre><h4 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h4><blockquote><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1.实例化promise对象,并且执行(类似Java创建线程对象,并且start)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject随意命名,但是一般这么叫!</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject分别处理成功和失败的两个函数! 成功resolve(结果)  失败reject(结果)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在function中调用这里两个方法,那么promise会处于两个不同的状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    状态: promise有三个状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            pending   正在运行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolved  内部调用了resolve方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            rejected  内部调用了reject方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在第二步回调函数中就可以获取对应的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//resolve(&quot;promise success&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;promise fail&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.获取回调函数结果  then在这里会等待promise中的运行结果,但是不会阻塞代码继续运行</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;value&#125;</span>`</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了reject:<span class="subst">$&#123;error&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3 其他代码执行   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Promise-catch"><a href="#Promise-catch" class="headerlink" title="Promise catch()"></a>Promise catch()</h4><blockquote><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 故意响应一个异常对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject()的对应方法可以在产生异常时执行,接收到的就是异常中的提示信息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中可以只留一个resolve()的对应方法,reject()方法可以用后续的catch替换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject对应的回调函数被后续的catch替换后,catch中接收的数据是一个异常对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">resolveValue</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;resolveValue&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//function(rejectValue)&#123;console.log(`promise中执行了reject:$&#123;rejectValue&#125;`)&#125;</span></span></span><br><span class="line"><span class="language-javascript">    ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125; </span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="async和await的使用"><a href="#async和await的使用" class="headerlink" title="async和await的使用"></a>async和await的使用</h4><blockquote><p>&amp;#x20;async和await是ES6中用于处理异步操作的新特性。通常，异步操作会涉及到Promise对象，而async&#x2F;await则是在Promise基础上提供了更加直观和易于使用的语法。</p></blockquote><blockquote><p> async 用于标识函数的</p></blockquote><ol><li><p>async标识函数后,async函数的返回值会变成一个promise对象</p></li><li><p>如果函数内部返回的数据是一个非promise对象,async函数的结果会返回一个成功状态 promise对象</p></li><li><p>如果函数内部返回的是一个promise对象,则async函数返回的状态与结果由该对象决定</p></li><li><p>如果函数内部抛出的是一个异常,则async函数返回的是一个失败的promise对象</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        async 用于标识函数的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. async标识函数后,async函数的返回值会变成一个promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 如果函数内部返回的数据是一个非promise对象,async函数的结果会返回一个成功状态 promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 如果函数内部返回的是一个promise对象,则async函数返回的状态与结果由该对象决定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4. 如果函数内部抛出的是一个异常,则async函数返回的是一个失败的promise对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//return 10</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//throw new Error(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;heihei&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> promise</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise =<span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>await</p></blockquote><ol><li>await右侧的表达式一般为一个promise对象,但是也可以是一个其他值</li><li>如果表达式是promise对象,await返回的是promise成功的值</li><li>await会等右边的promise对象执行结束,然后再获取结果,后续代码也会等待await的执行</li><li>如果表达式是其他值,则直接返回该值</li><li>await必须在async函数中,但是async函数中可以没有await</li><li>如果await右边的promise失败了,就会抛出异常,需要通过 try … catch捕获处理</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. await右侧的表达式一般为一个promise对象,但是也可以是一个其他值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 如果表达式是promise对象,await返回的是promise成功的值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. await会等右边的promise对象执行结束,然后再获取结果,后续代码也会等待await的执行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            4. 如果表达式是其他值,则直接返回该值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            5. await必须在async函数中,但是async函数中可以没有await</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            6. 如果await右边的promise失败了,就会抛出异常,可以通过 try ... catch捕获处理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//let res = await Promise.reject(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch got:&quot;</span>+e)   </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await got:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun2</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Axios介绍"><a href="#Axios介绍" class="headerlink" title="Axios介绍"></a>Axios介绍</h3><blockquote><p> ajax</p></blockquote><ul><li><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行。</p></li><li><p>XMLHttpRequest 只是实现 Ajax的一种方式。</p></li></ul><p><strong>ajax工作原理：</strong></p><p><img src="/img/images/image_bjXPJoLb6a.png"></p><blockquote><p> 原生<strong>javascript方式进行ajax(了解):</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">      xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置回调函数处理响应结果</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置请求方式和请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br></pre></td></tr></table></figure><blockquote><p> 什么是axios  官网介绍:<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p></blockquote><ul><li>Axios 是一个基于 <a href="https://javascript.info/promise-basics" title="promise"><em>promise</em></a> 网络请求库，作用于<a href="https://nodejs.org/" title="node.js">node.js</a> 和浏览器中。 它是 <a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application" title="isomorphic"><em>isomorphic</em></a>的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。它有如下特性<ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="XMLHttpRequests">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" title="http">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" title="XSRF">XSRF</a></li></ul></li></ul><h3 id="Axios-入门案例"><a href="#Axios-入门案例" class="headerlink" title="Axios 入门案例"></a>Axios 入门案例</h3><blockquote><p>1 案例需求:请求后台获取随机土味情话</p></blockquote><ul><li>请求的url</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.uomg.com/api/rand.qinghua?format=json    或者使用  http://forum.atguigu.cn/api/rand.qinghua?format=json</span><br></pre></td></tr></table></figure><ul><li>请求的方式</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET/POST</span><br></pre></td></tr></table></figure><ul><li>数据返回的格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;我努力不是为了你而是因为你。&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 准备项目</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line"><span class="comment">/*npm install vue-router@4 --save</span></span><br><span class="line"><span class="comment">npm install pinia */</span></span><br></pre></td></tr></table></figure><blockquote><p> 3 安装axios</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><blockquote><p>4 设计页面（App.Vue）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>, <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,  <span class="comment">// 请求的url</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123; <span class="comment">// 当请求方式为post时,data下的数据以JSON串放入请求体,否则以key=value形式放url后</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>( <span class="keyword">function</span> (<span class="params">response</span>)&#123;<span class="comment">//响应成功时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>)&#123;<span class="comment">// 响应失败时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> 5 启动测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>异步响应的数据结构</p></blockquote><ul><li>响应的数据是经过包装返回的！一个请求的响应包含以下信息。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText<span class="punctuation">:</span> &#x27;OK&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  config<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  request<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>then取值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>6 通过async和await处理异步请求</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> axios在发送异步请求时的可选配置：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url<span class="punctuation">:</span> &#x27;/user&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method<span class="punctuation">:</span> &#x27;get&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//some-domain.com/api/&#x27;,</span></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  transformRequest<span class="punctuation">:</span> <span class="punctuation">[</span>function (data<span class="punctuation">,</span> headers) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse<span class="punctuation">:</span> <span class="punctuation">[</span>function (data) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line">    return data;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;X-Requested-With&#x27;<span class="punctuation">:</span> &#x27;XMLHttpRequest&#x27;<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ID<span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer<span class="punctuation">:</span> function (params) <span class="punctuation">&#123;</span></span><br><span class="line">    return Qs.stringify(params<span class="punctuation">,</span> <span class="punctuation">&#123;</span>arrayFormat<span class="punctuation">:</span> &#x27;brackets&#x27;<span class="punctuation">&#125;</span>)</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    firstName<span class="punctuation">:</span> &#x27;Fred&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  data<span class="punctuation">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout`的值，则请求会被中断</span></span><br><span class="line">  timeout<span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span> <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  adapter<span class="punctuation">:</span> function (config) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    username<span class="punctuation">:</span> &#x27;janedoe&#x27;<span class="punctuation">,</span></span><br><span class="line">    password<span class="punctuation">:</span> &#x27;s00pers3cret&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  responseType<span class="punctuation">:</span> &#x27;json&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType`的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  responseEncoding<span class="punctuation">:</span> &#x27;utf8&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token的值，被用作 cookie的名称</span></span><br><span class="line">  xsrfCookieName<span class="punctuation">:</span> &#x27;XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  xsrfHeaderName<span class="punctuation">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  onUploadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  onDownloadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  maxContentLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  maxBodyLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  validateStatus<span class="punctuation">:</span> function (status) <span class="punctuation">&#123;</span></span><br><span class="line">    return status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  maxRedirects<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  socketPath<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  httpAgent<span class="punctuation">:</span> new http.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  httpsAgent<span class="punctuation">:</span> new https.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  proxy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    protocol<span class="punctuation">:</span> &#x27;https&#x27;<span class="punctuation">,</span></span><br><span class="line">    host<span class="punctuation">:</span> &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    port<span class="punctuation">:</span> <span class="number">9000</span><span class="punctuation">,</span></span><br><span class="line">    auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      username<span class="punctuation">:</span> &#x27;mikeymike&#x27;<span class="punctuation">,</span></span><br><span class="line">      password<span class="punctuation">:</span> &#x27;rapunz3l&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  cancelToken<span class="punctuation">:</span> new CancelToken(function (cancel) <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  decompress<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 默认值</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Axios-get和post方法"><a href="#Axios-get和post方法" class="headerlink" title="Axios get和post方法"></a>Axios get和post方法</h3><blockquote><p>配置添加语法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(url,&#123;</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url,&#123;<span class="attr">key</span>:value <span class="comment">//此位置数据，没有空对象即可&#123;&#125;&#125;,&#123;</span></span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>测试get参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;<span class="comment">// 向url后添加的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试post参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">// 其他参数</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">params</span>:&#123;<span class="comment">// url上拼接的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(message,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Axios-拦截器"><a href="#Axios-拦截器" class="headerlink" title="Axios 拦截器"></a>Axios 拦截器</h3><blockquote><p>如果想在axios发送请求之前,或者是数据响应回来在执行then方法之前做一些额外的工作,可以通过拦截器完成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器 请求发送之前</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器 数据响应回来</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>定义src&#x2F;axios.js提取拦截器和配置语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  创建instance实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;https://api.uomg.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  添加请求拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置请求头配置信息</span></span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//处理指定的请求头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before request&quot;</span>)</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Accept</span> = <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置请求错误处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request error&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置响应正确时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after success response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置响应异常时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after fail response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入我们自己定义的axios.js文件,而不是导入axios依赖  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">// 其他键值对参数</span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">await</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这里返回的是一个fullfilled状态的promise</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveWords</span>().<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">response</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after getloveWords&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">          <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3状态管理Pinia"><a href="#Vue3状态管理Pinia" class="headerlink" title="Vue3状态管理Pinia"></a>Vue3状态管理Pinia</h2><h3 id="Pinia介绍"><a href="#Pinia介绍" class="headerlink" title="Pinia介绍"></a>Pinia介绍</h3><blockquote><p>如何实现多个组件之间的数据传递?</p></blockquote><ul><li><p>方式1 组件传参   </p></li><li><p>方式2 路由传参  </p></li><li><p>方式3 通过pinia状态管理定义共享数据</p></li></ul><blockquote><p>当我们有<code>多个组件共享一个共同的状态(数据源)</code>时，多个视图可能都依赖于同一份状态。来自不同视图的交互也可能需要更改同一份状态。虽然我们的手动状态管理解决方案（props,组件间通信,模块化）在简单的场景中已经足够了，但是在大规模的生产应用中还有很多其他事项需要考虑：</p></blockquote><ul><li>更强的团队协作约定</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试</li><li>模块热更新 (HMR)</li><li>服务端渲染支持</li></ul><blockquote><p> <a href="https://pinia.vuejs.org/zh/" title="Pinia">Pinia</a> 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue 2 和 Vue 3 都可用。<a href="https://pinia.vuejs.org/zh/introduction.html">https://pinia.vuejs.org/zh/introduction.html</a></p></blockquote><h3 id="Pinia基本用法"><a href="#Pinia基本用法" class="headerlink" title="Pinia基本用法"></a>Pinia基本用法</h3><blockquote><p> 1 准备vite项目</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@<span class="number">4</span> --save</span><br></pre></td></tr></table></figure><blockquote><p> 2 安装pinia</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><blockquote><p>3 定义pinia store对象 src&#x2F;store&#x2F;store.js [推荐这么命名不是强制]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据并且对外暴露</span></span><br><span class="line"><span class="comment">// store就是定义共享状态的包装对象</span></span><br><span class="line"><span class="comment">// 内部包含四个属性： id 唯一标识 state 完整类型推理，推荐使用箭头函数 存放的数据 getters 类似属性计算，存储放对数据</span></span><br><span class="line"><span class="comment">// 操作的方法  actions 存储数据的复杂业务逻辑方法</span></span><br><span class="line"><span class="comment">// 理解： store类似Java中的实体类， id就是类名， state 就是装数据值的属性  getters就是get方法，actions就是对数据操作的其他方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;personPinia&#x27;</span>, <span class="comment">//必须唯一</span></span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123; <span class="comment">// state中用于定义数据</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;<span class="comment">// 用于定义一些通过数据计算而得到结果的一些方法 一般在此处不做对数据的修改操作</span></span><br><span class="line">                 <span class="comment">// getters中的方法可以当做属性值方式使用</span></span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123; <span class="comment">// 用于定义一些对数据修改的方法</span></span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p> 4 在main.js配置pinia组件到vue中 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建pinia对象</span></span><br><span class="line"><span class="keyword">let</span> pinia= <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// app中使用pinia功能</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia) </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>5 Operate.vue 中操作Pinia数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hobby = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">显示pinia中的person数据:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>6 List.vue中展示Pinia数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面,展示Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        读取姓名:&#123;&#123;person.username&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        读取年龄:&#123;&#123;person.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        通过get年龄:&#123;&#123;person.getAge&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好数量:&#123;&#123;person.getHobbiesCount&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所有的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(hobby,index) in person.hobbies&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>7 定义组件路由router.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Operate</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/Operate.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/opearte&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Operate</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>8 App.vue中通过路由切换组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/opearte&quot;</span>&gt;</span>显示操作页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>显示展示页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 9 启动测试</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="Pinia其他细节"><a href="#Pinia其他细节" class="headerlink" title="Pinia其他细节"></a>Pinia其他细节</h3><blockquote><p> State (状态) 在大多数情况下，state 都是你的 store的核心。人们通常会先定义能代表他们 APP的 state。在 Pinia 中，state 被定义为一个返回初始状态的函数。</p></blockquote><ul><li>store.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(<span class="string">&#x27;personPinia&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;</span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123;</span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Operate.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hobby = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">addHobby</span>= (<span class="params"></span>)=&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(hobby.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">hobbies</span>.<span class="title function_">push</span>(hobby.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听状态</span></span></span><br><span class="line"><span class="language-javascript">    person.$subscribe(<span class="function">(<span class="params">mutation,state</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---subscribe---&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        mutation.storeId</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            person.$id一样</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        mutation.payload</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            传递给 cartStore.$patch()的补丁对象。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        state 数据状态,其实是一个代理</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">payload</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">storeId</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">$id</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数据 其实是一个代理对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(state)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;addHobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">person:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> 2 Getter 完全等同于 store的 state的<a href="https://cn.vuejs.org/guide/essentials/computed.html" title="计算值">计算值</a>。可以通过 <code>defineStore()</code> 中的 <code>getters</code> 属性来定义它们。<strong>推荐</strong>使用箭头函数，并且它将接收 <code>state</code> 作为第一个参数：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p> 3  Action 相当于组件中的 <a href="https://v3.vuejs.org/guide/data-methods.html#methods" title="method">method</a>。它们可以通过 <code>defineStore()</code> 中的 <code>actions</code> 属性来定义，<strong>并且它们也是定义业务逻辑的完美选择。</strong>类似 <a href="https://pinia.vuejs.org/zh/core-concepts/getters.html" title="getter">getter</a>，action 也可通过 <code>this</code> 访问<strong>整个 store 实例</strong>，并支持**完整的类型标注(以及自动补全)**。不同的是，<code>action</code> 可以是异步的，你可以在它们里面 <code>await</code> 调用任何 API，以及其他 action！</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Element-plus组件库"><a href="#Element-plus组件库" class="headerlink" title="Element-plus组件库"></a>Element-plus组件库</h2><h3 id="Element-plus介绍"><a href="#Element-plus介绍" class="headerlink" title="Element-plus介绍"></a>Element-plus介绍</h3><blockquote><p>Element Plus 是一套基于 Vue 3的开源 UI 组件库，是由饿了么前端团队开发的升级版本 Element UI。Element Plus 提供了丰富的 UI 组件、易于使用的 API 接口和灵活的主题定制功能，可以帮助开发者快速构建高质量的 Web 应用程序。</p></blockquote><ul><li><p>Element Plus 支持按需加载，且不依赖于任何第三方 CSS 库，它可以轻松地集成到任何 Vue.js 项目中。Element Plus的文档十分清晰，提供了各种组件的使用方法和示例代码，方便开发者快速上手。</p></li><li><p>Element Plus 目前已经推出了大量的常用 UI 组件，如按钮、表单、表格、对话框、选项卡等，此外还提供了一些高级组件，如日期选择器、时间选择器、级联选择器、滑块、颜色选择器等。这些组件具有一致的设计和可靠的代码质量，可以为开发者提供稳定的使用体验。</p></li><li><p>与 Element UI 相比，Element Plus 采用了现代化的技术架构和更加先进的设计理念，同时具备更好的性能和更好的兼容性。Element Plus的更新迭代也更加频繁，可以为开发者提供更好的使用体验和更多的功能特性。</p></li><li><p>Element Plus 可以在支持 <a href="https://caniuse.com/?feats=mdn-javascript_builtins_regexp_dotall,mdn-javascript_builtins_regexp_lookbehind_assertion,mdn-javascript_builtins_regexp_named_capture_groups,mdn-javascript_builtins_regexp_property_escapes,mdn-javascript_builtins_symbol_asynciterator,mdn-javascript_functions_method_definitions_async_generator_methods,mdn-javascript_grammar_template_literals_template_literal_revision,mdn-javascript_operators_destructuring_rest_in_objects,mdn-javascript_operators_spread_spread_in_destructuring,promise-finally" title="ES2018">ES2018</a> 和 <a href="https://caniuse.com/resizeobserver" title="ResizeObserver">ResizeObserver</a>的浏览器上运行。 如果您确实需要支持旧版本的浏览器，请自行添加 <a href="https://babeljs.io/" title="Babel">Babel</a> 和相应的 Polyfill </p></li><li><p>官网<a href="https://element-plus.gitee.io/zh-CN/">https://element-plus.gitee.io/zh-CN/</a></p></li><li><p>由于 Vue 3 不再支持 IE11，Element Plus 也不再支持 IE 浏览器。</p></li></ul><p><img src="/img/images/image_rdwmpig76n.png"></p><h3 id="Element-plus入门案例"><a href="#Element-plus入门案例" class="headerlink" title="Element-plus入门案例"></a>Element-plus入门案例</h3><blockquote><p> 1 准备vite项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm create vite  // 注意选择 vue+typeScript</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@4 --save</span><br><span class="line">npm install pinia</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><blockquote><p> 2 安装element-plus</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><blockquote><p>3 完整引入element-plus</p></blockquote><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入element-plus相关内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 4 入门案例</p></blockquote><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接使用element-plus组件即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;large&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span> <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">active-text</span>=<span class="string">&quot;Open&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">inactive-text</span>=<span class="string">&quot;Close&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>5 启动测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="Element-plus常用组件"><a href="#Element-plus常用组件" class="headerlink" title="Element-plus常用组件"></a>Element-plus常用组件</h3><p><a href="https://element-plus.gitee.io/zh-CN/component/button.html">https://element-plus.gitee.io/zh-CN/component/button.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 会话-过滤器-监听器</title>
      <link href="/2024/11/10/1%E4%BC%9A%E8%AF%9D%20%E8%BF%87%E6%BB%A4%E5%99%A8%20%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2024/11/10/1%E4%BC%9A%E8%AF%9D%20%E8%BF%87%E6%BB%A4%E5%99%A8%20%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="会话管理概述"><a href="#会话管理概述" class="headerlink" title="会话管理概述"></a>会话管理概述</h3><h4 id="为什么需要会话管理"><a href="#为什么需要会话管理" class="headerlink" title="为什么需要会话管理"></a>为什么需要会话管理</h4><blockquote><p>HTTP是无状态协议</p></blockquote><ul><li>无状态就是不保存状态,即无状态协议(stateless),HTTP协议自身不对请求和响应之间的通信状态进行保存,也就是说,在HTTP协议这个级别,协议对于发送过的请求或者响应都不做持久化处理</li><li>简单理解:浏览器发送请求,服务器接收并响应,但是服务器不记录请求是否来自哪个浏览器,服务器没记录浏览器的特征,就是客户端的状态</li></ul><blockquote><p>举例: 张三去一家饭馆点了几道菜,觉得味道不错,第二天又去了,对老板说,还点上次的那几道菜</p></blockquote><ul><li>无状态: 老板没有记录张三是否来过,更没有记录上次他点了那些菜,张三只能重新再点一遍</li><li>有状态: 老板把每次来吃饭的用户都做好记录,查阅一下之前的记录,查到了张三之前的菜单,直接下单</li></ul><h4 id="1-1-2-会话管理实现的手段"><a href="#1-1-2-会话管理实现的手段" class="headerlink" title="1.1.2 会话管理实现的手段"></a>1.1.2 会话管理实现的手段</h4><blockquote><p>Cookie和Session配合解决</p></blockquote><ul><li>cookie是在客户端保留少量数据的技术,主要通过响应头向客户端响应一些客户端要保留的信息</li><li>session是在服务端保留更多数据的技术,主要通过HttpSession对象保存一些和客户端相关的信息</li><li>cookie和session配合记录请求状态</li></ul><blockquote><p>举例: 张三去银行办业务</p></blockquote><ul><li>张三第一次去某个银行办业务,银行会为张三开户(Session),并向张三发放一张银行卡(cookie)</li><li>张三后面每次去银行,就可以携带之间的银行卡(cookie),银行根据银行卡找到之前张三的账户(session)</li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><h4 id="Cookie概述"><a href="#Cookie概述" class="headerlink" title="Cookie概述"></a>Cookie概述</h4><blockquote><p>cookie是一种客户端会话技术,cookie由服务端产生,它是服务器存放在浏览器的一小份数据,浏览器以后每次访问该服务器的时候都会将这小份数据携带到服务器去。</p></blockquote><ul><li>服务端创建cookie,将cookie放入响应对象中,Tomcat容器将cookie转化为set-cookie响应头,响应给客户端</li><li>客户端在收到cookie的响应头时,在下次请求该服务的资源时,会以cookie请求头的形式携带之前收到的Cookie</li><li>cookie是一种键值对格式的数据,从tomcat8.5开始可以保存中文,但是不推荐</li><li>由于cookie是存储于客户端的数据,比较容易暴露,一般不存储一些敏感或者影响安全的数据</li></ul><blockquote><p>原理图</p></blockquote><p><img src="/img/images/1682411089082.png" alt="1682411089082"></p><blockquote><p>应用场景举例</p></blockquote><ol><li><p>记录用户名</p><p> 当我们在用户名的输入框中输入完用户名后,浏览器记录用户名,下一次再访问登录页面时,用户名自动填充到用户名的输入框.</p></li><li><p>保存电影播放进度</p><p> 在网页上播放电影的时候,如果中途退出浏览器了,下载再打开浏览器播放同一部电影的时候,会自动跳转到上次退出时候的进度,因为在播放的时候会将播放进度保存到cookie中</p></li></ol><h4 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用"></a>Cookie的使用</h4><blockquote><p>servletA向响应中增加Cookie</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/images/1682411522695.png" alt="1682411522695" style="zoom:80%;" /><blockquote><p>servletB从请求中读取Cookie</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求中的cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//迭代cookies数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies &amp;&amp; cookies.length!= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName()+<span class="string">&quot;:&quot;</span>+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/images/1682411757748.png" alt="1682411757748" style="zoom:67%;" /><h4 id="Cookie的时效性"><a href="#Cookie的时效性" class="headerlink" title="Cookie的时效性"></a>Cookie的时效性</h4><blockquote><p>默认情况下Cookie的有效期是一次会话范围内，我们可以通过cookie的setMaxAge()方法让Cookie持久化保存到浏览器上</p></blockquote><ul><li>会话级Cookie<ul><li>服务器端并没有明确指定Cookie的存在时间</li><li>在浏览器端，Cookie数据存在于内存中</li><li>只要浏览器还开着，Cookie数据就一直都在</li><li>浏览器关闭，内存中的Cookie数据就会被释放</li></ul></li><li>持久化Cookie<ul><li>服务器端明确设置了Cookie的存在时间</li><li>在浏览器端，Cookie数据会被保存到硬盘上</li><li>Cookie在硬盘上存在的时间根据服务器端限定的时间来管控，不受浏览器关闭的影响</li><li>持久化Cookie到达了预设的时间会被释放</li></ul></li></ul><blockquote><p>cookie.setMaxAge(int expiry)参数单位是秒，表示cookie的持久化时间，如果设置参数为0，表示将浏览器中保存的该cookie删除</p></blockquote><ul><li>servletA设置一个Cookie为持久化cookie</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        cookie1.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/images/1682470547651.png" alt="1682470547651" style="zoom: 67%;" /><ul><li>servletB接收Cookie,浏览器中间发生一次重启再请求servletB测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求中的cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//迭代cookies数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != cookies &amp;&amp; cookies.length!= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName()+<span class="string">&quot;:&quot;</span>+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/images/1682470652577.png" alt="1682470652577" style="zoom: 70%;" /><h4 id="Cookie的提交路径"><a href="#Cookie的提交路径" class="headerlink" title="Cookie的提交路径"></a>Cookie的提交路径</h4><blockquote><p>访问互联网资源时不能每次都需要把所有Cookie带上。访问不同的资源时,可以携带不同的cookie,我们可以通过cookie的setPath(String path) 对cookie的路径进行设置</p></blockquote><ul><li>从ServletA中获取cookie</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;c1_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置cookie的提交路径</span></span><br><span class="line">        cookie1.setPath(<span class="string">&quot;/web03_war_exploded/servletB&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c2&quot;</span>,<span class="string">&quot;c2_message&quot;</span>);</span><br><span class="line">        <span class="comment">// 将cookie放入响应对象</span></span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/img/images/1682471183183.png" alt="1682471183183" style="zoom:80%;" /><ul><li>向ServletB请求时携带携带了 c1</li></ul><img src="/img/images/1682471232199.png" alt="1682471232199" style="zoom:95%;" /><ul><li>向其他资源请求时就不携带c1了</li></ul><img src="/img/images/1682471342313.png" alt="1682471342313" style="zoom:80%;" /><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h4 id="HttpSession概述"><a href="#HttpSession概述" class="headerlink" title="HttpSession概述"></a>HttpSession概述</h4><blockquote><p> HttpSession是一种保留更多信息在服务端的一种技术,服务器会为每一个客户端开辟一块内存空间,即session对象. 客户端在发送请求时,都可以使用自己的session. 这样服务端就可以通过session来记录某个客户端的状态了</p></blockquote><ul><li>服务端在为客户端创建session时,会同时将session对象的id,即JSESSIONID以cookie的形式放入响应对象</li><li>后端创建完session后,客户端会收到一个特殊的cookie,叫做JSESSIONID</li><li>客户端下一次请求时携带JSESSIONID,后端收到后,根据JSESSIONID找到对应的session对象</li><li>通过该机制,服务端通过session就可以存储一些专门针对某个客户端的信息了</li><li>session也是域对象(后续详细讲解)</li></ul><blockquote><p>原理图如下</p></blockquote><p><img src="/img/images/1682413051408.png" alt="1682413051408"></p><blockquote><p>应用场景</p></blockquote><ol><li><p>记录用户的登录状态</p><p> 用户登录后,将用户的账号等敏感信息存入session</p></li><li><p>记录用户操作的历史</p><p> 例如记录用户的访问痕迹,用户的购物车信息等临时性的信息</p></li></ol><h4 id="HttpSession的使用"><a href="#HttpSession的使用" class="headerlink" title="HttpSession的使用"></a>HttpSession的使用</h4><blockquote><p>用户提交form表单到ServletA,携带用户名,ServletA获取session 将用户名存到Session,用户再请求其他任意Servlet,获取之间存储的用户</p></blockquote><ul><li>定义表单页,提交用户名,提交后</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;servletA&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义ServletA,将用户名存入session</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">         <span class="comment">// 获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jSessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(jSessionId);</span><br><span class="line">        <span class="comment">// 判断session是不是新创建的session</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line">        System.out.println(isNew);</span><br><span class="line">        <span class="comment">// 向session对象中存入数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应中收到了一个JSESSIONID的cookie</li></ul><img src="/img/images/1682476311432.png" alt="1682476311432" style="zoom:80%;" /><ul><li>定义其他Servlet,从session中读取用户名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">         <span class="comment">// 获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jSessionId</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(jSessionId);</span><br><span class="line">        <span class="comment">// 判断session是不是新创建的session</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line">        System.out.println(isNew);</span><br><span class="line">        <span class="comment">// 从session中取出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String)session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求中携带了一个JSESSIONID的cookie</li></ul><img src="/img/images/1682476350602.png" alt="1682476350602" style="zoom:80%;" /><blockquote><p>getSession方法的处理逻辑</p></blockquote><img src="/img/images/1682477914654.png" alt="1682477914654" style="zoom: 80%;" /><h4 id="HttpSession时效性"><a href="#HttpSession时效性" class="headerlink" title="HttpSession时效性"></a>HttpSession时效性</h4><blockquote><p>为什么要设置session的时效</p></blockquote><ul><li>用户量很大之后，Session对象相应的也要创建很多。如果一味创建不释放，那么服务器端的内存迟早要被耗尽。</li><li>客户端关闭行为无法被服务端直接侦测,或者客户端较长时间不操作也经常出现,类似这些的情况,就需要对session的时限进行设置了</li></ul><blockquote><p>默认的session最大闲置时间(两次使用同一个session中的间隔时间) 在tomcat&#x2F;conf&#x2F;web.xml配置为30分钟</p></blockquote><p><img src="/img/images/1682478412527.png" alt="1682478412527"></p><blockquote><p>我们可以自己在当前项目的web.xml对最大闲置时间进行重新设定</p></blockquote><p><img src="/img/images/1682478633650.png" alt="1682478633650"></p><blockquote><p>也可以通过HttpSession的API 对最大闲置时间进行设定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置最大闲置时间</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">60</span>);</span><br></pre></td></tr></table></figure><blockquote><p>也可以直接让session失效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接让session失效</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><h3 id="三大域对象"><a href="#三大域对象" class="headerlink" title="三大域对象"></a>三大域对象</h3><h4 id="域对象概述"><a href="#域对象概述" class="headerlink" title="域对象概述"></a>域对象概述</h4><blockquote><p>域对象: 一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</p></blockquote><ul><li>web项目中,我们一定要熟练使用的域对象分别是 请求域,会话域,应用域</li><li>请求域对象是HttpServletRequest ,传递数据的范围是一次请求之内及请求转发</li><li>会话域对象是HttpSession,传递数据的范围是一次会话之内,可以跨多个请求</li><li>应用域对象是ServletContext,传递数据的范围是本应用之内,可以跨多个会话</li></ul><blockquote><p>生活举例: 热水器摆放位置不同,使用的范围就不同</p></blockquote><ol><li>摆在张三工位下,就只有张三一个人能用</li><li>摆在办公室的公共区,办公室内的所有人都可以用</li><li>摆在楼层的走廊区,该楼层的所有人都可以用</li></ol><blockquote><p>三大域对象的数据作用范围图解</p></blockquote><ul><li>请求域</li></ul><img src="/img/images/1682480592506.png" alt="1682480592506" style="zoom: 60%;" /><ul><li>会话域</li></ul><img src="/img/images/1682480716152.png" alt="1682480716152" style="zoom:60%;" /><ul><li>应用域</li></ul><img src="/img/images/1682480913847.png" alt="1682480913847" style="zoom:60%;" /><ul><li>所有域在一起</li></ul><img src="/img/images/1682488186891.png" alt="1682488186891" style="zoom:60%;" /><h4 id="域对象的使用"><a href="#域对象的使用" class="headerlink" title="域对象的使用"></a>域对象的使用</h4><blockquote><p>域对象的API</p></blockquote><table><thead><tr><th>API</th><th>功能</th></tr></thead><tbody><tr><td>void setAttribute(String name,String value)</td><td>向域对象中添加&#x2F;修改数据</td></tr><tr><td>Object getAttribute(String name);</td><td>从域对象中获取数据</td></tr><tr><td>removeAttribute(String name);</td><td>移除域对象中的数据</td></tr></tbody></table><blockquote><p>API测试</p></blockquote><ul><li>ServletA向三大域中放入数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向请求域中放入数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;request&quot;</span>,<span class="string">&quot;request-message&quot;</span>);</span><br><span class="line">        <span class="comment">//req.getRequestDispatcher(&quot;servletB&quot;).forward(req,resp);</span></span><br><span class="line">        <span class="comment">// 向会话域中放入数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;session&quot;</span>,<span class="string">&quot;session-message&quot;</span>);</span><br><span class="line">        <span class="comment">// 向应用域中放入数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">&quot;application&quot;</span>,<span class="string">&quot;application-message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ServletB从三大于中取出数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 从请求域中获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span>(String)req.getAttribute(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从会话域中获取数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionMessage</span> <span class="operator">=</span>(String)session.getAttribute(<span class="string">&quot;session&quot;</span>);</span><br><span class="line">        System.out.println(sessionMessage);</span><br><span class="line">        <span class="comment">// 从应用域中获取数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">applicationMessage</span> <span class="operator">=</span>(String)application.getAttribute(<span class="string">&quot;application&quot;</span>);</span><br><span class="line">        System.out.println(applicationMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求转发时,请求域可以传递数据<code>请求域内一般放本次请求业务有关的数据,如:查询到的所有的部门信息</code></li><li>同一个会话内,不用请求转发,会话域可以传递数据<code>会话域内一般放本次会话的客户端有关的数据,如:当前客户端登录的用户</code> </li><li>同一个APP内,不同的客户端,应用域可以传递数据<code>应用域内一般放本程序应用有关的数据 如:Spring框架的IOC容器</code></li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="过滤器概述"><a href="#过滤器概述" class="headerlink" title="过滤器概述"></a>过滤器概述</h3><blockquote><p>Filter,即过滤器,是JAVAEE技术规范之一,作用目标资源的请求进行过滤的一套技术规范,是Java Web项目中<code>最为实用的技术之一</code></p></blockquote><ul><li>Filter接口定义了过滤器的开发规范,所有的过滤器都要实现该接口</li><li>Filter的工作位置是项目中所有目标资源之前,容器在创建HttpServletRequest和HttpServletResponse对象后,会先调用Filter的doFilter方法</li><li>Filter的doFilter方法可以控制请求是否继续,如果放行,则请求继续,如果拒绝,则请求到此为止,由过滤器本身做出响应</li><li>Filter不仅可以对请求做出过滤,也可以在目标资源做出响应前,对响应再次进行处理</li><li>Filter是GOF中责任链模式的典型案例</li><li>Filter的常用应用包括但不限于: 登录权限检查,解决网站乱码,过滤敏感字符,日志记录,性能分析… …</li></ul><blockquote><p>生活举例: 公司前台,停车场安保,地铁验票闸机</p></blockquote><ul><li>公司前台对来访人员进行审核,如果是游客则拒绝进入公司,如果是客户则放行 . 客户离开时提醒客户不要遗忘物品</li><li>停车场保安对来访车辆进行控制,如果没有车位拒绝进入,如果有车位,发放停车卡并放行,车辆离开时收取请车费</li><li>地铁验票闸机在人员进入之前检查票,没票拒绝进入,有票验票后放行,人员离开时同样验票</li></ul><blockquote><p>过滤器开发中应用的场景</p></blockquote><ul><li>日志的记录</li><li>性能的分析</li><li>乱码的处理</li><li>事务的控制</li><li>登录的控制</li><li>跨域的处理</li><li>… …</li></ul><blockquote><p>过滤器工作位置图解</p></blockquote><p><img src="/img/images/1682494494396.png" alt="1682494494396"></p><blockquote><p>Filter接口API</p></blockquote><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>API目标</li></ul><table><thead><tr><th>API</th><th>目标</th></tr></thead><tbody><tr><td>default public void init(FilterConfig filterConfig)</td><td>初始化方法,由容器调用并传入初始配置信息filterConfig对象</td></tr><tr><td>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</td><td>过滤方法,核心方法,过滤请求,决定是否放行,响应之前的其他处理等都在该方法中</td></tr><tr><td>default public void destroy()</td><td>销毁方法,容器在回收过滤器对象之前调用的方法</td></tr></tbody></table><h3 id="过滤器使用"><a href="#过滤器使用" class="headerlink" title="过滤器使用"></a>过滤器使用</h3><blockquote><p>目标:开发一个日志记录过滤器</p></blockquote><ul><li>用户请求到达目标资源之前,记录用户的请求资源路径</li><li>响应之前记录本次请求目标资源运算的耗时</li><li>可以选择将日志记录进入文件,为了方便测试,这里将日志直接在控制台打印</li></ul><blockquote><p> 定义一个过滤器类,编写功能代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 参数父转子</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span>(HttpServletRequest)  servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span>  <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse)  servletResponse;</span><br><span class="line">        <span class="comment">// 拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">beforeLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;被请求了&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(beforeLogging);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 放行请求</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//  拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">afterLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;的请求耗时:&quot;</span>+(t2-t1)+<span class="string">&quot;毫秒&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(afterLogging);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>doFilter方法中的请求和响应对象是以父接口的形式声明的,实际传入的实参就是HttpServletRequest和HttpServletResponse子接口级别的,可以安全强转</li><li>filterChain.doFilter(request,response); 这行代码的功能是放行请求,如果没有这一行代码,则请求到此为止</li><li>filterChain.doFilter(request,response);在放行时需要传入request和response,意味着请求和响应对象要继续传递给后续的资源,这里没有产生新的request和response对象</li></ul></li></ul><blockquote><p>定义两个Servlet作为目标资源</p></blockquote><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理器请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servletA处理请求的方法,耗时10毫秒&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟处理请求耗时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理器请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servletB处理请求的方法,耗时15毫秒&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟处理请求耗时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配置过滤器以及过滤器的过滤范围</p></blockquote><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置filter,并为filter起别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.LoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为别名对应的filter配置要过滤的目标资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过映射路径确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletA<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过后缀名确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过servlet别名确定过滤资源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletBName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明</p><ul><li>filter-mapping标签中定义了过滤器对那些资源进行过滤</li><li>子标签url-pattern通过映射路径确定过滤范围<ul><li>&#x2F;servletA  精确匹配,表示对servletA资源的请求进行过滤</li><li>*.html 表示对以.action结尾的路径进行过滤</li><li>&#x2F;* 表示对所有资源进行过滤</li><li>一个filter-mapping下可以配置多个url-pattern</li></ul></li><li>子标签servlet-name通过servlet别名确定对那些servlet进行过滤<ul><li>使用该标签确定目标资源的前提是servlet已经起了别名</li><li>一个filter-mapping下可以定义多个servlet-name</li><li>一个filter-mapping下,servlet-name和url-pattern子标签可以同时存在</li></ul></li></ul></li></ul><blockquote><p>过滤过程图解</p></blockquote><p><img src="/img/images/1682496991032.png" alt="1682496991032"></p><h3 id="过滤器生命周期"><a href="#过滤器生命周期" class="headerlink" title="过滤器生命周期"></a>过滤器生命周期</h3><blockquote><p>过滤器作为web项目的组件之一,和Servlet的生命周期类似,略有不同,没有servlet的load-on-startup的配置,默认就是系统启动立刻构造</p></blockquote><table><thead><tr><th>阶段</th><th>对应方法</th><th>执行时机</th><th>执行次数</th></tr></thead><tbody><tr><td>创建对象</td><td>构造器</td><td>web应用启动时</td><td>1</td></tr><tr><td>初始化方法</td><td>void init(FilterConfig filterConfig)</td><td>构造完毕</td><td>1</td></tr><tr><td>过滤请求</td><td>void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</td><td>每次请求</td><td>多次</td></tr><tr><td>销毁</td><td>default void destroy()</td><td>web应用关闭时</td><td>1次</td></tr></tbody></table><blockquote><p>测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LifeCycleFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LifeCycleFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter constructor method invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter init method invoked&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter doFilter method invoked&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LifeCycleFilter destory method invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="过滤器链的使用"><a href="#过滤器链的使用" class="headerlink" title="过滤器链的使用"></a>过滤器链的使用</h3><blockquote><p>一个web项目中,可以同时定义多个过滤器,多个过滤器对同一个资源进行过滤时,工作位置有先后,整体形成一个工作链,称之为过滤器链</p></blockquote><ul><li>过滤器链中的过滤器的顺序由filter-mapping顺序决定</li><li>每个过滤器过滤的范围不同,针对同一个资源来说,过滤器链中的过滤器个数可能是不同的</li><li>如果某个Filter是使用ServletName进行匹配规则的配置，那么这个Filter执行的优先级要更低</li></ul><blockquote><p>图解过滤器链</p></blockquote><p><img src="/img/images/1682556566084.png" alt="1682556566084"></p><blockquote><p>过滤器链功能测试</p></blockquote><ul><li><p>定义三个过滤器,对目标资源Servlet的请求进行过滤</p></li><li><p>目标Servlet资源代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletC&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletC</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletC service method  invoked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>三个过滤器代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter2 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter2 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter3</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter3 before chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;filter3 after  chain.doFilter code invoked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器配置代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.Filter3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--filter-mapping的顺序决定了过滤器的工作顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletC<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>工作流程图解</p></blockquote><p><img src="/img/images/1682497251883.png" alt="1682497251883"></p><h3 id="注解方式配置过滤器"><a href="#注解方式配置过滤器" class="headerlink" title="注解方式配置过滤器"></a>注解方式配置过滤器</h3><blockquote><p>@WebFilter注解的使用</p></blockquote><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebFilter &#123;</span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">filterName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] servletNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    DispatcherType[] dispatcherTypes() <span class="keyword">default</span> &#123;DispatcherType.REQUEST&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>一个比较完整的Filter的XML配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置filter,并为filter起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filters.LoggingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置filter的初始参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dateTimePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为别名对应的filter配置要过滤的目标资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>loggingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过映射路径确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletA<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过后缀名确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过servlet别名确定过滤资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletBName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将xml配置转换成注解方式实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.filters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(</span></span><br><span class="line"><span class="meta">        filterName = &quot;loggingFilter&quot;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name=&quot;dateTimePattern&quot;,value=&quot;yyyy-MM-dd HH:mm:ss&quot;)&#125;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/servletA&quot;,&quot;*.html&quot;&#125;,</span></span><br><span class="line"><span class="meta">        servletNames = &#123;&quot;servletBName&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat dateFormat ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*init初始化方法,通过filterConfig获取初始化参数</span></span><br><span class="line"><span class="comment">    * init方法中,可以用于定义一些其他初始化功能代码</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 获取初始参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateTimePattern</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;dateTimePattern&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化成员变量</span></span><br><span class="line">        dateFormat=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateTimePattern);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 参数父转子</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span>(HttpServletRequest)  servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span>  <span class="variable">response</span> <span class="operator">=</span>(HttpServletResponse)  servletResponse;</span><br><span class="line">        <span class="comment">// 拼接日志文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">beforeLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;被请求了&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(beforeLogging);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 放行请求</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">        <span class="comment">// 获取系统时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">afterLogging</span> <span class="operator">=</span>requestURI+<span class="string">&quot;在&quot;</span>+time+<span class="string">&quot;的请求耗时:&quot;</span>+(t2-t1)+<span class="string">&quot;毫秒&quot;</span>;</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        System.out.println(afterLogging);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h3 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h3><blockquote><p>监听器：专门用于对域对象对象身上发生的事件或状态改变进行监听和相应处理的对象</p></blockquote><ul><li><p>监听器是GOF设计模式中,观察者模式的典型案例</p></li><li><p>观察者模式: 当被观察的对象发生某些改变时, 观察者自动采取对应的行动的一种设计模式</p></li><li><p>监听器使用的感受类似JS中的事件,被观察的对象发生某些情况时,自动触发代码的执行</p></li><li><p>监听器并不监听web项目中的所有组件,仅仅是对三大域对象做相关的事件监听</p></li></ul><blockquote><p>监听器的分类</p></blockquote><ul><li><p>web中定义八个监听器接口作为监听器的规范,这八个接口按照不同的标准可以形成不同的分类</p></li><li><p>按监听的对象划分</p><ul><li>application域监听器 ServletContextListener  ServletContextAttributeListener </li><li>session域监听器 HttpSessionListener  HttpSessionAttributeListener  HttpSessionBindingListener  HttpSessionActivationListener  </li><li>request域监听器 ServletRequestListener  ServletRequestAttributeListener</li></ul></li><li><p>按监听的事件分</p><ul><li>域对象的创建和销毁监听器 ServletContextListener   HttpSessionListener   ServletRequestListener  </li><li>域对象数据增删改事件监听器 ServletContextAttributeListener  HttpSessionAttributeListener   ServletRequestAttributeListener </li><li>其他监听器  HttpSessionBindingListener  HttpSessionActivationListener</li></ul></li></ul><h3 id="监听器的六个主要接口"><a href="#监听器的六个主要接口" class="headerlink" title="监听器的六个主要接口"></a>监听器的六个主要接口</h3><h4 id="application域监听器"><a href="#application域监听器" class="headerlink" title="application域监听器"></a>application域监听器</h4><blockquote><p>ServletContextListener  监听ServletContext对象的创建与销毁</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized(ServletContextEvent sce)</td><td>ServletContext创建时调用</td></tr><tr><td>contextDestroyed(ServletContextEvent sce)</td><td>ServletContext销毁时调用</td></tr></tbody></table><ul><li>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</li></ul><blockquote><p>ServletContextAttributeListener 监听ServletContext中属性的添加、移除和修改</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletContextAttributeEvent scab)</td><td>向ServletContext中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletContextAttributeEvent scab)</td><td>从ServletContext中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletContextAttributeEvent scab)</td><td>当ServletContext中的属性被修改时调用</td></tr></tbody></table><ul><li>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr></tbody></table><blockquote><p>测试代码</p></blockquote><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> , ServletContextAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> scae.getValue();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> scae.getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> application.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;application&quot;</span>+application.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServletA用于向application域中放入数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向application域中放入数据</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        application.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ServletB用于向application域中修改和移除数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">appliation</span>  <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">//  修改application域中的数据</span></span><br><span class="line">        appliation.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除application域中的数据</span></span><br><span class="line">        appliation.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="session域监听器"><a href="#session域监听器" class="headerlink" title="session域监听器"></a>session域监听器</h4><blockquote><p>HttpSessionListener  监听HttpSession对象的创建与销毁</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionCreated(HttpSessionEvent hse)</td><td>HttpSession对象创建时调用</td></tr><tr><td>sessionDestroyed(HttpSessionEvent hse)</td><td>HttpSession对象销毁时调用</td></tr></tbody></table><ul><li>HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。</li></ul><blockquote><p>HttpSessionAttributeListener 监听HttpSession中属性的添加、移除和修改</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(HttpSessionBindingEvent se)</td><td>向HttpSession中添加属性时调用</td></tr><tr><td>attributeRemoved(HttpSessionBindingEvent se)</td><td>从HttpSession中移除属性时调用</td></tr><tr><td>attributeReplaced(HttpSessionBindingEvent se)</td><td>当HttpSession中的属性被修改时调用</td></tr></tbody></table><ul><li>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><blockquote><p>测试代码</p></blockquote><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span>, HttpSessionAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听session创建</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; created&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听session销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> se.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> se.getValue();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> session.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;session&quot;</span>+session.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// servletA用于创建session并向session中放数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建session,并向session中放入数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// servletB用于修改删除session中的数据并手动让session不可用</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//  修改session域中的数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除session域中的数据</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动让session不可用</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="request域监听器"><a href="#request域监听器" class="headerlink" title="request域监听器"></a>request域监听器</h4><blockquote><p>ServletRequestListener 监听ServletRequest对象的创建与销毁</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>requestInitialized(ServletRequestEvent sre)</td><td>ServletRequest对象创建时调用</td></tr><tr><td>requestDestroyed(ServletRequestEvent sre)</td><td>ServletRequest对象销毁时调用</td></tr></tbody></table><ul><li>ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。</li></ul><blockquote><p>ServletRequestAttributeListener 监听ServletRequest中属性的添加、移除和修改</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletRequestAttributeEvent srae)</td><td>向ServletRequest中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletRequestAttributeEvent srae)</td><td>从ServletRequest中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletRequestAttributeEvent srae)</td><td>当ServletRequest中的属性被修改时调用</td></tr></tbody></table><ul><li>ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletRequest ()</td><td>获取触发事件的ServletRequest对象</td></tr></tbody></table><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> , ServletRequestAttributeListener &#123;</span><br><span class="line">    <span class="comment">// 监听初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; destoryed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听数据增加</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; add:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听数据移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; remove:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> srae.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> srae.getValue();</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> srae.getServletRequest();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> request.getAttribute(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;request&quot;</span>+request.hashCode()+<span class="string">&quot; change:&quot;</span>+name+<span class="string">&quot;=&quot;</span>+value+<span class="string">&quot; to &quot;</span>+newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  servletA向请求域中放数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 向request中增加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// servletB修改删除域中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  修改request域中的数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//  删除session域中的数据</span></span><br><span class="line">        req.removeAttribute(<span class="string">&quot;k2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="session域的两个特殊监听器"><a href="#session域的两个特殊监听器" class="headerlink" title="session域的两个特殊监听器"></a>session域的两个特殊监听器</h3><h4 id="session绑定监听器"><a href="#session绑定监听器" class="headerlink" title="session绑定监听器"></a>session绑定监听器</h4><blockquote><p>HttpSessionBindingListener 监听当前监听器对象在Session域中的增加与移除</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>valueBound(HttpSessionBindingEvent event)</td><td>该类的实例被放到Session域中时调用</td></tr><tr><td>valueUnbound(HttpSessionBindingEvent event)</td><td>该类的实例从Session中移除时调用</td></tr></tbody></table><ul><li>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取当前事件涉及的属性名</td></tr><tr><td>getValue()</td><td>获取当前事件涉及的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><blockquote><p>测试代码</p></blockquote><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionBindingListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionBindingListener</span>  <span class="keyword">implements</span> <span class="title class_">HttpSessionBindingListener</span> &#123;</span><br><span class="line">    <span class="comment">//  监听绑定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> event.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;MySessionBindingListener&quot;</span>+<span class="built_in">this</span>.hashCode()+<span class="string">&quot; binding into session&quot;</span>+session.hashCode()+<span class="string">&quot; with name &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听解除绑定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> event.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> event.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;MySessionBindingListener&quot;</span>+<span class="built_in">this</span>.hashCode()+<span class="string">&quot; unbond outof session&quot;</span>+session.hashCode()+<span class="string">&quot; with name &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 绑定监听器</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;bindingListener&quot;</span>,<span class="keyword">new</span> <span class="title class_">MySessionBindingListener</span>());</span><br><span class="line">        <span class="comment">// 解除绑定监听器</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;bindingListener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="钝化活化监听器"><a href="#钝化活化监听器" class="headerlink" title="钝化活化监听器"></a>钝化活化监听器</h4><blockquote><p>HttpSessionActivationListener  监听某个对象在Session中的序列化与反序列化。</p></blockquote><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionWillPassivate(HttpSessionEvent se)</td><td>该类实例和Session一起钝化到硬盘时调用</td></tr><tr><td>sessionDidActivate(HttpSessionEvent se)</td><td>该类实例和Session一起活化到内存时调用</td></tr></tbody></table><ul><li>HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。</li></ul><blockquote><p>什么是钝化活化</p></blockquote><ul><li>session对象在服务端是以对象的形式存储于内存的,session过多,服务器的内存也是吃不消的</li><li>而且一旦服务器发生重启,所有的session对象都将被清除,也就意味着session中存储的不同客户端的登录状态丢失</li><li>为了分摊内存 压力并且为了保证session重启不丢失,我们可以设置将session进行钝化处理</li><li>在关闭服务器前或者到达了设定时间时,对session进行序列化到磁盘,这种情况叫做session的钝化</li><li>在服务器启动后或者再次获取某个session时,将磁盘上的session进行反序列化到内存,这种情况叫做session的活化</li></ul><blockquote><p>如何配置钝化活化</p></blockquote><ul><li>在web目录下,添加 META-INF下创建Context.xml</li></ul><p><img src="/img/images/1682565824241.png" alt="1682565824241"></p><ul><li>文件中配置钝化</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span> <span class="attr">maxIdleSwap</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;d:\mysession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Store</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>请求servletA,获得session,并存入数据,然后重启服务器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求servletB获取session,获取重启前存入的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletB&quot;, name = &quot;servletBName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">v1</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;k1&quot;</span>);</span><br><span class="line">        System.out.println(v1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何监听钝化活化</p></blockquote><ul><li>定义监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionActivationListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSessionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivationListener</span>  <span class="keyword">implements</span> <span class="title class_">HttpSessionActivationListener</span>, Serializable &#123;</span><br><span class="line">    <span class="comment">//  监听钝化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session with JSESSIONID &quot;</span>+ session.getId()+<span class="string">&quot; will passivate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听活化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        System.out.println(<span class="string">&quot;session with JSESSIONID &quot;</span>+ session.getId()+<span class="string">&quot; did activate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义触发监听器的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servletA&quot;,name = &quot;servletAName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加钝化活化监听器</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;activationListener&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActivationListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h3><ul><li><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行。</p></li><li><p>XMLHttpRequest 只是实现 Ajax的一种方式。</p></li></ul><p><strong>ajax工作原理：</strong></p><p><img src="/img/images/image_bjXPJoLb6a-1690508517199.png"></p><ul><li>简单来说,我们之前发的请求通过类似  form表单标签,a标签 这种方式,现在通过 运行js代码动态决定什么时候发送什么样的请求</li><li>通过运行JS代码发送的请求浏览器可以不用跳转页面 ,我们可以在JS代码中决定是否要跳转页面</li><li>通过运行JS代码发送的请求,接收到返回结果后,我们可以将结果通过dom编程渲染到页面的某些元素上,实现局部更新</li></ul><h3 id="如何实现ajax请求"><a href="#如何实现ajax请求" class="headerlink" title="如何实现ajax请求"></a>如何实现ajax请求</h3><blockquote><p>原生<strong>javascript方式进行ajax(了解):</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置回调函数处理响应结果</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置请求方式和请求的资源路径</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 Servlet</title>
      <link href="/2024/11/10/1Servlet/"/>
      <url>/2024/11/10/1Servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h2><h3 id="动态资源和静态资源"><a href="#动态资源和静态资源" class="headerlink" title="动态资源和静态资源"></a>动态资源和静态资源</h3><blockquote><p>静态资源</p></blockquote><ul><li>无需在程序运行时通过代码运行生成的资源,在程序运行之前就写好的资源. 例如:html css js img ,音频文件和视频文件</li></ul><blockquote><p>动态资源 </p></blockquote><ul><li>需要在程序运行时通过代码运行生成的资源,在程序运行之前无法确定的数据,运行时动态生成,例如Servlet,Thymeleaf … …</li><li>动态资源指的不是视图上的动画效果或者是简单的人机交互效果</li></ul><blockquote><p>生活举例</p></blockquote><ul><li>去蛋糕店买蛋糕<ul><li>直接买柜台上已经做好的  : 静态资源</li><li>和柜员说要求后现场制作  : 动态资源</li></ul></li></ul><h3 id="Servlet简介-1"><a href="#Servlet简介-1" class="headerlink" title="Servlet简介"></a>Servlet简介</h3><blockquote><p>Servlet  (server applet) 是运行在服务端(tomcat)的Java小程序，是sun公司提供一套定义动态资源规范; 从代码层面上来讲Servlet就是一个接口</p></blockquote><ul><li>用来接收、处理客户端请求、响应给浏览器的动态资源。在整个Web应用中，Servlet主要负责接收处理请求、协同调度功能以及响应数据。我们可以把Servlet称为Web应用中的<strong>控制器</strong></li></ul><img src="/img/images/1681544428055.png" alt="1681544428055" style="zoom:50%;" /><ul><li>不是所有的JAVA类都能用于处理客户端请求,能处理客户端请求并做出响应的一套技术标准就是Servlet</li><li>Servlet是运行在服务端的,所以 Servlet必须在WEB项目中开发且在Tomcat这样的服务容器中运行<blockquote><p>请求响应与HttpServletRequest和HttpServletResponse之间的对应关系</p></blockquote></li></ul><p><img src="/img/images/1681699577344.png" alt="1681699577344"></p><h2 id="Servlet开发流程"><a href="#Servlet开发流程" class="headerlink" title="Servlet开发流程"></a>Servlet开发流程</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><blockquote><p>校验注册时,用户名是否被占用. 通过客户端向一个Servlet发送请求,携带username,如果用户名是’atguigu’,则向客户端响应 NO,如果是其他,响应YES</p></blockquote><h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><blockquote><p>步骤1 开发一个web类型的module </p></blockquote><ul><li>过程参照之前</li></ul><blockquote><p>步骤2 开发一个UserServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;atguigu&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//通过响应对象响应信息</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个类,要继承HttpServlet类</li><li>重写service方法,该方法主要就是用于处理用户请求的服务方法</li><li>HttpServletRequest 代表请求对象,是有请求报文经过tomcat转换而来的,通过该对象可以获取请求中的信息</li><li>HttpServletResponse 代表响应对象,该对象会被tomcat转换为响应的报文,通过该对象可以设置响应中的信息</li><li>Servlet对象的生命周期(创建,初始化,处理服务,销毁)是由tomcat管理的,无需我们自己new</li><li>HttpServletRequest HttpServletResponse 两个对象也是有tomcat负责转换,在调用service方法时传入给我们用的</li></ul><blockquote><p>步骤3 在web.xml为UseServlet配置请求的映射路径</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给UserServlet起一个别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>userServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联别名和映射路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>userServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以为一个Servlet匹配多个不同的映射路径,但是不同的Servlet不能使用相同的url-pattern--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/userServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;url-pattern&gt;/userServlet2&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            /        表示通配所有资源,不包括jsp文件</span></span><br><span class="line"><span class="comment">            /*       表示通配所有资源,包括jsp文件</span></span><br><span class="line"><span class="comment">            /a/*     匹配所有以a前缀的映射路径</span></span><br><span class="line"><span class="comment">            *.action 匹配所有以action为后缀的映射路径</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet并不是文件系统中实际存在的文件或者目录,所以为了能够请求到该资源,我们需要为其配置映射路径</li><li>servlet的请求映射路径配置在web.xml中</li><li>servlet-name作为servlet的别名,可以自己随意定义,见名知意就好</li><li>url-pattern标签用于定义Servlet的请求映射路径</li><li>一个servlet可以对应多个不同的url-pattern</li><li>多个servlet不能使用相同的url-pattern</li><li>url-pattern中可以使用一些通配写法<ul><li>&#x2F;        表示通配所有资源,不包括jsp文件</li><li>&#x2F;*      表示通配所有资源,包括jsp文件</li><li>&#x2F;a&#x2F;*     匹配所有以a前缀的映射路径</li><li>*.action 匹配所有以action为后缀的映射路径</li></ul></li></ul><blockquote><p>步骤4 开发一个form表单,向servlet发送一个get请求并携带username参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;userServlet&quot;</span>&gt;</span></span><br><span class="line">        请输入用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;校验&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动项目,访问index.html ,提交表单测试</p></blockquote><ul><li>使用debug模式运行测试</li></ul><img src="/img/images/1681547333799.png" alt="1681547333799"  /><blockquote><p>映射关系图</p></blockquote><p><img src="/img/images/1681550398774.png" alt="1681550398774"></p><h2 id="Servlet注解方式配置"><a href="#Servlet注解方式配置" class="headerlink" title="Servlet注解方式配置"></a>Servlet注解方式配置</h2><h3 id="WebServlet注解源码"><a href="#WebServlet注解源码" class="headerlink" title="@WebServlet注解源码"></a>@WebServlet注解源码</h3><blockquote><p>官方JAVAEEAPI文档下载地址</p></blockquote><ul><li><p><a href="https://www.oracle.com/java/technologies/javaee/javaeetechnologies.html#javaee8">Java EE - Technologies (oracle.com)</a> </p></li><li><p>@WebServlet注解的源码阅读</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> jakarta.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of the servlet</span></span><br><span class="line"><span class="comment">     * 相当于 servlet-name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the name of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     * 如果只配置一个url-pattern ,则通过该属性即可,和urlPatterns属性互斥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     * 如果要配置多个url-pattern ,需要通过该属性,和value属性互斥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the URL patterns of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load-on-startup order of the servlet</span></span><br><span class="line"><span class="comment">     * 配置Servlet是否在项目加载时实例化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the load-on-startup order of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The init parameters of the servlet</span></span><br><span class="line"><span class="comment">     * 配置初始化参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the init parameters of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Declares whether the servlet supports asynchronous operation mode.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the servlet supports asynchronous operation mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> jakarta.servlet.ServletRequest#startAsync</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> jakarta.servlet.ServletRequest#startAsync( jakarta.servlet.ServletRequest,jakarta.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The small-icon of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the small-icon of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The large-icon of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the large-icon of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The description of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the description of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The display name of the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the display name of the servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WebServlet注解使用"><a href="#WebServlet注解使用" class="headerlink" title="@WebServlet注解使用"></a>@WebServlet注解使用</h3><blockquote><p>使用@WebServlet注解替换Servlet配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(</span></span><br><span class="line"><span class="meta">        name = &quot;userServlet&quot;,</span></span><br><span class="line"><span class="meta">        //value = &quot;/user&quot;,</span></span><br><span class="line"><span class="meta">        urlPatterns = &#123;&quot;/userServlet1&quot;,&quot;/userServlet2&quot;,&quot;/userServlet&quot;&#125;,</span></span><br><span class="line"><span class="meta">        initParams = &#123;@WebInitParam(name = &quot;encoding&quot;,value = &quot;UTF-8&quot;)&#125;,</span></span><br><span class="line"><span class="meta">        loadOnStartup = 6</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getServletConfig().getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        System.out.println(encoding);</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;atguigu&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//通过响应对象响应信息</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><h3 id="生命周期简介"><a href="#生命周期简介" class="headerlink" title="生命周期简介"></a>生命周期简介</h3><blockquote><p>什么是Servlet的生命周期</p></blockquote><ul><li>应用程序中的对象不仅在空间上有层次结构的关系，在时间上也会因为处于程序运行过程中的不同阶段而表现出不同状态和不同行为——这就是对象的生命周期。</li><li>简单的叙述生命周期，就是对象在容器中从开始创建到销毁的过程。</li></ul><blockquote><p>Servlet容器</p></blockquote><ul><li>Servlet对象是Servlet容器创建的，生命周期方法都是由容器(目前我们使用的是Tomcat)调用的。这一点和我们之前所编写的代码有很大不同。在今后的学习中我们会看到，越来越多的对象交给容器或框架来创建，越来越多的方法由容器或框架来调用，开发人员要尽可能多的将精力放在业务逻辑的实现上。</li></ul><blockquote><p>Servlet主要的生命周期执行特点</p></blockquote><table><thead><tr><th>生命周期</th><th>对应方法</th><th>执行时机</th><th>执行次数</th></tr></thead><tbody><tr><td>构造对象</td><td>构造器</td><td>第一次请求或者容器启动</td><td>1</td></tr><tr><td>初始化</td><td>init()</td><td>构造完毕后</td><td>1</td></tr><tr><td>处理服务</td><td>service(HttpServletRequest req,HttpServletResponse resp)</td><td>每次请求</td><td>多次</td></tr><tr><td>销毁</td><td>destory()</td><td>容器关闭</td><td>1</td></tr></tbody></table><h3 id="生命周期测试"><a href="#生命周期测试" class="headerlink" title="生命周期测试"></a>生命周期测试</h3><blockquote><p>开发servlet代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletLifeCycle</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServletLifeCycle</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配置Servlet</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletLifeCycle<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.ServletLifeCycle<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--load-on-startup</span></span><br><span class="line"><span class="comment">        如果配置的是正整数则表示容器在启动时就要实例化Servlet,</span></span><br><span class="line"><span class="comment">        数字表示的是实例化的顺序</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletLifeCycle<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletLiftCycle<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>请求Servlet测试</li></ul><p>略</p><h3 id="生命周期总结"><a href="#生命周期总结" class="headerlink" title="生命周期总结"></a>生命周期总结</h3><ol><li>通过生命周期测试我们发现Servlet对象在容器中是单例的</li><li>容器是可以处理并发的用户请求的,每个请求在容器中都会开启一个线程</li><li>多个线程可能会使用相同的Servlet对象,所以在Servlet中,我们不要轻易定义一些容易经常发生修改的成员变量</li><li>load-on-startup中定义的正整数表示实例化顺序,如果数字重复了,容器会自行解决实例化顺序问题,但是应该避免重复</li><li>Tomcat容器中,已经定义了一些随系统启动实例化的servlet,我们自定义的servlet的load-on-startup尽量不要占用数字1-5</li></ol><h2 id="Servlet继承结构"><a href="#Servlet继承结构" class="headerlink" title="Servlet继承结构"></a>Servlet继承结构</h2><h3 id="Servlet-接口"><a href="#Servlet-接口" class="headerlink" title="Servlet 接口"></a>Servlet 接口</h3><blockquote><p>源码及功能解释</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>接口及方法说明</p></blockquote><ul><li>Servlet 规范接口,所有的Servlet必须实现 <ul><li>public void init(ServletConfig config) throws ServletException;   <ul><li>初始化方法,容器在构造servlet对象后,自动调用的方法,容器负责实例化一个ServletConfig对象,并在调用该方法时传入</li><li>ServletConfig对象可以为Servlet 提供初始化参数</li></ul></li><li>public ServletConfig getServletConfig();<ul><li>获取ServletConfig对象的方法,后续可以通过该对象获取Servlet初始化参数</li></ul></li><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;<ul><li>处理请求并做出响应的服务方法,每次请求产生时由容器调用</li><li>容器创建一个ServletRequest对象和ServletResponse对象,容器在调用service方法时,传入这两个对象</li></ul></li><li>public String getServletInfo();<ul><li>获取ServletInfo信息的方法</li></ul></li><li>public void destroy();<ul><li>Servlet实例在销毁之前调用的方法</li></ul></li></ul></li></ul><h3 id="GenericServlet-抽象类"><a href="#GenericServlet-抽象类" class="headerlink" title="GenericServlet 抽象类"></a>GenericServlet 抽象类</h3><blockquote><p>源码</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>源码解释</p></blockquote><ul><li>GenericServlet 抽象类是对Servlet接口一些固定功能的粗糙实现,以及对service方法的再次抽象声明,并定义了一些其他相关功能方法<ul><li>private transient ServletConfig config; <ul><li>初始化配置对象作为属性</li></ul></li><li>public GenericServlet() { } <ul><li>构造器,为了满足继承而准备</li></ul></li><li>public void destroy() { } <ul><li>销毁方法的平庸实现</li></ul></li><li>public String getInitParameter(String name) <ul><li>获取初始参数的快捷方法</li></ul></li><li>public Enumeration<String> getInitParameterNames() <ul><li>返回所有初始化参数名的方法</li></ul></li><li>public ServletConfig getServletConfig()<ul><li>获取初始Servlet初始配置对象ServletConfig的方法</li></ul></li><li>public ServletContext getServletContext()<ul><li>获取上下文对象ServletContext的方法</li></ul></li><li>public String getServletInfo() <ul><li>获取Servlet信息的平庸实现</li></ul></li><li>public void init(ServletConfig config) throws ServletException() <ul><li>初始化方法的实现,并在此调用了init的重载方法</li></ul></li><li>public void init() throws ServletException <ul><li>重载init方法,为了让我们自己定义初始化功能的方法</li></ul></li><li>public void log(String msg) </li><li>public void log(String message, Throwable t)<ul><li>打印日志的方法及重载</li></ul></li><li>public abstract void service(ServletRequest req, ServletResponse res) throws ServletException, IOException; <ul><li>服务方法再次声明</li></ul></li><li>public String getServletName() <ul><li>获取ServletName的方法</li></ul></li></ul></li></ul><h3 id="HttpServlet-抽象类"><a href="#HttpServlet-抽象类" class="headerlink" title="HttpServlet 抽象类"></a>HttpServlet 抽象类</h3><blockquote><p>源码</p></blockquote><ul><li>通过idea查看: 此处略</li></ul><blockquote><p>解释</p></blockquote><ul><li>abstract class HttpServlet extends GenericServlet  HttpServlet抽象类,除了基本的实现以外,增加了更多的基础功能<ul><li>private static final String METHOD_DELETE &#x3D; “DELETE”;</li><li>private static final String METHOD_HEAD &#x3D; “HEAD”;</li><li>private static final String METHOD_GET &#x3D; “GET”;</li><li>private static final String METHOD_OPTIONS &#x3D; “OPTIONS”;</li><li>private static final String METHOD_POST &#x3D; “POST”;</li><li>private static final String METHOD_PUT &#x3D; “PUT”;</li><li>private static final String METHOD_TRACE &#x3D; “TRACE”;<ul><li>上述属性用于定义常见请求方式名常量值</li></ul></li><li>public HttpServlet() {}<ul><li>构造器,用于处理继承</li></ul></li><li>public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException<ul><li>对服务方法的实现</li><li>在该方法中,将请求和响应对象转换成对应HTTP协议的HttpServletRequest HttpServletResponse对象</li><li>调用重载的service方法</li></ul></li><li>public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException<ul><li>重载的service方法,被重写的service方法所调用</li><li>在该方法中,通过请求方式判断,调用具体的do***方法完成请求的处理</li></ul></li><li>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException</li><li>protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException<ul><li>对应不同请求方式的处理方法</li><li>除了doOptions和doTrace方法,其他的do*** 方法都在故意响应错误信息</li></ul></li></ul></li></ul><h3 id="自定义Servlet"><a href="#自定义Servlet" class="headerlink" title="自定义Servlet"></a>自定义Servlet</h3><blockquote><p>继承关系图解</p></blockquote><p><img src="/img/images/1682299663047.png" alt="1682299663047"></p><ul><li>自定义Servlet中,必须要对处理请求的方法进行重写<ul><li>要么重写service方法</li><li>要么重写doGet&#x2F;doPost方法</li></ul></li></ul><h2 id="ServletConfig和ServletContext"><a href="#ServletConfig和ServletContext" class="headerlink" title="ServletConfig和ServletContext"></a>ServletConfig和ServletContext</h2><h3 id="ServletConfig的使用"><a href="#ServletConfig的使用" class="headerlink" title="ServletConfig的使用"></a>ServletConfig的使用</h3><blockquote><p>ServletConfig是什么</p></blockquote><ul><li>为Servlet提供初始配置参数的一种对象,每个Servlet都有自己独立唯一的ServletConfig对象</li><li>容器会为每个Servlet实例化一个ServletConfig对象,并通过Servlet生命周期的init方法传入给Servlet作为属性</li></ul><img src="/img/images/1682302307081.png" alt="1682302307081"  /><blockquote><p>ServletConfig是一个接口,定义了如下API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.servlet;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    String <span class="title function_">getServletName</span><span class="params">()</span>;</span><br><span class="line">    ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getInitParameter</span><span class="params">(String var1)</span>;</span><br><span class="line">    Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getServletName()</td><td>获取&lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;定义的Servlet名称</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr><tr><td>getInitParameter()</td><td>获取配置Servlet时设置的『初始化参数』，根据名字获取值</td></tr><tr><td>getInitParameterNames()</td><td>获取所有初始化参数名组成的Enumeration对象</td></tr></tbody></table><blockquote><p>ServletConfig怎么用,测试代码如下</p></blockquote><ul><li>定义Servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">// 根据参数名获取单个参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;param1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;param1:&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletConfig.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">// 根据参数名获取单个参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;param1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;param1:&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletConfig.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置Servlet</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletA<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.ServletA<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--配置ServletA的初始参数--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletB<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.ServletB<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置ServletB的初始参数--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param3<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value3<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>param4<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value4<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletA<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletA<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletB<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletB<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>请求Servlet测试</li></ul><p>略</p><h3 id="ServletContext的使用"><a href="#ServletContext的使用" class="headerlink" title="ServletContext的使用"></a>ServletContext的使用</h3><blockquote><p>ServletContext是什么</p></blockquote><ul><li>ServletContext对象有称呼为上下文对象,或者叫应用域对象(后面统一讲解域对象)</li><li>容器会为每个app创建一个独立的唯一的ServletContext对象</li><li>ServletContext对象为所有的Servlet所共享</li><li>ServletContext可以为所有的Servlet提供初始配置参数</li></ul><p><img src="/img/images/1682303205351.png" alt="1682303205351"></p><blockquote><p>ServletContext怎么用</p></blockquote><ul><li>配置ServletContext参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramA<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>valueA<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>paramB<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>valueB<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在Servlet中获取ServletContext并获取参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 从ServletContext中获取为所有的Servlet准备的参数</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">valueA</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;paramA&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;paramA:&quot;</span>+valueA);</span><br><span class="line">        <span class="comment">// 获取所有参数名</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletContext.getInitParameterNames();</span><br><span class="line">        <span class="comment">// 迭代并获取参数名</span></span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">paramaterName</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            System.out.println(paramaterName+<span class="string">&quot;:&quot;</span>+servletContext.getInitParameter(paramaterName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletContext其他重要API"><a href="#ServletContext其他重要API" class="headerlink" title="ServletContext其他重要API"></a>ServletContext其他重要API</h3><blockquote><p>获取资源的真实路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;资源在web目录中的路径&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>例如我们的目标是需要获取项目中某个静态资源的路径，不是工程目录中的路径，而是<strong>部署目录中的路径</strong>；我们如果直接拷贝其在我们电脑中的完整路径的话其实是有问题的，因为如果该项目以后部署到公司服务器上的话，路径肯定是会发生改变的，所以我们需要使用代码动态获取资源的真实路径.  只要使用了servletContext动态获取资源的真实路径，<strong>那么无论项目的部署路径发生什么变化，都会动态获取项目运行时候的实际路径</strong>，所以就不会发生由于写死真实路径而导致项目部署位置改变引发的路径错误问题</li></ul><blockquote><p>获取项目的上下文路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br></pre></td></tr></table></figure><ul><li>项目的部署名称,也叫项目的上下文路径,在部署进入tomcat时所使用的路径,该路径是可能发生变化的,通过该API动态获取项目真实的上下文路径,可以<strong>帮助我们解决一些后端页面渲染技术或者请求转发和响应重定向中的路径问题</strong></li></ul><blockquote><p> 域对象的相关API</p></blockquote><ul><li>域对象: 一些用于存储数据和传递数据的对象,传递数据不同的范围,我们称之为不同的域,不同的域对象代表不同的域,共享数据的范围也不同</li><li>ServletContext代表应用,所以ServletContext域也叫作应用域,是webapp中最大的域,可以在本应用内实现数据的共享和传递</li><li>webapp中的三大域对象,分别是应用域,会话域,请求域</li><li><code>后续我们会将三大域对象统一进行讲解和演示</code>,三大域对象都具有的API如下</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setAttribute(String key,Object value);</td><td>向域中存储&#x2F;修改数据</td></tr><tr><td>Object getAttribute(String key);</td><td>获得域中的数据</td></tr><tr><td>void removeAttribute(String key);</td><td>移除域中的数据</td></tr></tbody></table><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><h3 id="HttpServletRequest简介"><a href="#HttpServletRequest简介" class="headerlink" title="HttpServletRequest简介"></a>HttpServletRequest简介</h3><blockquote><p>HttpServletRequest是什么</p></blockquote><ul><li>HttpServletRequest是一个接口,其父接口是ServletRequest</li><li>HttpServletRequest是Tomcat将请求报文转换封装而来的对象,在Tomcat调用service方法时传入</li><li>HttpServletRequest代表客户端发来的请求,所有请求中的信息都可以通过该对象获得</li></ul><p><img src="/img/images/1681699577344.png" alt="1681699577344"></p><h3 id="HttpServletRequest常见API"><a href="#HttpServletRequest常见API" class="headerlink" title="HttpServletRequest常见API"></a>HttpServletRequest常见API</h3><blockquote><p>HttpServletRequest怎么用</p></blockquote><ul><li>获取请求行信息相关(方式,请求的url,协议及版本)</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>StringBuffer getRequestURL();</td><td>获取客户端请求的url</td></tr><tr><td>String getRequestURI();</td><td>获取客户端请求项目中的具体资源</td></tr><tr><td>int getServerPort();</td><td>获取客户端发送请求时的端口</td></tr><tr><td>int getLocalPort();</td><td>获取本应用在所在容器的端口</td></tr><tr><td>int getRemotePort();</td><td>获取客户端程序的端口</td></tr><tr><td>String getScheme();</td><td>获取请求协议</td></tr><tr><td>String getProtocol();</td><td>获取请求协议及版本号</td></tr><tr><td>String getMethod();</td><td>获取请求方式</td></tr></tbody></table><ul><li><p>获得请求头信息相关</p><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>String getHeader(String headerName);</td><td>根据头名称获取请求头</td></tr><tr><td>Enumeration<String> getHeaderNames();</td><td>获取所有的请求头名字</td></tr><tr><td>String getContentType();</td><td>获取content-type请求头</td></tr></tbody></table></li><li><p>获得请求参数相关</p><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>String getParameter(String parameterName);</td><td>根据请求参数名获取请求单个参数值</td></tr><tr><td>String[] getParameterValues(String parameterName);</td><td>根据请求参数名获取请求多个参数值数组</td></tr><tr><td>Enumeration<String> getParameterNames();</td><td>获取所有请求参数名</td></tr><tr><td>Map&lt;String, String[]&gt; getParameterMap();</td><td>获取所有请求参数的键值对集合</td></tr><tr><td>BufferedReader getReader() throws IOException;</td><td>获取读取请求体的字符输入流</td></tr><tr><td>ServletInputStream getInputStream() throws IOException;</td><td>获取读取请求体的字节输入流</td></tr><tr><td>int getContentLength();</td><td>获得请求体长度的字节数</td></tr></tbody></table></li><li><p>其他API</p><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>String getServletPath();</td><td>获取请求的Servlet的映射路径</td></tr><tr><td>ServletContext getServletContext();</td><td>获取ServletContext对象</td></tr><tr><td>Cookie[] getCookies();</td><td>获取请求中的所有cookie</td></tr><tr><td>HttpSession getSession();</td><td>获取Session对象</td></tr><tr><td>void setCharacterEncoding(String encoding) ;</td><td>设置请求体字符集</td></tr></tbody></table></li></ul><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><h3 id="HttpServletResponse简介"><a href="#HttpServletResponse简介" class="headerlink" title="HttpServletResponse简介"></a>HttpServletResponse简介</h3><blockquote><p>HttpServletResponse是什么</p></blockquote><ul><li>HttpServletResponse是一个接口,其父接口是ServletResponse</li><li>HttpServletResponse是Tomcat预先创建的,在Tomcat调用service方法时传入</li><li>HttpServletResponse代表对客户端的响应,该对象会被转换成响应的报文发送给客户端,通过该对象我们可以设置响应信息</li></ul><p><img src="/img/images/1681699577344.png" alt="1681699577344"></p><h3 id="HttpServletResponse的常见API"><a href="#HttpServletResponse的常见API" class="headerlink" title="HttpServletResponse的常见API"></a>HttpServletResponse的常见API</h3><blockquote><p>HttpServletRequest怎么用</p></blockquote><ul><li>设置响应行相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setStatus(int  code);</td><td>设置响应状态码</td></tr></tbody></table><ul><li>设置响应头相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void setHeader(String headerName, String headerValue);</td><td>设置&#x2F;修改响应头键值对</td></tr><tr><td>void setContentType(String contentType);</td><td>设置content-type响应头及响应字符集(设置MIME类型)</td></tr></tbody></table><ul><li>设置响应体相关</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>PrintWriter getWriter() throws IOException;</td><td>获得向响应体放入信息的字符输出流</td></tr><tr><td>ServletOutputStream getOutputStream() throws IOException;</td><td>获得向响应体放入信息的字节输出流</td></tr><tr><td>void setContentLength(int length);</td><td>设置响应体的字节长度,其实就是在设置content-length响应头</td></tr></tbody></table><ul><li>其他API</li></ul><table><thead><tr><th>API</th><th>功能解释</th></tr></thead><tbody><tr><td>void sendError(int code, String message) throws IOException;</td><td>向客户端响应错误信息的方法,需要指定响应码和响应信息</td></tr><tr><td>void addCookie(Cookie cookie);</td><td>向响应体中增加cookie</td></tr><tr><td>void setCharacterEncoding(String encoding);</td><td>设置响应体字符集</td></tr></tbody></table><blockquote><p>MIME类型</p></blockquote><ul><li>MIME类型,可以理解为文档类型,用户表示传递的数据是属于什么类型的文档</li><li>浏览器可以根据MIME类型决定该用什么样的方式解析接收到的响应体数据</li><li>可以这样理解: 前后端交互数据时,告诉对方发给对方的是 html&#x2F;css&#x2F;js&#x2F;图片&#x2F;声音&#x2F;视频&#x2F;… …</li><li>tomcat&#x2F;conf&#x2F;web.xml中配置了常见文件的拓展名和MIMIE类型的对应关系</li><li>常见的MIME类型举例如下</li></ul><table><thead><tr><th>文件拓展名</th><th>MIME类型</th></tr></thead><tbody><tr><td>.html</td><td>text&#x2F;html</td></tr><tr><td>.css</td><td>text&#x2F;css</td></tr><tr><td>.js</td><td>application&#x2F;javascript</td></tr><tr><td>.png &#x2F;.jpeg&#x2F;.jpg&#x2F;… …</td><td>image&#x2F;jpeg</td></tr><tr><td>.mp3&#x2F;.mpe&#x2F;.mpeg&#x2F; … …</td><td>audio&#x2F;mpeg</td></tr><tr><td>.mp4</td><td>video&#x2F;mp4</td></tr><tr><td>.m1v&#x2F;.m1v&#x2F;.m2v&#x2F;.mpe&#x2F;… …</td><td>video&#x2F;mpeg</td></tr></tbody></table><h2 id="请求转发和响应重定向"><a href="#请求转发和响应重定向" class="headerlink" title="请求转发和响应重定向"></a>请求转发和响应重定向</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>什么是请求转发和响应重定向</p></blockquote><ul><li><p>请求转发和响应重定向是web应用中间接访问项目资源的两种手段,也是Servlet控制页面跳转的两种手段</p></li><li><p>请求转发通过HttpServletRequest实现,响应重定向通过HttpServletResponse实现</p></li><li><p>请求转发生活举例: 张三找李四借钱,李四没有,李四找王五,让王五借给张三</p></li><li><p>响应重定向生活举例:张三找李四借钱,李四没有,李四让张三去找王五,张三自己再去找王五借钱</p></li></ul><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><blockquote><p>请求转发运行逻辑图</p></blockquote><p><img src="/img/images/1682321228643.png" alt="1682321228643"></p><blockquote><p>请求转发特点(背诵)</p></blockquote><ul><li>请求转发通过HttpServletRequest对象获取请求转发器实现</li><li>请求转发是服务器内部的行为,对客户端是屏蔽的</li><li>客户端只发送了一次请求,客户端地址栏不变</li><li>服务端只产生了一对请求和响应对象,这一对请求和响应对象会继续传递给下一个资源</li><li>因为全程只有一个HttpServletRequset对象,所以请求参数可以传递,请求域中的数据也可以传递</li><li>请求转发可以转发给其他Servlet动态资源,也可以转发给一些静态资源以实现页面跳转</li><li>请求转发可以转发给WEB-INF下受保护的资源</li><li>请求转发不能转发到本项目以外的外部资源</li></ul><blockquote><p>请求转发测试代码</p></blockquote><p><img src="/img/images/1682323740343.png" alt="1682323740343"></p><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  获取请求转发器</span></span><br><span class="line">        <span class="comment">//  转发给servlet  ok</span></span><br><span class="line">        <span class="type">RequestDispatcher</span>  <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;servletB&quot;</span>);</span><br><span class="line">        <span class="comment">//  转发给一个视图资源 ok</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;welcome.html&quot;);</span></span><br><span class="line">        <span class="comment">//  转发给WEB-INF下的资源  ok</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;WEB-INF/views/view1.html&quot;);</span></span><br><span class="line">        <span class="comment">//  转发给外部资源   no</span></span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">        <span class="comment">//  获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//  向请求域中添加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;reqKey&quot;</span>,<span class="string">&quot;requestMessage&quot;</span>);</span><br><span class="line">        <span class="comment">//  做出转发动作</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">// 获取请求域中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span> (String)req.getAttribute(<span class="string">&quot;reqKey&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        <span class="comment">// 做出响应</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;servletB response&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开浏览器,输入以下url测试</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/web03_war_exploded/servletA?username=atguigu</span><br></pre></td></tr></table></figure><h3 id="响应重定向"><a href="#响应重定向" class="headerlink" title="响应重定向"></a>响应重定向</h3><blockquote><p>响应重定向运行逻辑图</p></blockquote><p><img src="/img/images/1682322460011.png" alt="1682322460011"></p><blockquote><p>响应重定向特点(背诵)</p></blockquote><ul><li>响应重定向通过HttpServletResponse对象的sendRedirect方法实现</li><li>响应重定向是服务端通过302响应码和路径,告诉客户端自己去找其他资源,是在服务端提示下的,客户端的行为</li><li>客户端至少发送了两次请求,客户端地址栏是要变化的</li><li>服务端产生了多对请求和响应对象,且请求和响应对象不会传递给下一个资源</li><li>因为全程产生了多个HttpServletRequset对象,所以请求参数不可以传递,请求域中的数据也不可以传递</li><li>重定向可以是其他Servlet动态资源,也可以是一些静态资源以实现页面跳转</li><li>重定向不可以到给WEB-INF下受保护的资源</li><li>重定向可以到本项目以外的外部资源</li></ul><blockquote><p>响应重定向测试代码</p></blockquote><p><img src="/img/images/1682323740343.png" alt="1682323740343"></p><ul><li>ServletA</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//  获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//  向请求域中添加数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;reqKey&quot;</span>,<span class="string">&quot;requestMessage&quot;</span>);</span><br><span class="line">        <span class="comment">//  响应重定向</span></span><br><span class="line">        <span class="comment">// 重定向到servlet动态资源 OK</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;servletB&quot;</span>);</span><br><span class="line">        <span class="comment">// 重定向到视图静态资源 OK</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;welcome.html&quot;);</span></span><br><span class="line">        <span class="comment">// 重定向到WEB-INF下的资源 NO</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;WEB-INF/views/view1&quot;);</span></span><br><span class="line">        <span class="comment">// 重定向到外部资源</span></span><br><span class="line">        <span class="comment">//resp.sendRedirect(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletB</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">// 获取请求域中的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reqMessage</span> <span class="operator">=</span> (String)req.getAttribute(<span class="string">&quot;reqKey&quot;</span>);</span><br><span class="line">        System.out.println(reqMessage);</span><br><span class="line">        <span class="comment">// 做出响应</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;servletB response&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开浏览器,输入以下url测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/web03_war_exploded/servletA?username=atguigu</span><br></pre></td></tr></table></figure><h2 id="web乱码和路径问题总结"><a href="#web乱码和路径问题总结" class="headerlink" title="web乱码和路径问题总结"></a>web乱码和路径问题总结</h2><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><blockquote><p>乱码问题产生的根本原因是什么</p></blockquote><ol><li>数据的编码和解码使用的不是同一个字符集</li><li>使用了不支持某个语言文字的字符集</li></ol><blockquote><p>各个字符集的兼容性</p></blockquote><img src="/img/images/1682326867396.png" alt="1682326867396" style="zoom:80%;" /><ul><li>由上图得知,上述字符集都兼容了ASCII</li><li>ASCII中有什么? 英文字母和一些通常使用的符号,所以这些东西无论使用什么字符集都不会乱码</li></ul><h4 id="HTML乱码问题"><a href="#HTML乱码问题" class="headerlink" title="HTML乱码问题"></a>HTML乱码问题</h4><blockquote><p>设置项目文件的字符集要使用一个支持中文的字符集</p></blockquote><ul><li>查看当前文件的字符集</li></ul><img src="/img/images/1682325817829.png" alt="1682325817829"  /><ul><li>查看项目字符集 配置,将Global Encoding 全局字符集,Project Encoding 项目字符集, Properties Files 属性配置文件字符集设置为UTF-8</li></ul><img src="/img/images/1682326229063.png" alt="1682326229063"  /><blockquote><p>当前视图文件的字符集通过<meta charset="UTF-8"> 来告知浏览器通过什么字符集来解析当前文件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    中文</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat控制台乱码"><a href="#Tomcat控制台乱码" class="headerlink" title="Tomcat控制台乱码"></a>Tomcat控制台乱码</h4><blockquote><p>在tomcat10.1.7这个版本中,修改 tomcat&#x2F;conf&#x2F;logging.properties中,所有的UTF-8为GBK即可</p></blockquote><ul><li>修改前</li></ul><img src="/img/images/1681443202115.png" alt="1681443202115"  /><ul><li>修改后</li></ul><img src="/img/images/1681443273573.png" alt="1681443273573"  /><ul><li>重启测试</li></ul><img src="/img/images/1681443314432.png" alt="1681443314432"  /><img src="/img/images/1682325615922.png" alt="1682325615922"  /><blockquote><p>sout乱码问题,设置JVM加载.class文件时使用UTF-8字符集</p></blockquote><ul><li>设置虚拟机加载.class文件的字符集和编译时使用的字符集一致</li></ul><p><img src="/img/images/1695189588009.png" alt="1695189588009"></p><h4 id="请求乱码问题"><a href="#请求乱码问题" class="headerlink" title="请求乱码问题"></a>请求乱码问题</h4><h4 id="GET请求乱码"><a href="#GET请求乱码" class="headerlink" title="GET请求乱码"></a>GET请求乱码</h4><blockquote><p>GET请求方式乱码分析</p></blockquote><ul><li>GET方式提交参数的方式是将参数放到URL后面,如果使用的不是UTF-8,那么会对参数进行URL编码处理</li><li>HTML中的 <meta charset='字符集'/> 影响了GET方式提交参数的URL编码</li><li>tomcat10.1.7的URI编码默认为 UTF-8</li><li>当GET方式提交的参数URL编码和tomcat10.1.7默认的URI编码不一致时,就会出现乱码</li></ul><blockquote><p>GET请求方式乱码演示</p></blockquote><ul><li>浏览器解析的文档的<meta charset="GBK" /></li></ul><img src="/img/images/1682385870660.png" alt="1682385870660" style="zoom: 67%;" /><ul><li>GET方式提交时,会对数据进行URL编码处理 ,是将GBK 转码为 “百分号码”</li></ul><img src="/img/images/1682385997927.png" alt="1682385997927" style="zoom: 80%;" /><ul><li>tomcat10.1.7 默认使用UTF-8对URI进行解析,造成前后端使用的字符集不一致,出现乱码</li></ul><img src="/img/images/1682386110151.png" alt="1682386110151" style="zoom: 80%;" /><blockquote><p>GET请求方式乱码解决</p></blockquote><ul><li>方式1  :设置GET方式提交的编码和Tomcat10.1.7的URI默认解析编码一致即可 (推荐)</li></ul><img src="/img/images/1682386298048.png" alt="1682386298048" style="zoom: 75%;" /><img src="/img/images/1682386374464.png" alt="1682386374464" style="zoom:85%;" /><ul><li>方式2 : 设置Tomcat10.1.7的URI解析字符集和GET请求发送时所使用URL转码时的字符集一致即可,修改conf&#x2F;server.xml中 Connecter 添加 URIEncoding&#x3D;”GBK”  (不推荐)</li></ul><p><img src="/img/images/1682386551684.png" alt="1682386551684"></p><img src="/img/images/1682386611945.png" alt="1682386611945" style="zoom: 50%;" /><h4 id="POST方式请求乱码"><a href="#POST方式请求乱码" class="headerlink" title="POST方式请求乱码"></a>POST方式请求乱码</h4><blockquote><p>POST请求方式乱码分析</p></blockquote><ul><li>POST请求将参数放在请求体中进行发送</li><li>请求体使用的字符集受到了<meta charset="字符集"/>的影响</li><li>Tomcat10.1.7 默认使用UTF-8字符集对请求体进行解析</li><li>如果请求体的URL转码和Tomcat的请求体解析编码不一致,就容易出现乱码</li></ul><blockquote><p>POST方式乱码演示</p></blockquote><ul><li>POST请求请求体受到了<meta charset="字符集"/>的影响</li></ul><img src="/img/images/1682387258428.png" alt="1682387258428" style="zoom:67%;" /><ul><li>请求体中,将GBK数据进行 URL编码</li></ul><img src="/img/images/1682387349916.png" alt="1682387349916" style="zoom: 85%;" /><ul><li>后端默认使用UTF-8解析请求体,出现字符集不一致,导致乱码</li></ul><img src="/img/images/1682387412704.png" alt="1682387412704" style="zoom: 67%;" /><blockquote><p>POST请求方式乱码解决</p></blockquote><ul><li>方式1 : 请求时,使用UTF-8字符集提交请求体 (推荐)</li></ul><img src="/img/images/1682387836615.png" alt="1682387836615" style="zoom: 67%;" /><img src="/img/images/1682387857587.png" alt="1682387857587" style="zoom:88%;" /><ul><li>方式2 : 后端在获取参数前,设置解析请求体使用的字符集和请求发送时使用的字符集一致 (不推荐)</li></ul><img src="/img/images/1682388026978.png" alt="1682388026978" style="zoom: 75%;" /><h4 id="响应乱码问题"><a href="#响应乱码问题" class="headerlink" title="响应乱码问题"></a>响应乱码问题</h4><blockquote><p>响应乱码分析</p></blockquote><ul><li>在Tomcat10.1.7中,向响应体中放入的数据默认使用了工程编码 UTF-8</li><li>浏览器在接收响应信息时,使用了不同的字符集或者是不支持中文的字符集就会出现乱码</li></ul><blockquote><p>响应乱码演示</p></blockquote><ul><li>服务端通过response对象向响应体添加数据</li></ul><p><img src="/img/images/1682388204239.png" alt="1682388204239"></p><ul><li>浏览器接收数据解析乱码</li></ul><img src="/img/images/1682388599014.png" alt="1682388599014" style="zoom:80%;" /><blockquote><p>响应乱码解决</p></blockquote><ul><li><p>方式1 : 手动设定浏览器对本次响应体解析时使用的字符集(不推荐)</p><ul><li>edge和 chrome浏览器没有提供直接的比较方便的入口,不方便</li></ul></li><li><p>方式2: 后端通过设置响应体的字符集和浏览器解析响应体的默认字符集一致(不推荐)</p></li></ul><img src="/img/images/1682389063225.png" alt="1682389063225" style="zoom: 75%;" /><p>方式3: 通过设置content-type响应头,告诉浏览器以指定的字符集解析响应体(推荐)</p><img src="/img/images/1682389263627.png" alt="1682389263627"  /><img src="/img/images/1682389317234.png" alt="1682389317234" style="zoom: 67%;" /><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><blockquote><p>相对路径和绝对路径</p></blockquote><ul><li><p>相对路径</p><ul><li>相对路径的规则是: 以当前资源所在的路径为出发点去寻找目标资源</li><li>相对路径不以 &#x2F; 开头</li><li>在file协议下,使用的是磁盘路径</li><li>在http协议下,使用的是url路径</li><li>相对路径中可以使用 .&#x2F;表示当前资源所在路径,可以省略不写</li><li>相对路径中可以使用..&#x2F;表示当前资源所在路径的上一层路径,需要时要手动添加</li></ul></li><li><p>绝对路径</p><ul><li>绝对路径的规则是: 使用以一个固定的路径做出出发点去寻找目标资源,和当前资源所在的路径没有关系</li><li>绝对路径要以&#x2F; 开头</li><li>绝对路径的写法中,不以当前资源的所在路径为出发点,所以不会出现  .&#x2F; 和..&#x2F;</li><li>不同的项目和不同的协议下,绝对路径的基础位置可能不同,要通过测试确定</li><li>绝对路径的好处就是:无论当前资源位置在哪,寻找目标资源路径的写法都一致</li></ul></li><li><p>应用场景</p><ol><li>前端代码中,href src action 等属性</li><li>请求转发和重定向中的路径</li></ol></li></ul><h4 id="前端路径问题"><a href="#前端路径问题" class="headerlink" title="前端路径问题"></a>前端路径问题</h4><blockquote><p>前端项目结构</p></blockquote><p><img src="/img/images/1682390999417.png" alt="1682390999417"></p><h4 id="相对路径情况分析"><a href="#相对路径情况分析" class="headerlink" title="相对路径情况分析"></a>相对路径情况分析</h4><blockquote><p>相对路径情况1:web&#x2F;index.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>访问index.html的url为   :  <a href="http://localhost:8080/web03_war_exploded/index.html">http://localhost:8080/web03_war_exploded/index.html</a></li><li>当前资源为                      :  index.html</li><li>当前资源的所在路径为  : <a href="http://localhost:8080/web03_war_exploded/">http://localhost:8080/web03_war_exploded/</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>index.html中定义的了    : <code>&lt;img src=&quot;static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/)%E5%90%8E%E6%8B%BC%E6%8E%A5src%E5%B1%9E%E6%80%A7%E5%80%BC(static/img/logo.png),%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/static/img/logo.png)">http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>相对路径情况2:web&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>访问test.html的url为      :  <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>当前资源为                      :  test.html</li><li>当前资源的所在路径为  : <a href="http://localhost:8080/web03_war_exploded/a/b/c/">http://localhost:8080/web03_war_exploded/a/b/c/</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>test.html中定义的了       : <code>&lt;img src=&quot;../../../static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/a/b/static/img/logo.png),%E5%85%B6%E4%B8%AD">http://localhost:8080/web03_war_exploded/a/b/c/)后拼接src属性值(../../../static/img/logo.png),其中</a> ..&#x2F;可以抵消一层路径,正好是目标资源正常获取的url(<a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ../代表上一层路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../../static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相对路径情况3:web&#x2F;WEB-INF&#x2F;views&#x2F;view1.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/view1Servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View1Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/view1.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问view1.html的url为   :  <a href="http://localhost:8080/web03_war_exploded/view1Servlet">http://localhost:8080/web03_war_exploded/view1Servlet</a></li><li>当前资源为                      :  view1Servlet</li><li>当前资源的所在路径为  : <a href="http://localhost:8080/web03_war_exploded/">http://localhost:8080/web03_war_exploded/</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>view1.html中定义的了    : <code>&lt;img src=&quot;static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/)%E5%90%8E%E6%8B%BC%E6%8E%A5src%E5%B1%9E%E6%80%A7%E5%80%BC(static/img/logo.png),%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/static/img/logo.png)">http://localhost:8080/web03_war_exploded/)后拼接src属性值(static/img/logo.png),正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/static/img/logo.png)</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绝对路径情况分析"><a href="#绝对路径情况分析" class="headerlink" title="绝对路径情况分析"></a>绝对路径情况分析</h4><blockquote><p>绝对路径情况1:web&#x2F;index.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>访问index.html的url为   :  <a href="http://localhost:8080/web03_war_exploded/index.html">http://localhost:8080/web03_war_exploded/index.html</a></li><li>绝对路径的基准路径为  :  <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>index.html中定义的了    : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绝对路径写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>绝对路径情况2:web&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>访问test.html的url为   :  <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>绝对路径的基准路径为  :  <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>test.html中定义的了    : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/web03_war_exploded/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绝对路径写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>绝对路径情况3:web&#x2F;WEB-INF&#x2F;views&#x2F;view1.html中引入web&#x2F;static&#x2F;img&#x2F;logo.png</p></blockquote><ul><li>view1.html在WEB-INF下,需要通过Servlet请求转发获得</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/view1Servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View1Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/view1.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问view1.html的url为   :  <a href="http://localhost:8080/web03_war_exploded/view1Servlet">http://localhost:8080/web03_war_exploded/view1Servlet</a></li><li>绝对路径的基准路径为  :  <a href="http://localhost:8080/">http://localhost:8080</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/static/img/logo.png">http://localhost:8080/web03_war_exploded/static/img/logo.png</a></li><li>view1.html中定义的了    : <code>&lt;img src=&quot;/web03_war_exploded/static/img/logo.png&quot;/&gt;</code></li><li>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接src属性值(/static/img/logo.png),得到的正是目标资源访问的正确路径">http://localhost:8080)后面拼接src属性值(/static/img/logo.png),得到的正是目标资源访问的正确路径</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/web03_war_exploded/static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="base标签的使用"><a href="#base标签的使用" class="headerlink" title="base标签的使用"></a>base标签的使用</h4><blockquote><p>base标签定义页面相对路径公共前缀</p></blockquote><ul><li>base 标签定义在head标签中,用于定义相对路径的公共前缀</li><li>base 标签定义的公共前缀只在相对路径上有效,绝对路径中无效</li><li>如果相对路径开头有 .&#x2F; 或者..&#x2F;修饰,则base标签对该路径同样无效</li></ul><blockquote><p>index.html 和a&#x2F;b&#x2F;c&#x2F;test.html 以及view1Servlet 中的路径处理</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义相对路径的公共前缀,将相对路径转化成了绝对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/web03_war_exploded/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缺省项目上下文路径"><a href="#缺省项目上下文路径" class="headerlink" title="缺省项目上下文路径"></a>缺省项目上下文路径</h4><blockquote><p>项目上下文路径变化问题</p></blockquote><ul><li>通过 base标签虽然解决了相对路径转绝对路径问题,但是base中定义的是项目的上下文路径</li><li>项目的上下文路径是可以随意变化的</li><li>一旦项目的上下文路径发生变化,所有base标签中的路径都需要改</li></ul><blockquote><p>解决方案</p></blockquote><ul><li>将项目的上下文路径进行缺省设置,设置为 &#x2F;,所有的绝对路径中就不必填写项目的上下文了,直接就是&#x2F;开头即可</li></ul><h4 id="重定向中的路径问题"><a href="#重定向中的路径问题" class="headerlink" title="重定向中的路径问题"></a>重定向中的路径问题</h4><blockquote><p>目标 :由&#x2F;x&#x2F;y&#x2F;z&#x2F;servletA重定向到a&#x2F;b&#x2F;c&#x2F;test.html</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/z/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相对路径写法"><a href="#相对路径写法" class="headerlink" title="相对路径写法"></a>相对路径写法</h4><ul><li>访问ServletA的url为   :  <a href="http://localhost:8080/web03_war_exploded/x/y/z/servletA">http://localhost:8080/web03_war_exploded/x/y/z/servletA</a></li><li>当前资源为                      :  servletA</li><li>当前资源的所在路径为  : <a href="http://localhost:8080/web03_war_exploded/x/x/z/">http://localhost:8080/web03_war_exploded/x/x/z/</a></li><li>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></li><li>ServletA重定向的路径    :  ..&#x2F;..&#x2F;..&#x2F;a&#x2F;b&#x2F;c&#x2F;test&#x2F;html</li><li>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/x/y/a/b/c/test/html),%E5%BD%A2%E6%88%90(http://localhost:8080/web03_war_exploded/a/b/c/test/html)%E6%AF%8F%E4%B8%AA../%E6%8A%B5%E6%B6%88%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95,%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)">http://localhost:8080/web03_war_exploded/x/y/z/)后拼接(../../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/z/../../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/z/servletA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletA</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 相对路径重定向到test.html</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;../../../a/b/c/test.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绝对路径写法"><a href="#绝对路径写法" class="headerlink" title="绝对路径写法"></a>绝对路径写法</h4><ul><li><p>访问ServletA的url为   :  <a href="http://localhost:8080/web03_war_exploded/x/y/z/servletA">http://localhost:8080/web03_war_exploded/x/y/z/servletA</a></p></li><li><p>绝对路径的基准路径为  :  <a href="http://localhost:8080/">http://localhost:8080</a></p></li><li><p>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></p></li><li><p>ServletA重定向的路径    : &#x2F;web03_war_exploded&#x2F;a&#x2F;b&#x2F;c&#x2F;test.html</p></li><li><p>寻找方式就是在基准路径(<a href="http://localhost:8080)后面拼接(/web03_war_exploded/a/b/c/test.html),得到">http://localhost:8080)后面拼接(/web03_war_exploded/a/b/c/test.html),得到</a>( <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html)%E6%AD%A3%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E8%B7%AF%E5%BE%84">http://localhost:8080/web03_war_exploded/a/b/c/test.html)正是目标资源访问的正确路径</a></p></li><li><p>绝对路径中需要填写项目上下文路径,但是上下文路径是变换的</p><ul><li>可以通过 ServletContext的getContextPath()获取上下文路径</li><li>可以将项目上下文路径定义为 &#x2F; 缺省路径,那么路径中直接以&#x2F;开头即可</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绝对路径中,要写项目上下文路径</span></span><br><span class="line"><span class="comment">//resp.sendRedirect(&quot;/web03_war_exploded/a/b/c/test.html&quot;);</span></span><br><span class="line"><span class="comment">// 通过ServletContext对象动态获取项目上下文路径</span></span><br><span class="line"><span class="comment">//resp.sendRedirect(getServletContext().getContextPath()+&quot;/a/b/c/test.html&quot;);</span></span><br><span class="line"><span class="comment">// 缺省项目上下文路径时,直接以/开头即可</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;/a/b/c/test.html&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="请求转发中的路径问题"><a href="#请求转发中的路径问题" class="headerlink" title="请求转发中的路径问题"></a>请求转发中的路径问题</h4><blockquote><p>目标 :由x&#x2F;y&#x2F;servletB请求转发到a&#x2F;b&#x2F;c&#x2F;test.html</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相对路径写法-1"><a href="#相对路径写法-1" class="headerlink" title="相对路径写法"></a>相对路径写法</h4><ul><li><p>访问ServletB的url为       :  <a href="http://localhost:8080/web03_war_exploded/x/y/servletB">http://localhost:8080/web03_war_exploded/x/y/servletB</a></p></li><li><p>当前资源为                      :  servletB</p></li><li><p>当前资源的所在路径为  : <a href="http://localhost:8080/web03_war_exploded/x/x/">http://localhost:8080/web03_war_exploded/x/x/</a></p></li><li><p>要获取的目标资源url为 :  <a href="http://localhost:8080/web03_war_exploded/a/b/c/test.html">http://localhost:8080/web03_war_exploded/a/b/c/test.html</a></p></li><li><p>ServletA请求转发路径    :  ..&#x2F;..&#x2F;a&#x2F;b&#x2F;c&#x2F;test&#x2F;html</p></li><li><p>寻找方式就是在当前资源所在路径(<a href="http://localhost:8080/web03_war_exploded/x/y/a/b/c/test/html),%E5%BD%A2%E6%88%90(http://localhost:8080/web03_war_exploded/a/b/c/test/html)%E6%AF%8F%E4%B8%AA../%E6%8A%B5%E6%B6%88%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95,%E6%AD%A3%E5%A5%BD%E6%98%AF%E7%9B%AE%E6%A0%87%E8%B5%84%E6%BA%90%E6%AD%A3%E5%B8%B8%E8%8E%B7%E5%8F%96%E7%9A%84url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)">http://localhost:8080/web03_war_exploded/x/y/)后拼接(../../a/b/c/test/html),形成(http://localhost:8080/web03_war_exploded/x/y/../../a/b/c/test/html)每个../抵消一层目录,正好是目标资源正常获取的url(http://localhost:8080/web03_war_exploded/a/b/c/test/html)</a></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;../../a/b/c/test.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="绝对路径写法-1"><a href="#绝对路径写法-1" class="headerlink" title="绝对路径写法"></a>绝对路径写法</h4><ul><li><p>请求转发只能转发到项目内部的资源,其绝对路径无需添加项目上下文路径</p></li><li><p>请求转发绝对路径的基准路径相当于<a href="http://localhost:8080/web03_war_exploded">http://localhost:8080/web03_war_exploded</a></p></li><li><p>在项目上下文路径为缺省值时,也无需改变,直接以&#x2F;开头即可</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/x/y/servletB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletB</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/a/b/c/test.html&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="目标资源内相对路径处理"><a href="#目标资源内相对路径处理" class="headerlink" title="目标资源内相对路径处理"></a>目标资源内相对路径处理</h4><ul><li><p>此时需要注意,请求转发是服务器行为,浏览器不知道,地址栏不变化,相当于我们访问test.html的路径为<a href="http://localhost:8080/web03_war_exploded/x/y/servletB">http://localhost:8080/web03_war_exploded/x/y/servletB</a></p></li><li><p>那么此时 test.html资源的所在路径就是<a href="http://localhost:8080/web03_war_exploded/x/y/%E6%89%80%E4%BB%A5test.html%E4%B8%AD%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E8%A6%81%E5%9F%BA%E4%BA%8E%E8%AF%A5%E8%B7%AF%E5%BE%84%E7%BC%96%E5%86%99,%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%88%99%E4%B8%8D%E7%94%A8%E8%80%83%E8%99%91">http://localhost:8080/web03_war_exploded/x/y/所以test.html中相对路径要基于该路径编写,如果使用绝对路径则不用考虑</a></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">当前资源路径是     http://localhost:8080/web03_war_exploded/x/y/servletB</span></span><br><span class="line"><span class="comment">        当前资源所在路径是  http://localhost:8080/web03_war_exploded/x/y/</span></span><br><span class="line"><span class="comment">        目标资源路径=所在资源路径+src属性值 </span></span><br><span class="line"><span class="comment">http://localhost:8080/web03_war_exploded/x/y/../../static/img/logo.png</span></span><br><span class="line"><span class="comment">        http://localhost:8080/web03_war_exploded/static/img/logo.png</span></span><br><span class="line"><span class="comment">得到目标路径正是目标资源的访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../static/img/logo.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="MVC架构模式"><a href="#MVC架构模式" class="headerlink" title="MVC架构模式"></a>MVC架构模式</h2><blockquote><p> MVC（Model View Controller）是软件工程中的一种**<code>软件架构模式</code><strong>，它把软件系统分为</strong><code>模型</code><strong>、</strong><code>视图</code><strong>和</strong><code>控制器</code>**三个基本部分。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p></blockquote><ul><li><p><strong>M</strong>：Model 模型层,具体功能如下</p><ol><li>存放和数据库对象的实体类以及一些用于存储非数据库表完整相关的VO对象</li><li>存放一些对数据进行逻辑运算操作的的一些业务处理代码</li></ol></li><li><p><strong>V</strong>：View 视图层,具体功能如下</p><ol><li>存放一些视图文件相关的代码 html css js等</li><li>在前后端分离的项目中,后端已经没有视图文件,该层次已经衍化成独立的前端项目</li></ol></li><li><p><strong>C</strong>：Controller 控制层,具体功能如下</p><ol><li>接收客户端请求,获得请求数据</li><li>将准备好的数据响应给客户端</li></ol></li></ul><blockquote><p>MVC模式下,项目中的常见包</p></blockquote><ul><li><p>M:</p><ol><li>实体类包(pojo &#x2F;entity &#x2F;bean) 专门存放和数据库对应的实体类和一些VO对象</li><li>数据库访问包(dao&#x2F;mapper)  专门存放对数据库不同表格CURD方法封装的一些类</li><li>服务包(service)                       专门存放对数据进行业务逻辑运算的一些类</li></ol></li><li><p>C:</p><ol><li>控制层包(controller)</li></ol></li><li><p>V:</p><ol><li>web目录下的视图资源 html css js img 等</li><li>前端工程化后,在后端项目中已经不存在了</li></ol></li></ul><p>非前后端分离的MVC</p><p><img src="/img/images/1690349913931.png" alt="1690349913931"></p><p>前后端分离的MVC</p><p><img src="/img/images/1683363039636-1690349401673.png" alt="1683363039636"></p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 XML-Tomcat10-HTTP</title>
      <link href="/2024/11/10/1XML%20Tomcat%20Http/"/>
      <url>/2024/11/10/1XML%20Tomcat%20Http/</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><img src="/img/images/1681452257379.png" alt="1681452257379" style="zoom:50%;" /><blockquote><p>XML是EXtensible Markup Language的缩写，翻译过来就是可扩展标记语言。所以很明显，XML和HTML一样都是标记语言，也就是说它们的基本语法都是标签。</p></blockquote><ul><li><p><strong>可扩展</strong> 三个字表面上的意思是XML允许自定义格式。但这不代表你可以随便写。</p></li><li><p>在XML基本语法规范的基础上，你使用的那些第三方应用程序、框架会通过XML约束的方式强制规定配置文件中可以写什么和怎么写</p></li><li><p>XML基本语法这个知识点的定位是：我们不需要从零开始，从头到尾的一行一行编写XML文档，而是在第三方应用程序、框架已提供的配置文件的基础上修改。要改成什么样取决于你的需求，而怎么改取决XML基本语法和具体的XML约束。</p></li></ul><h3 id="常见配置文件类型"><a href="#常见配置文件类型" class="headerlink" title="常见配置文件类型"></a>常见配置文件类型</h3><ol><li>properties文件,例如druid连接池就是使用properties文件作为配置文件</li><li>XML文件,例如Tomcat就是使用XML文件作为配置文件</li><li>YAML文件,例如SpringBoot就是使用YAML作为配置文件</li><li>json文件,通常用来做文件传输，也可以用来做前端或者移动端的配置文件</li><li>等等…</li></ol><h4 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h4><blockquote><p>示例</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">atguigu.jdbc.url=jdbc:mysql://localhost:3306/atguigu</span><br><span class="line">atguigu.jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">atguigu.jdbc.username=root</span><br><span class="line">atguigu.jdbc.password=root</span><br></pre></td></tr></table></figure><blockquote><p>语法规范</p></blockquote><ul><li>由键值对组成</li><li>键和值之间的符号是等号</li><li>每一行都必须顶格写，前面不能有空格之类的其他符号</li></ul><h4 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h4><blockquote><p>示例</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>XML的基本语法</p></blockquote><ul><li>XML的基本语法和HTML的基本语法简直如出一辙。其实这不是偶然的，XML基本语法+HTML约束&#x3D;HTML语法。在逻辑上HTML确实是XML的子集。</li></ul><ul><li>XML文档声明 这部分基本上就是固定格式，要注意的是文档声明一定要从第一行第一列开始写</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根标签<ul><li>&amp;#x20;根标签有且只能有一个。</li></ul></li><li>标签关闭<ul><li>双标签：开始标签和结束标签必须成对出现。</li><li>单标签：单标签在标签内关闭。</li></ul></li><li>标签嵌套<ul><li>可以嵌套，但是不能交叉嵌套。</li></ul></li><li>注释不能嵌套</li><li>标签名、属性名建议使用小写字母</li><li>属性<ul><li>属性必须有值</li><li>属性值必须加引号，单双都行</li></ul></li></ul><blockquote><p>XML的约束(稍微了解)</p></blockquote><p>将来我们主要就是根据XML约束中的规定来编写XML配置文件，而且会在我们编写XML的时候根据约束来提示我们编写, 而XML约束主要包括DTD和Schema两种。</p><ul><li>DTD</li><li>Schema</li></ul><p>Schema约束要求我们一个XML文档中，所有标签，所有属性都必须在约束中有明确的定义。</p><p>下面我们以web.xml的约束声明为例来做个说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DOM4J进行XML解析"><a href="#DOM4J进行XML解析" class="headerlink" title="DOM4J进行XML解析"></a>DOM4J进行XML解析</h3><h4 id="DOM4J的使用步骤"><a href="#DOM4J的使用步骤" class="headerlink" title="DOM4J的使用步骤"></a>DOM4J的使用步骤</h4><ol><li>导入jar包 dom4j.jar</li><li>创建解析器对象(SAXReader)</li><li>解析xml 获得Document对象</li><li>获取根节点RootElement</li><li>获取根节点下的子节点</li></ol><h4 id="DOM4J的API介绍"><a href="#DOM4J的API介绍" class="headerlink" title="DOM4J的API介绍"></a>DOM4J的API介绍</h4><p>1.创建SAXReader对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br></pre></td></tr></table></figure><p>&amp;#x20;2. 解析XML获取Document对象: 需要传入要解析的XML文件的字节输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(inputStream);</span><br></pre></td></tr></table></figure><p>&amp;#x20;3. 获取文档的根标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> documen.getRootElement()</span><br></pre></td></tr></table></figure><p>&amp;#x20;4. 获取标签的子标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有子标签</span></span><br><span class="line">List&lt;Element&gt; sonElementList = rootElement.elements();</span><br><span class="line"><span class="comment">//获取指定标签名的子标签</span></span><br><span class="line">List&lt;Element&gt; sonElementList = rootElement.elements(<span class="string">&quot;标签名&quot;</span>);</span><br></pre></td></tr></table></figure><p>&amp;#x20;5. 获取标签体内的文本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.getText();</span><br></pre></td></tr></table></figure><p>&amp;#x20;6. 获取标签的某个属性的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;属性名&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Tomcat10"><a href="#Tomcat10" class="headerlink" title="Tomcat10"></a>Tomcat10</h2><h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><blockquote><p>Web服务器通常由硬件和软件共同构成。</p></blockquote><ul><li>硬件：电脑，提供服务供其它客户电脑访问</li><li>软件：电脑上安装的服务器软件，安装后能提供服务给网络中的其他计算机，将本地文件映射成一个虚拟的url地址供网络中的其他人访问。</li></ul><p><img src="/img/images/1681441674967.png" alt="1681441674967"></p><blockquote><p>常见的JavaWeb服务器：</p></blockquote><ul><li><strong>Tomcat（Apache）</strong>：当前应用最广的JavaWeb服务器</li><li>Jetty:更轻量级、更灵活的servlet容器</li><li>JBoss（Redhat红帽）：支持JavaEE，应用比较广EJB容器 –&gt; SSH轻量级的框架代替</li><li>GlassFish（Orcale）：Oracle开发JavaWeb服务器，应用不是很广</li><li>Resin（Caucho）：支持JavaEE，应用越来越广</li><li>Weblogic（Orcale）：要钱的！支持JavaEE，适合大型项目</li><li>Websphere（IBM）：要钱的！支持JavaEE，适合大型项目</li></ul><h3 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><img src="/img/images/1681452377469.png" alt="1681452377469" style="zoom:50%;" /><blockquote><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>版本</p></blockquote><ul><li>版本：企业用的比较广泛的是8.0和9.0,目前比较新正式发布版本是Tomcat10.0, Tomcat11仍然处于测试阶段。</li><li>JAVAEE 版本和Servlet版本号对应关系 <a href="https://jakarta.ee/release/">Jakarta EE Releases</a></li></ul><table><thead><tr><th align="left"><strong>Servlet</strong> Version</th><th>EE Version</th></tr></thead><tbody><tr><td align="left">6.1</td><td>Jakarta EE ?</td></tr><tr><td align="left">6.0</td><td>Jakarta EE 10</td></tr><tr><td align="left">5.0</td><td>Jakarta EE 9&#x2F;9.1</td></tr><tr><td align="left">4.0</td><td>JAVA EE 8</td></tr><tr><td align="left">3.1</td><td>JAVA EE 7</td></tr><tr><td align="left">3.1</td><td>JAVA EE 7</td></tr><tr><td align="left">3.0</td><td>JAVAEE 6</td></tr></tbody></table><ul><li>Tomcat 版本和Servlet版本之间的对应关系</li></ul><table><thead><tr><th align="left"><strong>Servlet</strong> Version</th><th align="left">**Tomcat ** Version</th><th align="left"><strong>JDK</strong> Version</th></tr></thead><tbody><tr><td align="left">6.1</td><td align="left">11.0.x</td><td align="left">17 and later</td></tr><tr><td align="left">6.0</td><td align="left">10.1.x</td><td align="left">11 and later</td></tr><tr><td align="left">5.0</td><td align="left">10.0.x (superseded)</td><td align="left">8 and later</td></tr><tr><td align="left">4.0</td><td align="left">9.0.x</td><td align="left">8 and later</td></tr><tr><td align="left">3.1</td><td align="left">8.5.x</td><td align="left">7 and later</td></tr><tr><td align="left">3.1</td><td align="left">8.0.x (superseded)</td><td align="left">7 and later</td></tr><tr><td align="left">3.0</td><td align="left">7.0.x (archived)</td><td align="left">6 and later (7 and later for WebSocket)</td></tr></tbody></table><blockquote><p>下载</p></blockquote><ul><li>Tomcat官方网站：<a href="http://tomcat.apache.org/" title="http://tomcat.apache.org/">http://tomcat.apache.org/</a></li><li>安装版：需要安装，一般不考虑使用。</li><li>解压版: 直接解压缩使用，我们使用的版本。</li></ul><img src="/img/images/1681442513261.png" alt="1681442513261" style="zoom:67%;" /><blockquote><p>安装</p></blockquote><ol><li>正确安装JDK并配置JAVA_HOME(以JDK17为例 <a href="https://injdk.cn中可以下载各种版本的jdk/">https://injdk.cn中可以下载各种版本的JDK</a>)</li></ol><img src="/img/images/1681442778503.png" alt="1681442778503" style="zoom:67%;" /><ol start="2"><li>解压tomcat到非中文无空格目录</li></ol><img src="/img/images/1681442849940.png" alt="1681442849940" style="zoom: 80%;" /><ol start="3"><li>点击bin&#x2F;startup.bat启动</li></ol><img src="/img/images/1681442946756.png" alt="1681442946756" style="zoom: 80%;" /><img src="/img/images/1681442998407.png" alt="1681442998407" style="zoom: 60%;" /><ol start="4"><li>打开浏览器输入 <a href="http://localhost:8080访问测试">http://localhost:8080访问测试</a></li></ol><img src="/img/images/1681443038911.png" alt="1681443038911"  /><ol start="5"><li>直接关闭窗口或者运行 bin&#x2F;shutdown.bat关闭tomcat</li></ol><img src="/img/images/1681442946756.png" alt="1681442946756" style="zoom: 80%;" /><ol start="6"><li>处理dos窗口日志中文乱码问题: 修改conf&#x2F;logging.properties,将所有的UTF-8修改为GBK</li></ol><img src="/img/images/1681443124315.png" alt="1681443124315" style="zoom: 80%;" /><ul><li>修改前</li></ul><img src="/img/images/1681443202115.png" alt="1681443202115" style="zoom:50%;" /><ul><li>修改后</li></ul><img src="/img/images/1681443273573.png" alt="1681443273573" style="zoom:50%;" /><ul><li>重启测试</li></ul><img src="/img/images/1681443314432.png" alt="1681443314432"  /><h3 id="Tomcat目录及测试"><a href="#Tomcat目录及测试" class="headerlink" title="Tomcat目录及测试"></a>Tomcat目录及测试</h3><blockquote><p>C:\Program4java\apache-tomcat-10.1.7 这个目录下直接包含Tomcat的bin目录，conf目录等，我们称之为<strong>Tomcat的安装目录或根目录</strong>。</p></blockquote><ul><li><p>bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件：tomcat10.exe、tomcat10w.exe，前者是在控制台下启动Tomcat，后者是弹出GUI窗口启动Tomcat；如果是解压版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要先配置JAVA_HOME环境变量才能启动，shutdawn.bat用来停止Tomcat；</p></li><li><p>conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件：</p><ul><li><p><strong>server.xml：配置整个服务器信息。例如修改端口号。默认HTTP请求的端口号是：8080</strong></p></li><li><p>tomcat-users.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-jmx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;admin&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">roles</span>=<span class="string">&quot;admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text&#x2F;html类型的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。MIME就是用来说明文档的内容是什么类型的！</p></li><li><p>context.xml：对所有应用的统一配置，通常我们不会去配置它。</p></li></ul></li><li><p>lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中，当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到其他Tomcat下时就不能再共享这个目录下的jar包了，所以建议只把Tomcat需要的jar包放到这个目录下；</p></li><li><p>logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会记录在日志文件中。</p></li><li><p>temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！</p></li><li><p><strong>webapps：存放web项目的目录，其中每个文件夹都是一个项目</strong>；如果这个目录下已经存在了目录，那么都是tomcat自带的项目。其中ROOT是一个特殊的项目，在地址栏中访问：<a href="http://127.0.0.1:8080，没有给出项目目录时，对应的就是ROOT项目.http://localhost:8080/examples，进入示例项目。其中examples"就是项目名，即文件夹的名字。">http://127.0.0.1:8080，没有给出项目目录时，对应的就是ROOT项目.http://localhost:8080/examples，进入示例项目。其中examples&quot;就是项目名，即文件夹的名字。</a></p></li><li><p>work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</p></li><li><p>LICENSE：许可证。</p></li><li><p>NOTICE：说明文件。</p></li></ul><h3 id="WEB项目的标准结构"><a href="#WEB项目的标准结构" class="headerlink" title="WEB项目的标准结构"></a>WEB项目的标准结构</h3><blockquote><p>一个标准的可以用于发布的WEB项目标准结构如下</p></blockquote><p><img src="/img/images/1681453620343.png" alt="1681453620343"></p><ul><li>app  本应用根目录<ul><li>static 非必要目录,约定俗成的名字,一般在此处放静态资源 ( css  js  img)</li><li>WEB-INF  必要目录,必须叫WEB-INF,受保护的资源目录,浏览器通过url不可以直接访问的目录<ul><li>classes     必要目录,src下源代码,配置文件,编译后会在该目录下,web项目中如果没有源码,则该目录不会出现</li><li>lib             必要目录,项目依赖的jar编译后会出现在该目录下,web项目要是没有依赖任何jar,则该目录不会出现</li><li>web.xml   必要文件,web项目的基本配置文件. 较新的版本中可以没有该文件,但是学习过程中还是需要该文件</li></ul></li><li>index.html  非必要文件,index.html&#x2F;index.htm&#x2F;index.jsp为默认的欢迎页</li></ul></li></ul><blockquote><p>url的组成部分和项目中资源的对应关系</p></blockquote><p><img src="/img/images/1681456161723.png" alt="1681456161723"></p><h3 id="WEB项目部署的方式"><a href="#WEB项目部署的方式" class="headerlink" title="WEB项目部署的方式"></a>WEB项目部署的方式</h3><blockquote><p>方式1   直接将编译好的项目放在webapps目录下  (已经演示)</p></blockquote><blockquote><p>方式2   将编译好的项目打成war包放在webapps目录下,tomcat启动后会自动解压war包(其实和第一种一样)</p></blockquote><blockquote><p>方式3   可以将项目放在非webapps的其他目录下,在tomcat中通过配置文件指向app的实际磁盘路径</p></blockquote><ul><li>在磁盘的自定义目录上准备一个app</li></ul><p><img src="/img/images/1681456447284.png" alt="1681456447284"></p><ul><li>在tomcat的conf下创建Catalina&#x2F;localhost目录,并在该目录下准备一个app.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">path: 项目的访问路径,也是项目的上下文路径,就是在浏览器中,输入的项目名称</span></span><br><span class="line"><span class="comment">    docBase: 项目在磁盘中的实际路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\mywebapps\app&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动tomcat访问测试即可</li></ul><h3 id="IDEA中开发并部署运行WEB项目"><a href="#IDEA中开发并部署运行WEB项目" class="headerlink" title="IDEA中开发并部署运行WEB项目"></a>IDEA中开发并部署运行WEB项目</h3><h4 id="IDEA关联本地Tomcat"><a href="#IDEA关联本地Tomcat" class="headerlink" title="IDEA关联本地Tomcat"></a>IDEA关联本地Tomcat</h4><blockquote><p>可以在创建项目前设置本地tomcat,也可以在打开某个项目的状态下找到settings</p></blockquote><img src="/img/images/1681457611053.png" alt="1681457611053" style="zoom: 80%;" /><blockquote><p>找到 Build,Execution,Eeployment下的Application Servers ,找到+号</p></blockquote><img src="/img/images/1681457711914.png" alt="1681457711914"  /><blockquote><p>选择Tomcat Server</p></blockquote><img src="/img/images/1681457800708.png" alt="1681457800708"  /><blockquote><p>选择tomcat的安装目录</p></blockquote><img src="/img/images/1681457879937.png" alt="1681457879937" style="zoom:50%;" /><blockquote><p>点击ok</p></blockquote><img src="/img/images/1681457921094.png" alt="1681457921094"  /><blockquote><p>关联完毕</p></blockquote><img src="/img/images/1681458031957.png" alt="1681458031957" style="zoom:65%;" /><h4 id="IDEA创建web工程"><a href="#IDEA创建web工程" class="headerlink" title="IDEA创建web工程"></a>IDEA创建web工程</h4><blockquote><p>推荐先创建一个空项目,这样可以在一个空项目下同时存在多个modules,不用后续来回切换之前的项目,当然也可以忽略此步直接创建web项目</p></blockquote><img src="/img/images/1681458194939.png" alt="1681458194939" style="zoom: 60%;" /><img src="/img/images/1681458273381.png" alt="1681458273381" style="zoom: 60%;" /><blockquote><p>检查项目的SDK,语法版本,以及项目编译后的输出目录</p></blockquote><img src="/img/images/1681458343921.png" alt="1681458343921" style="zoom:50%;" /><img src="/img/images/1681458393871.png" alt="1681458393871" style="zoom: 55%;" /><blockquote><p>先创建一个普通的JAVA项目</p></blockquote><img src="/img/images/1681458485837.png" alt="1681458485837" style="zoom:63%;" /><blockquote><p>检查各项信息是否填写有误</p></blockquote><img src="/img/images/1681458599545.png" alt="1681458599545" style="zoom:60%;" /><blockquote><p>创建完毕后,为项目添加Tomcat依赖</p></blockquote><img src="/img/images/1681458857830.png" alt="1681458857830" style="zoom: 67%;" /><img src="/img/images/1681458897017.png" alt="1681458897017" style="zoom: 95%;" /><img src="/img/images/1681458939400.png" alt="1681458939400" style="zoom:70%;" /><blockquote><p>选择modules,添加  framework support</p></blockquote><img src="/img/images/1681458672258.png" alt="1681458672258" style="zoom: 80%;" /><blockquote><p>选择Web Application 注意Version,勾选  Create web.xml</p></blockquote><img src="/img/images/1681459007273.png" alt="1681459007273" style="zoom:80%;" /><blockquote><p>删除index.jsp ,替换为 index.html</p></blockquote><p><img src="/img/images/1681459080873.png" alt="1681459080873"></p><img src="/img/images/1681459147133.png" alt="1681459147133" style="zoom: 67%;" /><blockquote><p>处理配置文件</p></blockquote><ul><li>在工程下创建resources目录,专门用于存放配置文件(都放在src下也行,单独存放可以尽量避免文件集中存放造成的混乱)</li><li>标记目录为资源目录,不标记的话则该目录不参与编译</li></ul><img src="/img/images/1681461443278.png" alt="1681461443278" style="zoom:67%;" /><ul><li>标记完成后,显示效果如下</li></ul><img src="/img/images/1681461513406.png" alt="1681461513406"  /><blockquote><p>处理依赖jar包问题</p></blockquote><ul><li>在WEB-INF下创建lib目录</li><li>必须在WEB-INF下,且目录名必须叫lib!!!</li><li>复制jar文件进入lib目录</li></ul><p><img src="/img/images/1681461788411.png" alt="1681461788411"></p><ul><li>将lib目录添加为当前项目的依赖,后续可以用maven统一解决</li></ul><img src="/img/images/1681461846178.png" alt="1681461846178" style="zoom:67%;" /><p><img src="/img/images/1681461881121.png" alt="1681461881121"></p><ul><li>环境级别推荐选择module 级别,降低对其他项目的影响,name可以空着不写</li></ul><p><img src="/img/images/1681461923761.png" alt="1681461923761"></p><ul><li>查看当前项目有那些环境依赖</li></ul><p><img src="/img/images/1681463867295.png" alt="1681463867295"></p><img src="/img/images/1681462179671.png" alt="1681462179671" style="zoom:50%;" /><ul><li>在此位置,可以通过-号解除依赖</li></ul><img src="/img/images/1681462247973.png" alt="1681462247973" style="zoom:85%;" /><h4 id="IDEA部署-运行web项目"><a href="#IDEA部署-运行web项目" class="headerlink" title="IDEA部署-运行web项目"></a>IDEA部署-运行web项目</h4><blockquote><p>检查idea是否识别modules为web项目并存在将项目构建成发布结构的配置</p></blockquote><ul><li>就是检查工程目录下,web目录有没有特殊的识别标记</li></ul><p><img src="/img/images/1681462523901.png" alt="1681462523901"></p><ul><li>以及artifacts下,有没有对应 _war_exploded,如果没有,就点击+号添加</li></ul><img src="/img/images/1681462584524.png" alt="1681462584524" style="zoom: 50%;" /><blockquote><p>点击向下箭头,出现 Edit Configurations选项</p></blockquote><img src="/img/images/1681462645070.png" alt="1681462645070" style="zoom:100%;" /><blockquote><p>出现运行配置界面</p></blockquote><img src="/img/images/1681462710108.png" alt="1681462710108" style="zoom: 67%;" /><blockquote><p>点击+号,添加本地tomcat服务器</p></blockquote><img src="/img/images/1681462754191.png" alt="1681462754191" style="zoom:67%;" /><blockquote><p>因为IDEA 只关联了一个Tomcat,红色部分就只有一个Tomcat可选</p></blockquote><img src="/img/images/1681462798933.png" alt="1681462798933" style="zoom: 65%;" /><blockquote><p>选择Deployment,通过+添加要部署到Tomcat中的artifact</p></blockquote><img src="/img/images/1681463011546.png" alt="1681463011546" style="zoom:65%;" /><blockquote><p>applicationContext中是默认的项目上下文路径,也就是url中需要输入的路径,这里可以自己定义,可以和工程名称不一样,也可以不写,但是要保留&#x2F;,我们这里暂时就用默认的</p></blockquote><img src="/img/images/1681463049807.png" alt="1681463049807" style="zoom:80%;" /><blockquote><p>点击apply 应用后,回到Server部分. After Launch是配置启动成功后,是否默认自动打开浏览器并输入URL中的地址,HTTP port是Http连接器目前占用的端口号</p></blockquote><img src="/img/images/1681463212587.png" alt="1681463212587" style="zoom:80%;" /><blockquote><p>点击OK后,启动项目,访问测试</p></blockquote><ul><li>绿色箭头是正常运行模式</li><li>“小虫子”是debug运行模式</li></ul><img src="/img/images/1681463386274.png" alt="1681463386274" style="zoom:80%;" /><ul><li>点击后,查看日志状态是否有异常</li></ul><img src="/img/images/1681463361795.png" alt="1681463361795" style="zoom:100%;" /><ul><li>浏览器自动打开并自动访问了index.html欢迎页</li></ul><img src="/img/images/1681520068936.png" alt="1681520068936" style="zoom:50%;" /><blockquote><p>工程结构和可以发布的项目结构之间的目录对应关系</p></blockquote><p><img src="/img/images/1681464081226.png" alt="1681464081226"></p><blockquote><p>IDEA部署并运行项目的原理</p></blockquote><ul><li>idea并没有直接进将编译好的项目放入tomcat的webapps中</li><li>idea根据关联的tomcat,创建了一个tomcat副本,将项目部署到了这个副本中</li><li>idea的tomcat副本在C:\用户\当前用户\AppData\Local\JetBrains\IntelliJIdea2022.2\tomcat\中</li><li>idea的tomcat副本并不是一个完整的tomcat,副本里只是准备了和当前项目相关的配置文件而已</li><li>idea启动tomcat时,是让本地tomcat程序按照tomcat副本里的配置文件运行</li><li>idea的tomcat副本部署项目的模式是通过conf&#x2F;Catalina&#x2F;localhost&#x2F;*.xml配置文件的形式实现项目部署的</li></ul><p><img src="/img/images/1681521240438.png" alt="1681521240438"></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><img src="/img/images/1681522638617.png" alt="1681522638617" style="zoom: 67%;" /><img src="/img/images/1681522600239.png" alt="1681522600239" style="zoom:67%;" /><blockquote><p><strong>HTTP 超文本传输协议</strong> (HTTP-Hyper Text transfer protocol)，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过十几年的使用与发展，得到不断地完善和扩展。<strong>它是一种详细规定了浏览器和万维网服务器之间互相通信的规则</strong>，通过因特网传送万维网文档的数据传送协议。客户端与服务端通信时传输的内容我们称之为<strong>报文</strong>。<strong>HTTP协议就是规定报文的格式。</strong>HTTP就是一个通信规则，这个规则规定了客户端发送给服务器的报文格式，也规定了服务器发送给客户端的报文格式。实际我们要学习的就是这两种报文<strong>。客户端发送给服务器的称为”请求报文</strong>“，**服务器发送给客户端的称为”响应报文”**。</p></blockquote><h4 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h4><blockquote><p>HTTP&#x2F;0.9 </p></blockquote><ul><li>蒂姆伯纳斯李是一位英国计算机科学家，也是万维网的发明者。他在 1989 年创建了单行 HTTP 协议。它只是返回一个网页。这个协议在 1991 年被命名为 HTTP&#x2F;0.9。</li></ul><blockquote><p> HTTP&#x2F;1.0</p></blockquote><ul><li>1996 年，HTTP&#x2F;1.0 发布。该规范是显著扩大，并且支持三种请求方法：GET，Head，和POST。 </li><li>HTTP&#x2F;1.0 相对于 HTTP&#x2F;0.9的改进如下：<ul><li>每个请求都附加了 HTTP 版本。</li><li>在响应开始时发送状态代码。</li><li>请求和响应都包含 HTTP 报文头。</li><li>内容类型能够传输 HTML 文件以外的文档。</li></ul></li><li>但是，HTTP&#x2F;1.0 不是官方标准。</li></ul><blockquote><p>HTTP&#x2F;1.1</p></blockquote><ul><li><p>HTTP的第一个标准化版本 HTTP&#x2F;1.1 ( RFC 2068 ) 于 1997 年初发布，支持七种请求方法：OPTIONS，GET，HEAD，POST，PUT，DELETE，和TRACE </p></li><li><p>HTTP&#x2F;1.1 是 HTTP 1.0的增强：</p><ul><li><p>虚拟主机允许从单个 IP 地址提供多个域。</p></li><li><p>持久连接和流水线连接允许 Web 浏览器通过单个持久连接发送多个请求。</p></li><li><p>缓存支持节省了带宽并使响应速度更快。</p></li></ul></li><li><p>HTTP&#x2F;1.1 在接下来的 15 年左右将非常稳定。 </p></li><li><p>在此期间，出现了 HTTPS（安全超文本传输协议）。它是使用 SSL&#x2F;TLS 进行安全加密通信的 HTTP的安全版本。</p></li></ul><blockquote><p>HTTP&#x2F;2</p></blockquote><ul><li>由IETF在2015年发布。HTTP&#x2F;2旨在提高Web性能，减少延迟，增加安全性，使Web应用更加快速、高效和可靠。</li></ul><ul><li>多路复用：HTTP&#x2F;2 允许同时发送多个请求和响应，而不是像 HTTP&#x2F;1.1 一样只能一个一个地处理。这样可以减少延迟，提高效率，提高网络吞吐量。</li><li>二进制传输：HTTP&#x2F;2 使用二进制协议，与 HTTP&#x2F;1.1 使用的文本协议不同。二进制协议可以更快地解析，更有效地传输数据，减少了传输过程中的开销和延迟。</li><li>头部压缩：HTTP&#x2F;2 使用 HPACK 算法对 HTTP 头部进行压缩，减少了头部传输的数据量，从而减少了网络延迟。</li><li>服务器推送：HTTP&#x2F;2 支持服务器推送，允许服务器在客户端请求之前推送资源，以提高性能。</li><li>改进的安全性：HTTP&#x2F;2 默认使用 TLS（Transport Layer Security）加密传输数据，提高了安全性。</li><li>兼容 HTTP&#x2F;1.1：HTTP&#x2F;2 可以与 HTTP&#x2F;1.1 共存，服务器可以同时支持 HTTP&#x2F;1.1 和 HTTP&#x2F;2。如果客户端不支持 HTTP&#x2F;2，服务器可以回退到 HTTP&#x2F;1.1。</li></ul><blockquote><p>HTTP&#x2F;3</p></blockquote><ul><li><p>于 2021 年 5 月 27 日发布 , HTTP&#x2F;3 是一种新的、快速、可靠且安全的协议，适用于所有形式的设备。 HTTP&#x2F;3 没有使用 TCP，而是使用谷歌在 2012 年开发的新协议 QUIC </p></li><li><p>HTTP&#x2F;3 是继 HTTP&#x2F;1.1 和 HTTP&#x2F;2之后的第三次重大修订。 </p></li><li><p>HTTP&#x2F;3 带来了革命性的变化，以提高 Web 性能和安全性。设置 HTTP&#x2F;3 网站需要服务器和浏览器支持。</p></li><li><p>目前，谷歌云、Cloudflare和Fastly支持 HTTP&#x2F;3。Chrome、Firefox、Edge、Opera 和一些移动浏览器支持 HTTP&#x2F;3。</p></li></ul><h4 id="HTTP协议的会话方式"><a href="#HTTP协议的会话方式" class="headerlink" title="HTTP协议的会话方式"></a>HTTP协议的会话方式</h4><blockquote><p>浏览器与服务器之间的通信过程要经历四个步骤</p></blockquote><p><img src="/img/images/1557672342250_1H8nt17MNz.png"></p><ul><li>浏览器与WEB服务器的连接过程是短暂的，每次连接只处理一个请求和响应。对每一个页面的访问，浏览器与WEB服务器都要建立一次单独的连接。</li><li>浏览器到WEB服务器之间的所有通讯都是完全独立分开的请求和响应对。</li></ul><h4 id="HTTP1-0和HTTP1-1的区别"><a href="#HTTP1-0和HTTP1-1的区别" class="headerlink" title="HTTP1.0和HTTP1.1的区别"></a>HTTP1.0和HTTP1.1的区别</h4><blockquote><p>在HTTP1.0版本中，浏览器请求一个带有图片的网页，会由于下载图片而与服务器之间开启一个新的连接；但在HTTP1.1版本中，允许浏览器在拿到当前请求对应的全部资源后再断开连接，提高了效率。</p></blockquote><p><img src="/img/images/1557672415271_EgyN-GdbWY.png"></p><h4 id="在浏览器中通过F12工具抓取请求响应报文包"><a href="#在浏览器中通过F12工具抓取请求响应报文包" class="headerlink" title="在浏览器中通过F12工具抓取请求响应报文包"></a>在浏览器中通过F12工具抓取请求响应报文包</h4><blockquote><p>几乎所有的PC端浏览器都支持了F12开发者工具,只不过不同的浏览器工具显示的窗口有差异</p></blockquote><img src="/img/images/1681522138051.png" alt="1681522138051" style="zoom:80%;" /><h3 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h3><h4 id="报文的格式"><a href="#报文的格式" class="headerlink" title="报文的格式"></a>报文的格式</h4><blockquote><p>主体上分为报文首部和报文主体,中间空行隔开</p></blockquote><img src="/img/images/1681522962846.png" alt="1681522962846" style="zoom: 62%;" /><blockquote><p>报文部首可以继续细分为  “行” 和 “头”</p></blockquote><p><img src="/img/images/1681522998417.png" alt="1681522998417"></p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><blockquote><p>客户端发给服务端的报文</p></blockquote><ul><li>请求报文格式<ul><li>请求首行（<strong>请求行</strong>）；    GET&#x2F;POST   资源路径?参数   HTTP&#x2F;1.1</li><li>请求头信息（<strong>请求头</strong>）；</li><li>空行；</li><li>请求体；POST请求才有请求体</li></ul></li></ul><blockquote><p>浏览器 f12 网络下查看请求数据包</p></blockquote><p><img src="/img/images/1681524200024.png" alt="1681524200024"></p><blockquote><p>form表单发送GET请求特点</p></blockquote><p>1、由于请求参数在请求首行中已经携带了，所以没有请求体，也没有请求空行<br>2、请求参数拼接在url地址中，地址栏可见[url?name1&#x3D;value1&amp;name2&#x3D;value2]，不安全<br>3、由于参数在地址栏中携带，所以由大小限制[地址栏数据大小一般限制为4k]，只能携带纯文本<br>4、get请求参数只能上传文本数据<br>5、没有请求体。所以封装和解析都快，效率高， 浏览器默认提交的请求都是get请求比如：地址栏输入回车,超链接,表单默认的提交方式</p><blockquote><p>查看GET请求行,请求头,请求体</p></blockquote><ul><li>请求行组成部分<ul><li>请求方式  GET</li><li>访问服务器的资源路径?参数1&#x3D;值1&amp;参数2&#x3D;值2 … …</li><li>协议及版本 HTTP&#x2F;1.1</li></ul></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/05_web_tomcat/login_success.html?username=admin&amp;password=123213</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><ul><li>请求头</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-主机虚拟地址</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080   </span><br><span class="line">-长连接</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive </span><br><span class="line">-请求协议的自动升级[http的请求，服务器却是https的，浏览器自动会将请求协议升级为https的]</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1  </span><br><span class="line">- 用户系统信息</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36</span><br><span class="line">- 浏览器支持的文件类型</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">- 当前页面的上一个页面的路径[当前页面通过哪个页面跳转过来的]：   可以通过此路径跳转回上一个页面， 广告计费，防止盗链</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8080/05_web_tomcat/login.html</span><br><span class="line">- 浏览器支持的压缩格式</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line">- 浏览器支持的语言</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br></pre></td></tr></table></figure><ul><li><p>请求空行</p></li><li><p>请求体</p><ul><li>GET请求数据不放在请求体</li></ul></li></ul><blockquote><p>form表单发送post请求特点</p></blockquote><p>1、POST请求有请求体，而GET请求没有请求体。<br>2、post请求数据在请求体中携带，请求体数据大小没有限制，可以用来上传所有内容[文件、文本]<br>3、只能使用post请求上传文件<br>4、post请求报文多了和请求体相关的配置[请求头]<br>5、地址栏参数不可见，相对安全<br>6、post效率比get低</p><ul><li>POST请求要求将form标签的method的属性设置为post</li></ul><p><img src="/img/images/1681525012046.png" alt="1681525012046"></p><blockquote><p>查看post的请求行 请求头 请求体</p></blockquote><ul><li>请求行组成部分<ul><li>请求方式 POST</li><li>访问服务器的资源路径?参数1&#x3D;值1&amp;参数2&#x3D;值2 … …</li><li>协议及版本 HTTP&#x2F;1.1</li></ul></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/05_web_tomcat/login_success.html</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><ul><li>请求头</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>31     -请求体内容的长度</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0  -无缓存</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://localhost:8080</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1  -协议的自动升级</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded   -请求体内容类型[服务器根据类型解析请求体参数]</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8080/05_web_tomcat/login.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie:JSESSIONID-</span><br></pre></td></tr></table></figure><ul><li><p>请求空行</p></li><li><p>请求体:浏览器提交给服务器的数据</p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=admin&amp;password=1232131</span><br></pre></td></tr></table></figure><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><blockquote><p>响应报文格式</p></blockquote><ul><li>响应首行（<strong>响应行</strong>）； 协议&#x2F;版本  状态码    状态码描述</li><li>响应头信息（<strong>响应头</strong>）；</li><li>空行；</li><li>响应体；</li></ul><p><img src="/img/images/1681525347456.png" alt="1681525347456"></p><p><img src="/img/images/1681525384347.png" alt="1681525384347"></p><ul><li>响应行组成部分<ul><li>协议及版本 HTTP&#x2F;1.1</li><li>响应状态码 200</li><li>状态描述   OK  (缺省)</li></ul></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">说明：响应协议为HTTP1.1，响应状态码为200，表示请求成功； </span><br></pre></td></tr></table></figure><ul><li>响应头</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1   服务器的版本信息</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>W/&quot;157-1534126125811&quot;</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Mon, 13 Aug 2018 02:08:45 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html    响应体数据的类型[浏览器根据类型解析响应体数据]</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>157   响应体内容的字节数</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 13 Aug 2018 02:47:57 GMT  响应的时间，这可能会有8小时的时区差</span><br></pre></td></tr></table></figure><ul><li>响应体</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要浏览器解析使用的内容[如果响应的是html页面，最终响应体内容会被浏览器显示到页面中]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    恭喜你，登录成功了...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>响应状态码:响应码对浏览器来说很重要，它告诉浏览器响应的结果。比较有代表性的响应码如下：</p></blockquote><ul><li><strong>200：</strong> 请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；</li><li><strong>302：</strong> 重定向，当响应码为302时，表示服务器要求浏览器重新再发一个请求，服务器会发送一个响应头Location指定新请求的URL地址；</li><li><strong>304：</strong> 使用了本地缓存</li><li><strong>404：</strong> 请求的资源没有找到，说明客户端错误的请求了不存在的资源；</li><li><strong>405：</strong> 请求的方式不允许</li><li><strong>500：</strong> 请求资源找到了，但服务器内部出现了错误；</li></ul><blockquote><p>更多的响应状态码</p></blockquote><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文描述</th><th align="left">中文含义</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left">2**</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left">3**</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left">4**</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left">5**</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 JS</title>
      <link href="/2024/11/10/1JavaScript/"/>
      <url>/2024/11/10/1JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JS的引入方式"><a href="#JS的引入方式" class="headerlink" title="JS的引入方式"></a>JS的引入方式</h2><blockquote><p>内部脚本方式引入</p></blockquote><ul><li><p>说明</p><ul><li>在页面中,通过一对script标签引入JS代码</li><li>script代码放置位置具备一定的随意性,一般放在head标签中居多</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 通过选择器确定样式的作用范围 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.btn1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">150px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">241</span>, <span class="number">129</span>); </span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">31</span>, <span class="number">31</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">23</span>, <span class="number">66</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">suprise</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;Hello,我是惊喜&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;suprise()&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/jingxi.gif" alt="jingxi" style="zoom:67%;" /><blockquote><p>外部脚本方式引入</p></blockquote><ul><li>说明<ul><li>内部脚本仅能在当前页面上使用,代码复用度不高</li><li>可以将脚本放在独立的js文件中,通过script标签引入外部脚本文件</li><li>一对script标签要么用于定义内部脚本,要么用于引入外部js文件,不能混用</li><li>一个html文档中,可以有多个script标签</li></ul></li><li>抽取脚本代码到独立的js文件中</li></ul><img src="/img/images/1681270974917.png" alt="1681270974917" style="zoom:80%;" /><ul><li>在html文件中,通过script标签引入外部脚本文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 通过选择器确定样式的作用范围 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.btn1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">150px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">245</span>, <span class="number">241</span>, <span class="number">129</span>); </span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">31</span>, <span class="number">31</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">23</span>, <span class="number">66</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/button.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;suprise()&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS的数据类型和运算符"><a href="#JS的数据类型和运算符" class="headerlink" title="JS的数据类型和运算符"></a>JS的数据类型和运算符</h2><h3 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h3><blockquote><p>数值类型</p></blockquote><ul><li>数值类型统一为 number,不区分整数和浮点数</li></ul><blockquote><p>字符串类型</p></blockquote><ul><li>字符串类型为 string 和JAVA中的String相似,JS中不严格区分单双引号,都可以用于表示字符串</li></ul><blockquote><p>布尔类型</p></blockquote><ul><li>布尔类型为boolean 和Java中的boolean相似,但是在JS的if语句中,非空字符串会被转换为’真’,非零数字也会被认为是’真’</li></ul><blockquote><p>引用数据类型</p></blockquote><ul><li>引用数据类型对象是Object类型, 各种对象和数组在JS中都是Object类型</li></ul><blockquote><p>function类型</p></blockquote><ul><li>JS中的各种函数属于function数据类型</li></ul><blockquote><p>命名未赋值</p></blockquote><ul><li>js为弱类型语言,统一使用 var 声明对象和变量,在赋值时才确定真正的数据类型,变量如果只声明没有赋值的话,数据类型为undefined</li></ul><blockquote><p>赋予NULL值</p></blockquote><ul><li>在JS中,如果给一个变量赋值为null,其数据类型是Object, 可以通过typeof关键字判断数据类型</li></ul><h3 id="JS的变量"><a href="#JS的变量" class="headerlink" title="JS的变量"></a>JS的变量</h3><blockquote><p>JS中的变量具有如下特征</p></blockquote><ul><li>1 弱类型变量,可以统一声明成var</li><li>2 var声明的变量可以再次声明</li><li>3 变量可以使用不同的数据类型多次赋值</li><li>4 JS的语句可以以; 结尾,也可以不用;结尾</li><li>5 变量标识符严格区分大小写</li><li>6 标识符的命名规则参照JAVA</li><li>7 如果使用了 一个没有声明的变量,那么运行时会报uncaught ReferenceError: *** is not defined   at index.html:行号:列号</li><li>8 如果一个变量只声明,没赋值,那么值是undefined</li></ul><h3 id="JS的运算符"><a href="#JS的运算符" class="headerlink" title="JS的运算符"></a>JS的运算符</h3><blockquote><p> 算数运算符  + - * &#x2F;  %</p></blockquote><ul><li>其中需要注意的是 &#x2F; 和 % <ul><li>&#x2F; 在除0时,结果是Infinity ,而不是报错</li><li>%在模0时,结果是NaN,意思为 not a number ,而不是报错</li></ul></li></ul><blockquote><p>复合算数运算符 ++ –  +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</p></blockquote><ul><li>符合算数运算符基本和JAVA一致,同样需要注意 &#x2F;&#x3D;和%&#x3D;<ul><li>在&#x2F;&#x3D;0时,结果是Infinity ,而不是报错</li><li>在%&#x3D;0时,结果是NaN,意思为 not a number ,而不是报错</li></ul></li></ul><blockquote><p>关系运算符  &gt;   &lt;  &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;</p></blockquote><ul><li>需要注意的是 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 差别<ul><li>&#x3D;&#x3D; 符号,如果两端的数据类型不一致,会尝试将两端的数据转换成number,再对比number大小<ul><li>‘123’  这种字符串可以转换成数字</li><li>true会被转换成1 false会被转换成0</li></ul></li><li>&#x3D;&#x3D;&#x3D;  符号,如果两端数据类型不一致,直接返回false,数据类型一致在比较是否相同</li></ul></li></ul><blockquote><p>逻辑运算符  || &amp;&amp;    </p></blockquote><ul><li>几乎和JAVA中的一样,需要注意的是,这里直接就是短路的逻辑运算符,单个的 |   和 &amp;  以及 ^ 是位运算符</li></ul><blockquote><p>条件运算符  条件? 值1  : 值2</p></blockquote><ul><li>几乎和JAVA中的一样</li></ul><blockquote><p>位运算符  |  &amp;  ^  &lt;&lt;  &gt;&gt;  &gt;&gt;&gt;</p></blockquote><ul><li>和 java中的类似(了解)</li></ul><h2 id="JS的流程控制和函数"><a href="#JS的流程控制和函数" class="headerlink" title="JS的流程控制和函数"></a>JS的流程控制和函数</h2><h3 id="JS分支结构"><a href="#JS分支结构" class="headerlink" title="JS分支结构"></a>JS分支结构</h3><blockquote><p>if结构</p></blockquote><ul><li><p>这里的if结构几乎和JAVA中的一样,需要注意的是</p><ul><li>if()中的非空字符串会被认为是true</li><li>if()中的非零数字会被认为是true</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;false&#x27;</span>)&#123;<span class="comment">// 非空字符串 if判断为true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;&#x27;</span>)&#123;<span class="comment">// 长度为0字符串 if判断为false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;<span class="comment">// 非零数字 if判断为true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="/img/images/1681285904625.png" alt="1681285904625"></p><blockquote><p>switch结构</p></blockquote><ul><li><p>几乎和JAVA的语法一致</p></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> monthStr=<span class="title function_">prompt</span>(<span class="string">&quot;请输入月份&quot;</span>,<span class="string">&quot;例如:10 &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> month= <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(monthStr)</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;月份有误&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/switchex.gif" alt="switchex" style="zoom:67%;" /><h3 id="JS循环结构"><a href="#JS循环结构" class="headerlink" title="JS循环结构"></a>JS循环结构</h3><blockquote><p>while结构</p></blockquote><ul><li><p>几乎和JAVA一致</p></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 打印99 乘法表 */</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= i)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;hr/&gt;&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681287264843.png" alt="1681287264843" style="zoom: 80%;" /><blockquote><p>for循环</p></blockquote><ul><li><p>几乎和JAVA一致</p></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 打印99 乘法表 */</span></span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;hr/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681287264843.png" alt="1681287264843" style="zoom:50%;" /><blockquote><p>foreach循环</p></blockquote><ul><li><p>迭代数组时,和java不一样</p><ul><li>括号中的临时变量表示的是元素的索引,不是元素的值,</li><li>()中也不在使用: 分隔,而是使用 in 关键字</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cities =[<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;武汉&quot;</span>,<span class="string">&quot;西安&quot;</span>,<span class="string">&quot;成都&quot;</span>]</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;ul&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span>  cities)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;li&gt;&quot;</span>+cities[index]+<span class="string">&quot;&lt;/li&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/ul&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681287540562.png" alt="1681287540562"></p><h3 id="JS函数声明"><a href="#JS函数声明" class="headerlink" title="JS函数声明"></a>JS函数声明</h3><blockquote><p>JS中的方法,多称为函数,函数的声明语法和JAVA中有较大区别</p></blockquote><ul><li>函数说明<ul><li>函数没有权限控制符</li><li>不用声明函数的返回值类型,需要返回在函数体中直接return即可,也无需void关键字</li><li>参数列表中,无需数据类型</li><li>调用函数时,实参和形参的个数可以不一致</li><li>声明函数时需要用function关键字</li><li>J函数没有异常列表</li></ul></li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法1 </span></span><br><span class="line"><span class="comment">    function 函数名 (参数列表)&#123;函数体&#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法2</span></span><br><span class="line"><span class="comment">    var 函数名 = function (参数列表)&#123;函数体&#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li>调用测试</li></ul><p><img src="/img/images/1681287984473.png" alt="1681287984473"></p><h2 id="JS的对象和JSON"><a href="#JS的对象和JSON" class="headerlink" title="JS的对象和JSON"></a>JS的对象和JSON</h2><h3 id="JS声明对象的语法"><a href="#JS声明对象的语法" class="headerlink" title="JS声明对象的语法"></a>JS声明对象的语法</h3><blockquote><p>语法1 通过new Object()直接创建对象</p></blockquote><ul><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person =<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">// 给对象添加属性并赋值</span></span><br><span class="line">person.<span class="property">name</span>=<span class="string">&quot;张小明&quot;</span>;</span><br><span class="line">person.<span class="property">age</span>=<span class="number">10</span>;</span><br><span class="line">person.<span class="property">foods</span>=[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;橘子&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;葡萄&quot;</span>];</span><br><span class="line"><span class="comment">// 给对象添加功能函数</span></span><br><span class="line">person.<span class="property">eat</span>= <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;喜欢吃:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>[i])</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得对象属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="comment">//调用对象方法</span></span><br><span class="line">person.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681288692792.png" alt="1681288692792"></p><blockquote><p>语法2 通过 {}形式创建对象</p></blockquote><ul><li>语法为  var person &#x3D;{“属性名”:”属性值”,”属性名”,”属性值”,”函数名”:函数}</li><li>代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张小明&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;foods&quot;</span>:[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;橘子&quot;</span>,<span class="string">&quot;葡萄&quot;</span>],</span><br><span class="line">    <span class="string">&quot;eat&quot;</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁的&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;喜欢吃:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foods</span>[i])</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得对象属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="comment">//调用对象方法</span></span><br><span class="line">person.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681288692792.png" alt="1681288692792"></p><h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><blockquote><p> JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率 <font color="red">简单来说,JSON 就是一种字符串格式,这种格式无论是在前端还是在后端,都可以很容易的转换成对象,所以常用于前后端数据传递</font></p></blockquote><ul><li><p>说明</p><ul><li><p>JSON的语法</p><p>  ​var obj&#x3D;”{‘属性名’:’属性值’,’属性名’:{‘属性名’:’属性值’},’属性名’:[‘值1’,’值1’,’值3’]}”</p></li><li><p>JSON字符串一般用于传递数据,所以字符串中的函数就显得没有意义,在此不做研究</p></li><li><p>通过JSON.parse()方法可以将一个JSON串转换成对象</p></li><li><p>通过JSON.stringify()方法可以将一个对象转换成一个JSON格式的字符串</p></li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义一个JSON串 */</span></span><br><span class="line"><span class="keyword">var</span> personStr =<span class="string">&#x27;&#123;&quot;name&quot;:&quot;张小明&quot;,&quot;age&quot;:20,&quot;girlFriend&quot;:&#123;&quot;name&quot;:&quot;铁铃&quot;,&quot;age&quot;:23&#125;,&quot;foods&quot;:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;橘子&quot;,&quot;葡萄&quot;],&quot;pets&quot;:[&#123;&quot;petName&quot;:&quot;大黄&quot;,&quot;petType&quot;:&quot;dog&quot;&#125;,&#123;&quot;petName&quot;:&quot;小花&quot;,&quot;petType&quot;:&quot;cat&quot;&#125;]&#125;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> personStr)</span><br><span class="line"><span class="comment">/* 将一个JSON串转换为对象 */</span></span><br><span class="line"><span class="keyword">var</span> person =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(personStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> person)</span><br><span class="line"><span class="comment">/* 获取对象属性值 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">girlFriend</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">foods</span>[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petType</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义一个对象 */</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张小明&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;girlFriend&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;铁铃&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;foods&#x27;</span>:[<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;香蕉&#x27;</span>,<span class="string">&#x27;橘子&#x27;</span>,<span class="string">&#x27;葡萄&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;pets&#x27;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;petName&#x27;</span>:<span class="string">&#x27;大黄&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;petType&#x27;</span>:<span class="string">&#x27;dog&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;petName&#x27;</span>:<span class="string">&#x27;小花&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;petType&#x27;</span>:<span class="string">&#x27;cat&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取对象属性值 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">girlFriend</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">foods</span>[<span class="number">1</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petName</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pets</span>[<span class="number">1</span>].<span class="property">petType</span>)</span><br><span class="line"><span class="comment">/* 将对象转换成JSON字符串 */</span></span><br><span class="line"><span class="keyword">var</span> personStr =<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> personStr)</span><br></pre></td></tr></table></figure><ul><li>前后端传递数据</li></ul><p><img src="/img/images/1681292306466.png" alt="1681292306466"></p><h3 id="JS常见对象"><a href="#JS常见对象" class="headerlink" title="JS常见对象"></a>JS常见对象</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote><p>创建数组的四种方式</p></blockquote><ul><li>new Array()                                                   创建空数组</li><li>new Array(5)                                                 创建数组时给定长度</li><li>new Array(ele1,ele2,ele3,… … ,elen);          创建数组时指定元素值</li><li>[ele1,ele2,ele3,… … ,elen];                           相当于第三种语法的简写</li></ul><blockquote><p>数组的常见API</p></blockquote><ul><li>在JS中,数组属于Object类型,其长度是可以变化的,更像JAVA中的集合</li></ul><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-concat-array.html">concat()</a></td><td align="left">连接两个或更多的数组，并返回结果。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-copywithin.html">copyWithin()</a></td><td align="left">从数组的指定位置拷贝元素到数组的另一个指定位置中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-entries.html">entries()</a></td><td align="left">返回数组的可迭代对象。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-every.html">every()</a></td><td align="left">检测数值元素的每个元素是否都符合条件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-fill.html">fill()</a></td><td align="left">使用一个固定值来填充数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-filter.html">filter()</a></td><td align="left">检测数值元素，并返回符合条件所有元素的数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-find.html">find()</a></td><td align="left">返回符合传入测试（函数）条件的数组元素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-findindex.html">findIndex()</a></td><td align="left">返回符合传入测试（函数）条件的数组元素索引。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-foreach.html">forEach()</a></td><td align="left">数组每个元素都执行一次回调函数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-from.html">from()</a></td><td align="left">通过给定的对象中创建一个数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-includes.html">includes()</a></td><td align="left">判断一个数组是否包含一个指定的值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-indexof-array.html">indexOf()</a></td><td align="left">搜索数组中的元素，并返回它所在的位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isarray.html">isArray()</a></td><td align="left">判断对象是否为数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-join.html">join()</a></td><td align="left">把数组的所有元素放入一个字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-keys.html">keys()</a></td><td align="left">返回数组的可迭代对象，包含原始数组的键(key)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-lastindexof-array.html">lastIndexOf()</a></td><td align="left">搜索数组中的元素，并返回它最后出现的位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-map.html">map()</a></td><td align="left">通过指定函数处理数组的每个元素，并返回处理后的数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-pop.html">pop()</a></td><td align="left">删除数组的最后一个元素并返回删除的元素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-push.html">push()</a></td><td align="left">向数组的末尾添加一个或更多元素，并返回新的长度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-reduce.html">reduce()</a></td><td align="left">将数组元素计算为一个值（从左到右）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-reduceright.html">reduceRight()</a></td><td align="left">将数组元素计算为一个值（从右到左）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-reverse.html">reverse()</a></td><td align="left">反转数组的元素顺序。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-shift.html">shift()</a></td><td align="left">删除并返回数组的第一个元素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-slice-array.html">slice()</a></td><td align="left">选取数组的一部分，并返回一个新数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-some.html">some()</a></td><td align="left">检测数组元素中是否有元素符合指定条件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-sort.html">sort()</a></td><td align="left">对数组的元素进行排序。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-splice.html">splice()</a></td><td align="left">从数组中添加或删除元素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tostring-array.html">toString()</a></td><td align="left">把数组转换为字符串，并返回结果。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-unshift.html">unshift()</a></td><td align="left">向数组的开头添加一个或更多元素，并返回新的长度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-valueof-array.html">valueOf()</a></td><td align="left">返回数组对象的原始值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-of-array.html">Array.of()</a></td><td align="left">将一组值转换为数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-at-array.html">Array.at()</a></td><td align="left">用于接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-flat-array.html">Array.flat()</a></td><td align="left">创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-flatmap-array.html">Array.flatMap()</a></td><td align="left">使用映射函数映射每个元素，然后将结果压缩成一个新数组。</td></tr></tbody></table><h4 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h4><blockquote><p>boolean对象的方法比较简单</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tostring-boolean.html">toString()</a></td><td align="left">把布尔值转换为字符串，并返回结果。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-valueof-boolean.html">valueOf()</a></td><td align="left">返回 Boolean 对象的原始值。</td></tr></tbody></table><h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><blockquote><p>和JAVA中的Date类比较类似</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getdate.html">getDate()</a></td><td align="left">从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getday.html">getDay()</a></td><td align="left">从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getfullyear.html">getFullYear()</a></td><td align="left">从 Date 对象以四位数字返回年份。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-gethours.html">getHours()</a></td><td align="left">返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getmilliseconds.html">getMilliseconds()</a></td><td align="left">返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getminutes.html">getMinutes()</a></td><td align="left">返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getmonth.html">getMonth()</a></td><td align="left">从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getseconds.html">getSeconds()</a></td><td align="left">返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-gettime.html">getTime()</a></td><td align="left">返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-gettimezoneoffset.html">getTimezoneOffset()</a></td><td align="left">返回本地时间与格林威治标准时间 (GMT)的分钟差。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcdate.html">getUTCDate()</a></td><td align="left">根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcday.html">getUTCDay()</a></td><td align="left">根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcfullyear.html">getUTCFullYear()</a></td><td align="left">根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutchours.html">getUTCHours()</a></td><td align="left">根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcmilliseconds.html">getUTCMilliseconds()</a></td><td align="left">根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcminutes.html">getUTCMinutes()</a></td><td align="left">根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcmonth.html">getUTCMonth()</a></td><td align="left">根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getutcseconds.html">getUTCSeconds()</a></td><td align="left">根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td align="left">getYear()</td><td align="left">已废弃。 请使用 getFullYear() 方法代替。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-parse.html">parse()</a></td><td align="left">返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setdate.html">setDate()</a></td><td align="left">设置 Date 对象中月的某一天 (1 ~ 31)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setfullyear.html">setFullYear()</a></td><td align="left">设置 Date 对象中的年份（四位数字）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-sethours.html">setHours()</a></td><td align="left">设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setmilliseconds.html">setMilliseconds()</a></td><td align="left">设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setminutes.html">setMinutes()</a></td><td align="left">设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setmonth.html">setMonth()</a></td><td align="left">设置 Date 对象中月份 (0 ~ 11)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setseconds.html">setSeconds()</a></td><td align="left">设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-settime.html">setTime()</a></td><td align="left">setTime() 方法以毫秒设置 Date 对象。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcdate.html">setUTCDate()</a></td><td align="left">根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcfullyear.html">setUTCFullYear()</a></td><td align="left">根据世界时设置 Date 对象中的年份（四位数字）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutchours.html">setUTCHours()</a></td><td align="left">根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcmilliseconds.html">setUTCMilliseconds()</a></td><td align="left">根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcminutes.html">setUTCMinutes()</a></td><td align="left">根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcmonth.html">setUTCMonth()</a></td><td align="left">根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-setutcseconds.html">setUTCSeconds()</a></td><td align="left">setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。</td></tr><tr><td align="left">setYear()</td><td align="left">已废弃。请使用 setFullYear() 方法代替。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-todatestring.html">toDateString()</a></td><td align="left">把 Date 对象的日期部分转换为字符串。</td></tr><tr><td align="left">toGMTString()</td><td align="left">已废弃。请使用 toUTCString() 方法代替。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-toisostring.html">toISOString()</a></td><td align="left">使用 ISO 标准返回字符串的日期格式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tojson.html">toJSON()</a></td><td align="left">以 JSON 数据格式返回日期字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocaledatestring.html">toLocaleDateString()</a></td><td align="left">根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocaletimestring.html">toLocaleTimeString()</a></td><td align="left">根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocalestring.html">toLocaleString()</a></td><td align="left">根据本地时间格式，把 Date 对象转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tostring-date.html">toString()</a></td><td align="left">把 Date 对象转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-totimestring.html">toTimeString()</a></td><td align="left">把 Date 对象的时间部分转换为字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-toutcstring.html">toUTCString()</a></td><td align="left">根据世界时，把 Date 对象转换为字符串。实例：<code>var today = new Date(); var UTCstring = today.toUTCString();</code></td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-utc.html">UTC()</a></td><td align="left">根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-valueof-date.html">valueOf()</a></td><td align="left">返回 Date 对象的原始值。</td></tr></tbody></table><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><blockquote><p> 和JAVA中的Math类比较类似</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-abs.html">abs(x)</a></td><td align="left">返回 x的绝对值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-acos.html">acos(x)</a></td><td align="left">返回 x的反余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-asin.html">asin(x)</a></td><td align="left">返回 x的反正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-atan.html">atan(x)</a></td><td align="left">以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-atan2.html">atan2(y,x)</a></td><td align="left">返回从 x 轴到点 (x,y)的角度（介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-ceil.html">ceil(x)</a></td><td align="left">对数进行上舍入。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-cos.html">cos(x)</a></td><td align="left">返回数的余弦。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-exp.html">exp(x)</a></td><td align="left">返回 Ex的指数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-floor.html">floor(x)</a></td><td align="left">对 x 进行下舍入。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-log.html">log(x)</a></td><td align="left">返回数的自然对数（底为e）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-max.html">max(x,y,z,…,n)</a></td><td align="left">返回 x,y,z,…,n 中的最高值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-min.html">min(x,y,z,…,n)</a></td><td align="left">返回 x,y,z,…,n中的最低值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-pow.html">pow(x,y)</a></td><td align="left">返回 x的 y 次幂。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-random.html">random()</a></td><td align="left">返回 0 ~ 1 之间的随机数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-round.html">round(x)</a></td><td align="left">四舍五入。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-sin.html">sin(x)</a></td><td align="left">返回数的正弦。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-sqrt.html">sqrt(x)</a></td><td align="left">返回数的平方根。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tan.html">tan(x)</a></td><td align="left">返回角的正切。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tanh.html">tanh(x)</a></td><td align="left">返回一个数的双曲正切函数值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-trunc.html">trunc(x)</a></td><td align="left">将数字的小数部分去掉，只保留整数部分。</td></tr></tbody></table><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><blockquote><p>Number中准备了一些基础的数据处理函数</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isfinite-number.html">isFinite</a></td><td align="left">检测指定参数是否为无穷大。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isinteger-number.html">isInteger</a></td><td align="left">检测指定参数是否为整数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-isnan-number.html">isNaN</a></td><td align="left">检测指定参数是否为 NaN。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-issafeInteger-number.html">isSafeInteger</a></td><td align="left">检测指定参数是否为安全整数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-toexponential.html">toExponential(x)</a></td><td align="left">把对象的值转换为指数计数法。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tofixed.html">toFixed(x)</a></td><td align="left">把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocalestring-number.html">toLocaleString(locales, options)</a></td><td align="left">返回数字在特定语言环境下的表示字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-toprecision.html">toPrecision(x)</a></td><td align="left">把数字格式化为指定的长度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tostring-number.html">toString()</a></td><td align="left">把数字转换为字符串，使用指定的基数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-valueof-number.html">valueOf()</a></td><td align="left">返回一个 Number 对象的基本数字值。</td></tr></tbody></table><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><blockquote><p>和JAVA中的String类似</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-charat.html">charAt()</a></td><td align="left">返回在指定位置的字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-charcodeat.html">charCodeAt()</a></td><td align="left">返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-concat-string.html">concat()</a></td><td align="left">连接两个或更多字符串，并返回新的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-endswith.html">endsWith()</a></td><td align="left">判断当前字符串是否是以指定的子字符串结尾的（区分大小写）。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-fromcharcode.html">fromCharCode()</a></td><td align="left">将 Unicode 编码转为字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-indexof.html">indexOf()</a></td><td align="left">返回某个指定的字符串值在字符串中首次出现的位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-string-includes.html">includes()</a></td><td align="left">查找字符串中是否包含指定的子字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-lastindexof.html">lastIndexOf()</a></td><td align="left">从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-match.html">match()</a></td><td align="left">查找找到一个或多个正则表达式的匹配。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-repeat.html">repeat()</a></td><td align="left">复制字符串指定次数，并将它们连接在一起返回。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-replace.html">replace()</a></td><td align="left">在字符串中查找匹配的子串，并替换与正则表达式匹配的子串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-replaceall.html">replaceAll()</a></td><td align="left">在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-search.html">search()</a></td><td align="left">查找与正则表达式相匹配的值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-slice-string.html">slice()</a></td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-split.html">split()</a></td><td align="left">把字符串分割为字符串数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-startswith.html">startsWith()</a></td><td align="left">查看字符串是否以指定的子字符串开头。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-substr.html">substr()</a></td><td align="left">从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-substring.html">substring()</a></td><td align="left">提取字符串中两个指定的索引号之间的字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolowercase.html">toLowerCase()</a></td><td align="left">把字符串转换为小写。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-touppercase.html">toUpperCase()</a></td><td align="left">把字符串转换为大写。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-trim.html">trim()</a></td><td align="left">去除字符串两边的空白。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocalelowercase.html">toLocaleLowerCase()</a></td><td align="left">根据本地主机的语言环境把字符串转换为小写。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tolocaleuppercase.html">toLocaleUpperCase()</a></td><td align="left">根据本地主机的语言环境把字符串转换为大写。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-valueof-string.html">valueOf()</a></td><td align="left">返回某个字符串对象的原始值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-tostring.html">toString()</a></td><td align="left">返回一个字符串。</td></tr></tbody></table><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><h3 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h3><blockquote><p> HTML 事件可以是浏览器行为，也可以是用户行为。 当这些一些行为发生时,可以自动触发对应的JS函数的运行,我们称之为事件发生.JS的事件驱动指的就是行为触发代码运行的这种特点</p></blockquote><h3 id="事件的绑定-1"><a href="#事件的绑定-1" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><blockquote><p>通过属性绑定</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testDown1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;down1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testDown2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;down2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testFocus</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获得焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testBlur</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失去焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params">input</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testMouseOver</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标悬停&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testMouseLeave</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标离开&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testMouseMove</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移动&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onkeydown</span>=<span class="string">&quot;testDown1(),testDown2()&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onfocus</span>=<span class="string">&quot;testFocus()&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onblur</span>=<span class="string">&quot;testBlur()&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onchange</span>=<span class="string">&quot;testChange(this)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onmouseover</span>=<span class="string">&quot;testMouseOver()&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onmouseleave</span>=<span class="string">&quot;testMouseLeave()&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">onmousemove</span>=<span class="string">&quot;testMouseMove()&quot;</span> </span></span><br><span class="line"><span class="tag">     /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>说明</p><ul><li><p>通过事件属性绑定函数,在行为发生时会自动执行函数</p></li><li><p>一个事件可以同时绑定多个函数</p></li><li><p>一个元素可以同时绑定多个事件</p></li><li><p>方法中可以传入 this对象,代表当前元素</p></li></ul></li></ul><blockquote><p>通过DOM编程绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载完毕事件,浏览器加载完整个文档行为</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过DOM编程绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            in1.<span class="property">onchange</span>=testChange</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件的触发"><a href="#事件的触发" class="headerlink" title="事件的触发"></a>事件的触发</h3><blockquote><p>行为触发</p></blockquote><ul><li>发生行为时触发,演示:略</li></ul><blockquote><p>DOM编程触发</p></blockquote><ul><li><p>通过DOM编程,用代码触发,执行某些代码相当于发生了某些行为</p></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载完毕事件,浏览器加载完整个文档行为</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过DOM编程绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            in1.<span class="property">onchange</span>=testChange</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn1.<span class="property">onclick</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮点击了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用事件方法触发事件</span></span></span><br><span class="line"><span class="language-javascript">                in1.<span class="title function_">onchange</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">testChange</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容改变&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BOM编程"><a href="#BOM编程" class="headerlink" title="BOM编程"></a>BOM编程</h2><h3 id="什么是BOM"><a href="#什么是BOM" class="headerlink" title="什么是BOM"></a>什么是BOM</h3><ul><li><p>BOM是Browser Object Model的简写，即浏览器对象模型。</p></li><li><p>BOM由一系列对象组成，是访问、控制、修改浏览器的属性和方法(通过window对象及属性的一系列方法 控制浏览器行为的一种编程)</p></li><li><p>BOM没有统一的标准(每种客户端都可以自定标准)。</p></li><li><p>BOM编程是将浏览器窗口的各个组成部分抽象成各个对象,通过各个对象的API操作组件行为的一种编程</p></li><li><p>BOM编程的对象结构如下</p><ul><li>window 顶级对象,代表整个浏览器窗口<ul><li>location对象                 window对象的属性之一,代表浏览器的地址栏</li><li>history对象                   window对象的属性之一,代表浏览器的访问历史</li><li>screen对象                    window对象的属性之一,代表屏幕</li><li>navigator对象               window对象的属性之一,代表浏览器软件本身</li><li>document对象              window对象的属性之一,代表浏览器窗口目前解析的html文档</li><li>console对象                  window对象的属性之一,代表浏览器开发者工具的控制台</li><li>localStorage对象          window对象的属性之一,代表浏览器的本地数据持久化存储</li><li>sessionStorage对象      window对象的属性之一,代表浏览器的本地数据会话级存储</li></ul></li></ul>  <img src="/img/images/1681267483366.png" alt="1681267483366" style="zoom:67%;" /></li></ul><h3 id="window对象的常见属性-了解"><a href="#window对象的常见属性-了解" class="headerlink" title="window对象的常见属性(了解)"></a>window对象的常见属性(了解)</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-closed.html">closed</a></td><td align="left">返回窗口是否已被关闭。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-defaultstatus.html">defaultStatus</a></td><td align="left">设置或返回窗口状态栏中的默认文本。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/dom-obj-document.html">document</a></td><td align="left">对 Document 对象的只读引用。(请参阅<a href="https://www.runoob.com/jsref/dom-obj-document.html">对象</a>)</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-frames.html">frames</a></td><td align="left">返回窗口中所有命名的框架。该集合是 Window 对象的数组，每个 Window 对象在窗口中含有一个框架。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/obj-history.html">history</a></td><td align="left">对 History 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-history.html">History 对象</a>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-innerheight.html">innerHeight</a></td><td align="left">返回窗口的文档显示区的高度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-innerheight.html">innerWidth</a></td><td align="left">返回窗口的文档显示区的宽度。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-localstorage.html">localStorage</a></td><td align="left">在浏览器中存储 key&#x2F;value 对。没有过期时间。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-length.html">length</a></td><td align="left">设置或返回窗口中的框架数量。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/obj-location.html">location</a></td><td align="left">用于窗口或框架的 Location 对象。请参阅 <a href="https://www.runoob.com/jsref/obj-location.html">Location 对象</a>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-name.html">name</a></td><td align="left">设置或返回窗口的名称。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/obj-navigator.html">navigator</a></td><td align="left">对 Navigator 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-navigator.html">Navigator 对象</a>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-opener.html">opener</a></td><td align="left">返回对创建此窗口的窗口的引用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-outerheight.html">outerHeight</a></td><td align="left">返回窗口的外部高度，包含工具条与滚动条。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-outerheight.html">outerWidth</a></td><td align="left">返回窗口的外部宽度，包含工具条与滚动条。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-pagexoffset.html">pageXOffset</a></td><td align="left">设置或返回当前页面相对于窗口显示区左上角的 X 位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-pagexoffset.html">pageYOffset</a></td><td align="left">设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-parent.html">parent</a></td><td align="left">返回父窗口。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/obj-screen.html">screen</a></td><td align="left">对 Screen 对象的只读引用。请参数 <a href="https://www.runoob.com/jsref/obj-screen.html">Screen 对象</a>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-screenleft.html">screenLeft</a></td><td align="left">返回相对于屏幕窗口的x坐标</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-screenleft.html">screenTop</a></td><td align="left">返回相对于屏幕窗口的y坐标</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-screenx.html">screenX</a></td><td align="left">返回相对于屏幕窗口的x坐标</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-sessionstorage.html">sessionStorage</a></td><td align="left">在浏览器中存储 key&#x2F;value 对。 在关闭窗口或标签页之后将会删除这些数据。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-screenx.html">screenY</a></td><td align="left">返回相对于屏幕窗口的y坐标</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-self.html">self</a></td><td align="left">返回对当前窗口的引用。等价于 Window 属性。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-status.html">status</a></td><td align="left">设置窗口状态栏的文本。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/prop-win-top.html">top</a></td><td align="left">返回最顶层的父窗口。</td></tr></tbody></table><h3 id="window对象的常见方法-了解"><a href="#window对象的常见方法-了解" class="headerlink" title="window对象的常见方法(了解)"></a>window对象的常见方法(了解)</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-alert.html">alert()</a></td><td align="left">显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-atob.html">atob()</a></td><td align="left">解码一个 base-64 编码的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-btoa.html">btoa()</a></td><td align="left">创建一个 base-64 编码的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-blur.html">blur()</a></td><td align="left">把键盘焦点从顶层窗口移开。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-clearinterval.html">clearInterval()</a></td><td align="left">取消由 setInterval() 设置的 timeout。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-cleartimeout.html">clearTimeout()</a></td><td align="left">取消由 setTimeout() 方法设置的 timeout。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-close.html">close()</a></td><td align="left">关闭浏览器窗口。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-confirm.html">confirm()</a></td><td align="left">显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-createpopup.html">createPopup()</a></td><td align="left">创建一个 pop-up 窗口。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-focus.html">focus()</a></td><td align="left">把键盘焦点给予一个窗口。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-getselection.html">getSelection</a>()</td><td align="left">返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-getcomputedstyle.html">getComputedStyle()</a></td><td align="left">获取指定元素的 CSS 样式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-matchmedia.html">matchMedia()</a></td><td align="left">该方法用来检查 media query 语句，它返回一个 MediaQueryList对象。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-moveby.html">moveBy()</a></td><td align="left">可相对窗口的当前坐标把它移动指定的像素。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-moveto.html">moveTo()</a></td><td align="left">把窗口的左上角移动到一个指定的坐标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-open.html">open()</a></td><td align="left">打开一个新的浏览器窗口或查找一个已命名的窗口。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-print.html">print()</a></td><td align="left">打印当前窗口的内容。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-prompt.html">prompt()</a></td><td align="left">显示可提示用户输入的对话框。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-resizeby.html">resizeBy()</a></td><td align="left">按照指定的像素调整窗口的大小。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-resizeto.html">resizeTo()</a></td><td align="left">把窗口的大小调整到指定的宽度和高度。</td></tr><tr><td align="left">scroll()</td><td align="left">已废弃。 该方法已经使用了 <a href="https://www.runoob.com/jsref/met-win-scrollto.html">scrollTo()</a> 方法来替代。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-scrollby.html">scrollBy()</a></td><td align="left">按照指定的像素值来滚动内容。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-scrollto.html">scrollTo()</a></td><td align="left">把内容滚动到指定的坐标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-setinterval.html">setInterval()</a></td><td align="left">按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-settimeout.html">setTimeout()</a></td><td align="left">在指定的毫秒数后调用函数或计算表达式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-stop.html">stop()</a></td><td align="left">停止页面载入。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/met-win-postmessage.html">postMessage()</a></td><td align="left">安全地实现跨源通信。</td></tr></tbody></table><h3 id="通过BOM编程控制浏览器行为演示"><a href="#通过BOM编程控制浏览器行为演示" class="headerlink" title="通过BOM编程控制浏览器行为演示"></a>通过BOM编程控制浏览器行为演示</h3><blockquote><p> 三种弹窗方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testAlert</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//普通信息提示框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;提示信息&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testConfirm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//确认框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> con =<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗?&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(con)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击了确定&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击了取消&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">testPrompt</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//信息输入对话框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> res =<span class="title function_">prompt</span>(<span class="string">&quot;请输入昵称&quot;</span>,<span class="string">&quot;例如:张三&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;您输入的是:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提示框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testAlert()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testConfirm()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;对话框&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;testPrompt()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 页面跳转</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">goAtguigu</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> flag =<span class="title function_">confirm</span>(<span class="string">&quot;即将跳转到Qing官网,本页信息即将丢失,确定吗?&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过BOM编程地址栏url切换</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跳转到Qing&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;goAtguigu()&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过BOM编程实现会话级和持久级数据存储"><a href="#通过BOM编程实现会话级和持久级数据存储" class="headerlink" title="通过BOM编程实现会话级和持久级数据存储"></a>通过BOM编程实现会话级和持久级数据存储</h3><ul><li>会话级数据 : 内存型数据,是浏览器在内存上临时存储的数据,浏览器关闭后,数据失去,通过window的sessionStorge属性实现</li><li>持久级数据 : 磁盘型数据,是浏览器在磁盘上持久存储的数据,浏览器关闭后,数据仍在,通过window的localStorge实现</li><li>可以用于将来存储一些服务端响应回来的数据,比如:token令牌,或者一些其他功能数据,根据数据的业务范围我们可以选择数据存储的会话&#x2F;持久 级别</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">saveItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让浏览器存储一些会话级数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sessionMsg&quot;</span>,<span class="string">&quot;sessionValue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让浏览器存储一些持久级数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;localMsg&quot;</span>,<span class="string">&quot;localValue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;haha&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">removeItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;sessionMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;localMsg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">readItem</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;read&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;session:&quot;</span>+<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;sessionMsg&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;local:&quot;</span>+<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;localMsg&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveItem()&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;removeItem()&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readItem()&quot;</span>&gt;</span>读取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试,存储数据后,再读取数据,然后关闭浏览器,获取数据,发现sessionStorge的数据没有了,localStorge的数据还在</li><li>通过removeItem可以将这些数据直接删除</li><li>在F12开发者工具的应用程序栏,可以查看数据的状态</li></ul><img src="/img/images/1690348134594.png" alt="1690348134594" style="zoom: 80%;" /><h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><h3 id="什么是DOM编程"><a href="#什么是DOM编程" class="headerlink" title="什么是DOM编程"></a>什么是DOM编程</h3><blockquote><p>简单来说:DOM(Document Object Model)编程就是使用document对象的API完成对网页HTML文档进行动态修改,以实现网页数据和样式动态变化效果的编程.</p></blockquote><ul><li>document对象代表整个html文档，可用来访问页面中的所有元素，是最复杂的一个dom对象，可以说是学习好dom编程的关键所在。</li><li>根据HTML代码结构特点,document对象本身是一种树形结构的文档对象。</li></ul><img src="/img/images/1681269953136.png" alt="1681269953136" style="zoom:67%;" /><ul><li>上面的代码生成的树如下</li></ul><img src="/img/images/1681269970254.png" alt="1681269970254"  /><ul><li>DOM编程其实就是用window对象的document属性的相关API完成对页面元素的控制的编程</li></ul><img src="/img/images/1681270260741.png" alt="1681270260741"  /><ul><li>dom树中节点的类型<ul><li>node  节点,所有结点的父类型<ul><li>element   元素节点,node的子类型之一,代表一个完整标签</li><li>attribute  属性节点,node的子类型之一,代表元素的属性</li><li>text          文本节点,node的子类型之一,代表双标签中间的文本</li></ul></li></ul></li></ul><h3 id="获取页面元素的几种方式"><a href="#获取页面元素的几种方式" class="headerlink" title="获取页面元素的几种方式"></a>获取页面元素的几种方式</h3><h4 id="在整个文档范围内查找元素结点"><a href="#在整个文档范围内查找元素结点" class="headerlink" title="在整个文档范围内查找元素结点"></a>在整个文档范围内查找元素结点</h4><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>根据id值查询</td><td>document.getElementById(“id值”)</td><td>一个具体的元素节</td></tr><tr><td>根据标签名查询</td><td>document.getElementsByTagName(“标签名”)</td><td>元素节点数组</td></tr><tr><td>根据name属性值查询</td><td>document.getElementsByName(“name值”)</td><td>元素节点数组</td></tr><tr><td>根据类名查询</td><td>document.getElementsByClassName(“类名”)</td><td>元素节点数组</td></tr></tbody></table><h4 id="在具体元素节点范围内查找子节点"><a href="#在具体元素节点范围内查找子节点" class="headerlink" title="在具体元素节点范围内查找子节点"></a>在具体元素节点范围内查找子节点</h4><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找子标签</td><td>element.children</td><td>返回子标签数组</td></tr><tr><td>查找第一个子标签</td><td>element.firstElementChild</td><td>标签对象</td></tr><tr><td>查找最后一个子标签</td><td>element.lastElementChild</td><td>节点对象</td></tr></tbody></table><h4 id="查找指定子元素节点的父节点"><a href="#查找指定子元素节点的父节点" class="headerlink" title="查找指定子元素节点的父节点"></a>查找指定子元素节点的父节点</h4><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找指定元素节点的父标签</td><td>element.parentElement</td><td>标签对象</td></tr></tbody></table><h4 id="查找指定元素节点的兄弟节点"><a href="#查找指定元素节点的兄弟节点" class="headerlink" title="查找指定元素节点的兄弟节点"></a>查找指定元素节点的兄弟节点</h4><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找前一个兄弟标签</td><td>node.previousElementSibling</td><td>标签对象</td></tr><tr><td>查找后一个兄弟标签</td><td>node.nextElementSibling</td><td>标签对象</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1 获得document</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2 通过document获得元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> el1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>) <span class="comment">// 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el1)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>) <span class="comment">// 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(els)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> els =<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; els.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(els[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun5</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先获取父元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> div01 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 获取所有子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> cs=div01.<span class="property">children</span> <span class="comment">// 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt; cs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(cs[i])</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">firstElementChild</span>)  <span class="comment">// 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">lastElementChild</span>)   <span class="comment">// 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun6</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pinput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">parentElement</span>) <span class="comment">// 通过子元素获取父元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">fun7</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pinput =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">previousElementSibling</span>) <span class="comment">// 获取前面的第一个元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pinput.<span class="property">nextElementSibling</span>) <span class="comment">// 获取后面的第一个元素</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过父元素获取子元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun5()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过子元素获取父元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun6()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;通过当前元素获取兄弟元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun7()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn07&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据id获取指定元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun1()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据标签名获取多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun2()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据name属性值获取多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun3()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;根据class属性值获得多个元素&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun4()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作元素属性值"><a href="#操作元素属性值" class="headerlink" title="操作元素属性值"></a>操作元素属性值</h3><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>读取属性值</td><td>元素对象.属性名</td></tr><tr><td>修改属性值</td><td>元素对象.属性名&#x3D;新的属性值</td></tr></tbody></table><h4 id="内部文本操作"><a href="#内部文本操作" class="headerlink" title="内部文本操作"></a>内部文本操作</h4><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>获取或者设置标签体的文本内容</td><td>element.innerText</td></tr><tr><td>获取或者设置标签体的内容</td><td>element.innerHTML</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性   元素名.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式   元素名.style.样式名=&quot;&quot;  样式名&quot;-&quot; 要进行驼峰转换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本   元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                           元素名.innerHTML   同时可以识别html代码 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeAttribute</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法 元素.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(in1.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(in1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改属性值</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">value</span>=<span class="string">&quot;嗨&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeStyle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> in1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法  元素.style.样式名=&quot;&quot;   原始样式名中的&quot;-&quot;符号 要转换驼峰式  background-color &gt; backgroundColor</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript">        in1.<span class="property">style</span>.<span class="property">borderRadius</span>=<span class="string">&quot;5px&quot;</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeText</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div01 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        语法  元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">              元素名.innerHTML   同时可以识别html代码</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div01.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">        div01.<span class="property">innerHTML</span>=<span class="string">&quot;&lt;h1&gt;嗨&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#in1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div01&quot;</span>&gt;</span></span><br><span class="line">        hello</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeAttribute()&quot;</span>&gt;</span>操作属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeStyle()&quot;</span>&gt;</span>操作样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;changeText()&quot;</span>&gt;</span>操作文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="增删元素"><a href="#增删元素" class="headerlink" title="增删元素"></a>增删元素</h3><h4 id="对页面的元素进行增删操作"><a href="#对页面的元素进行增删操作" class="headerlink" title="对页面的元素进行增删操作"></a>对页面的元素进行增删操作</h4><table><thead><tr><th>API</th><th>功能</th></tr></thead><tbody><tr><td>document.createElement(“标签名”)</td><td>创建元素节点并返回，但不会自动添加到文档中</td></tr><tr><td>document.createTextNode(“文本值”)</td><td>创建文本节点并返回，但不会自动添加到文档中</td></tr><tr><td>element.appendChild(ele)</td><td>将ele添加到element所有子节点后面</td></tr><tr><td>parentEle.insertBefore(newEle,targetEle)</td><td>将newEle插入到targetEle前面</td></tr><tr><td>parentEle.replaceChild(newEle, oldEle)</td><td>用新节点替换原有的旧子节点</td></tr><tr><td>element.remove()</td><td>删除某个标签</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1 获得document  dom树</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        window.document</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    2 从document中获取要操作的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 直接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var el1 =document.getElementById(&quot;username&quot;) // 根据元素的id值获取页面上唯一的一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByTagName(&quot;input&quot;) // 根据元素的标签名获取多个同名元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByName(&quot;aaa&quot;) // 根据元素的name属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var els =document.getElementsByClassName(&quot;a&quot;) // 根据元素的class属性值获得多个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 间接获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var cs=div01.children // 通过父元素获取全部的子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var firstChild =div01.firstElementChild  // 通过父元素获取第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var lastChild = div01.lastElementChild   // 通过父元素获取最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var parent = pinput.parentElement  // 通过子元素获取父元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var pElement = pinput.previousElementSibling // 获取前面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var nElement = pinput.nextElementSibling // 获取后面的第一个元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    3 对元素进行操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. 操作元素的属性   元素名.属性名=&quot;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. 操作元素的样式   元素名.style.样式名=&quot;&quot;  样式名&quot;-&quot; 要进行驼峰转换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3. 操作元素的文本   元素名.innerText   只识别文本</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                           元素名.innerHTML   同时可以识别html代码 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        4. 增删元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var element =document.createElement(&quot;元素名&quot;) // 创建元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.appendChild(子元素)               // 在父元素中追加子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.insertBefore(新元素,参照元素)     // 在某个元素前增加元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            父元素.replaceChild(新元素,被替换的元素) // 用新的元素替换某个子子元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            元素.remove()                            // 删除当前元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">addCs</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">appendChild</span>(csli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">addCsBeforeSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.insertBefore(新元素,参照元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">insertBefore</span>(csli,szli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">replaceSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个新的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> csli =<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>) <span class="comment">// &lt;li&gt;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置子元素的属性和文本 &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">id</span>=<span class="string">&quot;cs&quot;</span></span></span><br><span class="line"><span class="language-javascript">        csli.<span class="property">innerText</span>=<span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将子元素放入父元素中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父元素中追加子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.replaceChild(新元素,被替换的元素)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="title function_">replaceChild</span>(csli,szli)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">removeSz</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> szli =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sz&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 哪个元素调用了remove该元素就会从dom树中移除</span></span></span><br><span class="line"><span class="language-javascript">        szli.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">clearCity</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> cityul =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* var fc =cityul.firstChild</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        while(fc != null )&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            fc.remove()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            fc =cityul.firstChild</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125; */</span></span></span><br><span class="line"><span class="language-javascript">        cityul.<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//cityul.remove()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sz&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标1 在城市列表的最后添加一个子标签  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addCs()&quot;</span>&gt;</span>增加长沙<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标2 在城市列表的深圳前添加一个子标签  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addCsBeforeSz()&quot;</span>&gt;</span>在深圳前插入长沙<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标3  将城市列表的深圳替换为  &lt;li id=&quot;cs&quot;&gt;长沙&lt;/li&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;replaceSz()&quot;</span>&gt;</span>替换深圳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标4  将城市列表删除深圳  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;removeSz()&quot;</span>&gt;</span>删除深圳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目标5  清空城市列表  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearCity()&quot;</span>&gt;</span>清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><blockquote><p>正则表达式是描述字符模式的对象。正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p></blockquote><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern,modifiers);</span><br><span class="line">或者更简单的方式:</span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/pattern/m</span>odifiers; </span><br></pre></td></tr></table></figure><blockquote><p>修饰符</p></blockquote><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/js/jsref-regexp-i.html">i</a></td><td align="left">执行对大小写不敏感的匹配。</td></tr><tr><td align="left"><a href="https://www.runoob.com/js/jsref-regexp-g.html">g</a></td><td align="left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td></tr></tbody></table><blockquote><p>方括号</p></blockquote><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[<a href="https://www.runoob.com/jsref/jsref-regexp-charset.html">abc]</a></td><td align="left">查找方括号之间的任何字符。</td></tr><tr><td align="left">[<a href="https://www.runoob.com/jsref/jsref-regexp-charset-not.html">^abc]</a></td><td align="left">查找任何不在方括号之间的字符。</td></tr><tr><td align="left">[0-9]</td><td align="left">查找任何从 0 至 9的数字。</td></tr><tr><td align="left">[a-z]</td><td align="left">查找任何从小写 a 到小写 z的字符。</td></tr><tr><td align="left">[A-Z]</td><td align="left">查找任何从大写 A 到大写 Z的字符。</td></tr><tr><td align="left">[A-z]</td><td align="left">查找任何从大写 A 到小写 z的字符。</td></tr><tr><td align="left">[adgk]</td><td align="left">查找给定集合内的任何字符。</td></tr><tr><td align="left">[^adgk]</td><td align="left">查找给定集合外的任何字符。</td></tr><tr><td align="left">(red|blue|green)</td><td align="left">查找任何指定的选项。</td></tr></tbody></table><blockquote><p>元字符</p></blockquote><table><thead><tr><th align="left">元字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-dot.html">.</a></td><td align="left">查找单个字符，除了换行和行结束符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar.html">\w</a></td><td align="left">查找数字、字母及下划线。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-wordchar-non.html">\W</a></td><td align="left">查找非单词字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-digit.html">\d</a></td><td align="left">查找数字。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-digit-non.html">\D</a></td><td align="left">查找非数字字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace.html">\s</a></td><td align="left">查找空白字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-whitespace-non.html">\S</a></td><td align="left">查找非空白字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-begin.html">\b</a></td><td align="left">匹配单词边界。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-begin-not.html">\B</a></td><td align="left">匹配非单词边界。</td></tr><tr><td align="left">\0</td><td align="left">查找 NULL 字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-newline.html">\n</a></td><td align="left">查找换行符。</td></tr><tr><td align="left">\f</td><td align="left">查找换页符。</td></tr><tr><td align="left">\r</td><td align="left">查找回车符。</td></tr><tr><td align="left">\t</td><td align="left">查找制表符。</td></tr><tr><td align="left">\v</td><td align="left">查找垂直制表符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-octal.html">\xxx</a></td><td align="left">查找以八进制数 xxx 规定的字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-hex.html">\xdd</a></td><td align="left">查找以十六进制数 dd 规定的字符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-unicode-hex.html">\uxxxx</a></td><td align="left">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><blockquote><p>量词</p></blockquote><table><thead><tr><th align="left">量词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-onemore.html">n+</a></td><td align="left">匹配任何包含至少一个 n的字符串。例如，&#x2F;a+&#x2F; 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-zeromore.html">n*</a></td><td align="left">匹配任何包含零个或多个 n的字符串。例如，&#x2F;bo*&#x2F; 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-zeroone.html">n?</a></td><td align="left">匹配任何包含零个或一个 n的字符串。例如，&#x2F;e?le?&#x2F; 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-nx.html">n{X}</a></td><td align="left">匹配包含 X 个 n的序列的字符串。例如，&#x2F;a{2}&#x2F; 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-nxcomma.html">n{X,}</a></td><td align="left">X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，&#x2F;a{2,}&#x2F; 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-nxy.html">n{X,Y}</a></td><td align="left">X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，&#x2F;a{1,3}&#x2F; 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-ndollar.html">n$</a></td><td align="left">匹配任何结尾为 n的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-ncaret.html">^n</a></td><td align="left">匹配任何开头为 n的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow.html">?&#x3D;n</a></td><td align="left">匹配任何其后紧接指定字符串 n的字符串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-nfollow-not.html">?!n</a></td><td align="left">匹配任何其后没有紧接指定字符串 n的字符串。</td></tr></tbody></table><blockquote><p>RegExp对象方法</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-compile.html">compile</a></td><td align="left">在 1.5 版本中已废弃。 编译正则表达式。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-exec-regexp.html">exec</a></td><td align="left">检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-test-regexp.html">test</a></td><td align="left">检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td align="left"><a href="https://www.runoob.com/jsref/jsref-regexp-tostring.html">toString</a></td><td align="left">返回正则表达式的字符串。</td></tr></tbody></table><blockquote><p>支持正则的String的方法</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/js/jsref-search.html">search</a></td><td align="left">检索与正则表达式相匹配的值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/js/jsref-match.html">match</a></td><td align="left">找到一个或多个正则表达式的匹配。</td></tr><tr><td align="left"><a href="https://www.runoob.com/js/jsref-replace.html">replace</a></td><td align="left">替换与正则表达式匹配的子串。</td></tr><tr><td align="left"><a href="https://www.runoob.com/js/jsref-split.html">split</a></td><td align="left">把字符串分割为字符串数组。</td></tr></tbody></table><h3 id="正则表达式体验"><a href="#正则表达式体验" class="headerlink" title="正则表达式体验"></a>正则表达式体验</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>注意</strong>：这里是使用<strong>正则表达式对象</strong>来<strong>调用</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 调用正则表达式对象的test()方法验证目标字符串是否满足我们指定的这个模式，返回结果true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;/o/.test(&#x27;Hello World!&#x27;)=&quot;</span>+reg.<span class="title function_">test</span>(str));</span><br></pre></td></tr></table></figure><h4 id="8-2-2-匹配"><a href="#8-2-2-匹配" class="headerlink" title="8.2.2 匹配"></a>8.2.2 匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 在目标字符串中查找匹配的字符，返回匹配结果组成的数组</span></span><br><span class="line"><span class="keyword">var</span> resultArr = str.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组内容是o</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[0]=&quot;</span>+resultArr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="8-2-3-替换"><a href="#8-2-3-替换" class="headerlink" title="8.2.3 替换"></a>8.2.3 替换</h4><p><strong>注意</strong>：这里是使用<strong>字符串对象</strong>来<strong>调用</strong>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个最简单的正则表达式对象</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/</span>;</span><br><span class="line"><span class="comment">// 创建一个字符串对象作为目标字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(reg,<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="comment">// 只有第一个o被替换了，说明我们这个正则表达式只能匹配第一个满足的字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str.replace(reg)=&quot;</span>+newStr);<span class="comment">//Hell@ World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原字符串并没有变化，只是返回了一个新字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str=&quot;</span>+str);<span class="comment">//str=Hello World!</span></span><br></pre></td></tr></table></figure><h4 id="8-2-4-全文查找"><a href="#8-2-4-全文查找" class="headerlink" title="8.2.4  全文查找"></a>8.2.4  全文查找</h4><p>如果不使用g对正则表达式对象进行修饰，则使用正则表达式进行查找时，仅返回第一个匹配；使用g后，返回所有匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用全局匹配的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"><span class="comment">// 获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 遍历数组，发现只能得到&#x27;H&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用了全局匹配的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/g</span>;</span><br><span class="line"><span class="comment">// 获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">// 数组长度为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 遍历数组，发现可以获取到“H”和“W”</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-5-忽略大小写"><a href="#8-2-5-忽略大小写" class="headerlink" title="8.2.5 忽略大小写"></a>8.2.5 忽略大小写</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello WORLD!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有使用忽略大小写的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/g</span>;</span><br><span class="line"><span class="comment">//获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">//数组长度为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">//遍历数组，仅得到&#x27;o&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标字符串</span></span><br><span class="line"><span class="keyword">var</span> targetStr = <span class="string">&#x27;Hello WORLD!&#x27;</span>;</span><br><span class="line"><span class="comment">//使用了忽略大小写的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/o/gi</span>;</span><br><span class="line"><span class="comment">//获取全部匹配</span></span><br><span class="line"><span class="keyword">var</span> resultArr = targetStr.<span class="title function_">match</span>(reg);</span><br><span class="line"><span class="comment">//数组长度为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr.length=&quot;</span>+resultArr.<span class="property">length</span>);</span><br><span class="line"><span class="comment">//遍历数组，得到&#x27;o&#x27;和&#x27;O&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultArr[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+resultArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-6-元字符使用"><a href="#8-2-6-元字符使用" class="headerlink" title="8.2.6 元字符使用"></a>8.2.6 元字符使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str01 = <span class="string">&#x27;I love Java&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str02 = <span class="string">&#x27;Java love me&#x27;</span>;</span><br><span class="line"><span class="comment">// 匹配以Java开头</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^Java/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str01)=&#x27;</span>+reg.<span class="title function_">test</span>(str01)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str02)=&#x27;</span>+reg.<span class="title function_">test</span>(str02)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str01 = <span class="string">&#x27;I love Java&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str02 = <span class="string">&#x27;Java love me&#x27;</span>;</span><br><span class="line"><span class="comment">// 匹配以Java结尾</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/Java$/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str01)=&#x27;</span>+reg.<span class="title function_">test</span>(str01)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg.test(str02)=&#x27;</span>+reg.<span class="title function_">test</span>(str02)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="8-2-7-字符集合的使用"><a href="#8-2-7-字符集合的使用" class="headerlink" title="8.2.7 字符集合的使用"></a>8.2.7 字符集合的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n位数字的正则</span></span><br><span class="line"><span class="keyword">var</span> targetStr=<span class="string">&quot;123456789&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[0-9]&#123;0,&#125;$/</span>;</span><br><span class="line"><span class="comment">//或者 ： var reg=/^\d*$/;</span></span><br><span class="line"><span class="keyword">var</span> b = reg.<span class="title function_">test</span>(targetStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字+字母+下划线，6-16位</span></span><br><span class="line"><span class="keyword">var</span> targetStr=<span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[a-z0-9A-Z_]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> b = reg.<span class="title function_">test</span>(targetStr);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="8-2-8-常用正则表达式"><a href="#8-2-8-常用正则表达式" class="headerlink" title="8.2.8  常用正则表达式"></a>8.2.8  常用正则表达式</h4><table><thead><tr><th>需求</th><th>正则表达式</th></tr></thead><tbody><tr><td>用户名</td><td>&#x2F;^[a-zA-Z ][a-zA-Z-0-9]{5,9}$&#x2F;</td></tr><tr><td>密码</td><td>&#x2F;^[a-zA-Z0-9 _-@#&amp; *]{6,12}$&#x2F;</td></tr><tr><td>前后空格</td><td>&#x2F;^\s+|\s+$&#x2F;g</td></tr><tr><td>电子邮箱</td><td>&#x2F;^[a-zA-Z0-9 _.-]+@([a-zA-Z0-9-]+[.]{1})+[a-zA-Z]+$&#x2F;</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 HTML-CSS</title>
      <link href="/2024/11/10/1HTML%20CSS%20JavaScript/"/>
      <url>/2024/11/10/1HTML%20CSS%20JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h2><h3 id="HTML-amp-CSS-amp-JavaScript的作用"><a href="#HTML-amp-CSS-amp-JavaScript的作用" class="headerlink" title="HTML&amp;CSS&amp;JavaScript的作用"></a>HTML&amp;CSS&amp;JavaScript的作用</h3><p>HTML 主要用于网页主体结构的搭建，CSS 主要用于页面元素美化，JavaScript 主要用于页面元素的动态处理。</p><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h3><blockquote><p> HTML是Hyper Text Markup Language的缩写。意思是超文本标记语言。它的作用是搭建网页结构，在网页上展示内容</p></blockquote><p>HTML5 是 <strong>HyperText Markup Language 5的缩写，HTML5</strong> 技术结合了 HTML4.01的<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/5199682?fromModule=lemma_inlink" title="相关标准">相关标准</a>并革新，符合现代网络发展要求，在 2008 年正式发布。HTML5 由不同的技术构成，其在互联网中得到了非常广泛的应用，提供更多增强<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523?fromModule=lemma_inlink" title="网络应用">网络应用</a>的标准机。与传统的技术相比，HTML5的语法特征更加明显，并且结合了 <a href="https://baike.baidu.com/item/SVG/63178?fromModule=lemma_inlink" title="SVG">SVG</a>的内容。这些内容在网页中使用可以更加便捷地处理多媒体内容，而且 HTML5中还结合了其他元素，对原有的功能进行调整和修改，进行<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%8C%96%E5%B7%A5%E4%BD%9C/9777788?fromModule=lemma_inlink" title="标准化工作">标准化工作</a>。HTML5 在 2012 年已形成了稳定的版本。2014年10月28日，W3C发布了HTML5的最终版。</p><h3 id="什么是超文本"><a href="#什么是超文本" class="headerlink" title="什么是超文本"></a>什么是超文本</h3><blockquote><p>HTML文件本质上是文本文件，而普通的文本文件只能显示字符。但是HTML技术则通过HTML标签把其他网页、图片、音频、视频等各种多媒体资源引入到当前网页中，让网页有了非常丰富的呈现方式，这就是超文本的含义——本身是文本，但是呈现出来的最终效果超越了文本。</p></blockquote><h3 id="什么是标记语言"><a href="#什么是标记语言" class="headerlink" title="什么是标记语言"></a>什么是标记语言</h3><blockquote><p>说HTML是一种『标记语言』是因为它不是像Java这样的『编程语言』，因为它是由一系列『标签』组成的，没有常量、变量、流程控制、异常处理、IO等等这些功能。HTML很简单，每个标签都有它固定的含义和确定的页面显示效果。</p></blockquote><ul><li>双标签:标签是通过一组尖括号+标签名的方式来定义的：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML is a very popular fore-end technology.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中使用了一个p标签来定义一个段落，&lt;p&gt;叫<strong>开始标签</strong>，&lt;&#x2F;p&gt;叫<strong>结束标签</strong>。开始标签和结束标签一起构成了一个完整的标签。开始标签和结束标签之间的部分叫<strong>文本标签体</strong>，也简称：<strong>标签体</strong>。</p><ul><li>单标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xxx.com&quot;</span>&gt;</span>show detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href&#x3D;”网址” 就是属性，href是属性名，”网址”是属性值</p><h3 id="HTML基础结构"><a href="#HTML基础结构" class="headerlink" title="HTML基础结构"></a>HTML基础结构</h3><blockquote><p>1 文档声明</p></blockquote><ul><li>HTML文件中第一行的内容，用来告诉浏览器当前HTML文档的基本信息，其中最重要的就是当前HTML文档遵循的语法标准。这里我们只需要知道HTML有4和5这两个大的版本</li><li>HTML4版本的文档类型声明是：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HTML5版本的文档类型声明是：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>现在主流的技术选型都是使用HTML5，之前的版本基本不用了。</li></ul><blockquote><p>2根标签</p></blockquote><ul><li>html标签是整个文档的根标签，所有其他标签都必须放在html标签里面。</li></ul><blockquote><p>3头部元素</p></blockquote><ul><li>head标签用于定义文档的头部，其他头部元素都放在head标签里。头部元素包括title标签、script标签、style标签、link标签、meta标签等等。</li></ul><blockquote><p>4主体元素</p></blockquote><ul><li>body标签定义网页的主体内容，在浏览器窗口内显示的内容都定义到body标签内。</li></ul><blockquote><p>5注释</p></blockquote><ul><li>HTML注释的写法是</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/images/1681180699132.png" alt="1681180699132"></p><h3 id="HTML的入门程序"><a href="#HTML的入门程序" class="headerlink" title="HTML的入门程序"></a>HTML的入门程序</h3><blockquote><p>第一步 准备一个纯文本文件,拓展名为html</p></blockquote><blockquote><p>第二步  使用记事本打开网页,在网页内开发代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello html!!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第三步 使用浏览器打开文件,查看显示的内容</p></blockquote><img src="/img/images/1681178113257.png" alt="1681178113257" style="zoom: 67%;" /><h3 id="HTML概念词汇解释"><a href="#HTML概念词汇解释" class="headerlink" title="HTML概念词汇解释"></a>HTML概念词汇解释</h3><blockquote><p>标签</p></blockquote><ul><li>代码中的一个 &lt;&gt; 叫做一个标签,有些标签成对出现,称之为双标签,有些标签单独出现,称之为单标签</li></ul><blockquote><p>属性</p></blockquote><ul><li>一般在开始标签中,用于定义标签的一些特征</li></ul><blockquote><p>文本</p></blockquote><ul><li>双标签中间的文字,包含空格换行等结构</li></ul><blockquote><p>元素</p></blockquote><ul><li>经过浏览器解析后,每一个完整的标签(标签+属性+文本)可以称之为一个元素</li></ul><h3 id="HTML的语法规则"><a href="#HTML的语法规则" class="headerlink" title="HTML的语法规则"></a>HTML的语法规则</h3><ul><li><p>1 根标签有且只能有一个</p></li><li><p>2 无论是双标签还是单标签都需要正确关闭</p></li><li><p>3 标签可以嵌套但不能交叉嵌套</p></li><li><p>4 注释语法为<!-- -->  ,注意不能嵌套</p></li><li><p>5 属性必须有值，值必须加引号,H5中属性名和值相同时可以省略属性值</p></li><li><p>6 HTML中不严格区分字符串使用单双引号</p></li><li><p>7 HTML标签不严格区分大小写,但是不能大小写混用</p></li><li><p>8 HTML中不允许自定义标签名,强行自定义则无效</p></li><li><p>前端工程师“Front-End-Developer”源自于美国。大约从2005年开始正式的前端工程师角色被行业所认可，到了2010年，互联网开始全面进入移动时代，前端开发的工作越来越重要。</p></li><li><p>最初所有的开发工作都是由后端工程师完成的，随着业务越来越繁杂，工作量变大，于是我们将项目中的可视化部分和一部分交互功能的开发工作剥离出来，形成了前端开发。由于互联网行业的急速发展，导致了在不同的国家，有着截然不同的分工体制。</p></li><li><p>在日本和一些人口比较稀疏的国家，例如加拿大、澳大利亚等，流行“Full-Stack Engineer”，也就是我们通常所说的全栈工程师。通俗点说就是一个人除了完成前端开发和后端开发工作以外，有的公司从产品设计到项目开发再到后期运维可能都是同一个人，甚至可能还要负责UI、配动画，也可以是扫地、擦窗、写文档、维修桌椅等等。</p></li><li><p>而在美国等互联网环境比较发达的国家项目开发的分工协作更为明确，整个项目开发分为前端、中间层和后端三个开发阶段，这三个阶段分别由三个或者更多的人来协同完成。国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端来完成。</p></li><li><p>PRD（产品原型-产品经理） - PSD（视觉设计-UI工程师） - HTML&#x2F;CSS&#x2F;JavaScript（PC&#x2F;移动端网页，实现网页端的视觉展示和交互-前端工程师）</p></li><li><p>前端工程师比较推崇的一款开发工具就是visual  studio code,下载地址为:<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li></ul><img src="/img/images/1681175338788.png" alt="1681175338788" style="zoom: 33%;" /><blockquote><p>1 安装过程</p></blockquote><p>安装过程比较简单,一路next,注意安装路径不要有中文,空格和特殊符号即可</p><blockquote><p>2 安装插件</p></blockquote><img src="/img/images/1684302778377.png" alt="1684302778377" style="zoom:80%;" /><ul><li>Auto Rename Tag 自动修改标签对插件</li><li>Chinese Language Pack  汉化包</li><li>HTML CSS Support  HTML CSS 支持</li><li>Intellij IDEA Keybindings IDEA快捷键支持</li><li>Live Server 实时加载功能的小型服务器</li><li>open in  browser 通过浏览器打开当前文件的插件</li><li>Prettier-Code formatter 代码美化格式化插件</li><li>Vetur   VScode中的Vue工具插件</li><li>vscode-icons  文件显示图标插件</li><li>Vue 3 snipptes 生成VUE模板插件</li><li>Vue language Features Vue3语言特征插件</li></ul><blockquote><p>3 准备工作空间  </p></blockquote><ul><li><code>直接用vscode打开某个目录即可</code>直接将某个目录作为项目代码存放的根目录</li></ul><p><img src="/img/images/1684897738491.png" alt="1684897738491"></p><p><img src="/img/images/1687330010547.png" alt="1687330010547"></p><blockquote><p>4 在工作空间下创建目录和文件</p></blockquote><ul><li>点击带有”+”号的按钮即可创建文件或者目录</li></ul><p><img src="/img/images/1687330312538.png" alt="1687330312538"></p><ul><li>在html中,输入”  !  “ 并回车即可快速出现html的基本结构</li></ul><p><img src="/img/images/newhtml.gif" alt="newhtml"></p><blockquote><p>5 通过live Server 小型服务器运行项目</p></blockquote><ul><li>点击右下角Go Live , 或者在html编辑视图上右击 open with live Server  ,会自动启动小型服务器,并自动打开浏览器访问当前资源</li></ul><img src="/img/images/1681176763818.png" alt="1681176763818" style="zoom: 67%;" /><img src="/img/images/1681176815540.png" alt="1681176815540" style="zoom:67%;" /><ul><li>Live Server 实时加载功能</li></ul><img src="/img/images/GIF.gif" alt="GIF" style="zoom: 60%;" /><ul><li>Live Server使用完毕后,要记得关闭</li></ul><img src="/img/images/1681177160318.png" alt="1681177160318" style="zoom: 67%;" /><img src="/img/images/1681177186528.png" alt="1681177186528" style="zoom:67%;" /><blockquote><p>6 其他常见设置</p></blockquote><ul><li>设置字体:    齿轮&gt;search&gt;搜索    “字体大小”</li><li>设置字体大小可以用滚轮控制:  齿轮&gt;设置&gt;搜索 “Mouse Wheel Zoom”</li><li>设置左侧树缩进: 齿轮&gt;设置&gt;搜索 “树缩进”</li><li>设置文件夹折叠:  齿轮&gt;设置&gt;搜索 “compact” 取消第一个勾选</li><li>设置编码自动保存: 齿轮&gt; 设置&gt; 搜索 “Auto Save” ,选择为”afterDelay”</li></ul><h3 id="在线帮助文档"><a href="#在线帮助文档" class="headerlink" title="在线帮助文档"></a>在线帮助文档</h3><p><a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a></p><h2 id="HTML常见标签"><a href="#HTML常见标签" class="headerlink" title="HTML常见标签"></a>HTML常见标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><blockquote><p>标题标签一般用于在页面上定义一些标题性的内容,如新闻标题,文章标题等,有h1到h6六级标题</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681179289089.png" alt="1681179289089"></p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><blockquote><p>段落标签一般用于定义一些在页面上要显示的大段文字,多个段落标签之间实现自动分段的效果</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        记者从工信部了解到，近年来我国算力产业规模快速增长，年增长率近30%，算力规模排名全球第二。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        工信部统计显示，截至去年底，我国算力总规模达到180百亿亿次浮点运算/秒，存力总规模超过1000EB（1万亿GB）。</span><br><span class="line">        国家枢纽节点间的网络单向时延降低到20毫秒以内，算力核心产业规模达到1.8万亿元。中国信息通信研究院测算，</span><br><span class="line">        算力每投入1元，将带动3至4元的GDP经济增长。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> </span><br><span class="line">        近年来，我国算力基础设施发展成效显著，梯次优化的算力供给体系初步构建，算力基础设施的综合能力显著提升。</span><br><span class="line">        当前，算力正朝智能敏捷、绿色低碳、安全可靠方向发展。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681180017304.png" alt="1681180017304" style="zoom: 67%;" /><h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h3><blockquote><p>单纯实现换行的标签是br,如果想添加分隔线,可以使用hr标签</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        工信部统计显示，截至去年底，我国算力总规模达到180百亿亿次浮点运算/秒，存力总规模超过1000EB（1万亿GB）。</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        国家枢纽节点间的网络单向时延降低到20毫秒以内，算力核心产业规模达到1.8万亿元。</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        中国信息通信研究院测算，算力每投入1元，将带动3至4元的GDP经济增长。</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681180239241.png" alt="1681180239241"></p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><blockquote><p>有序列表  分条列项展示数据的标签, 其每一项前面的符号带有顺序特征</p></blockquote><ul><li>列表标签 ol</li><li>列表项标签 li</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681194349015.png" alt="1681194349015"></p><blockquote><p>无序列表 分条列项展示数据的标签, 其每一项前面的符号不带有顺序特征</p></blockquote><ul><li>列表标签 ul</li><li>列表项标签 li</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVASE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVAEE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681194434091.png" alt="1681194434091"></p><blockquote><p>嵌套列表 列表和列表之前可以签到,实现某一项内容详细展示</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        JAVA</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVASE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVAEE<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681194504371.png" alt="1681194504371"></p><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><blockquote><p>点击后带有链接跳转的标签 ,也叫作a标签</p></blockquote><ul><li><p>href属性用于定义连接</p><ul><li>href中可以使用绝对路径,以&#x2F;开头,始终以一个固定路径作为基准路径作为出发点</li><li>href中也可以使用相对路径,不以&#x2F;开头,以当前文件所在路径为出发点</li><li>href中也可以定义完整的URL</li></ul></li><li><p>target用于定义打开的方式</p><ul><li>_blank 在新窗口中打开目标资源</li><li>_self  在当前窗口中打开目标资源</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        href属性用于定义连接</span></span><br><span class="line"><span class="comment">            href中可以使用绝对路径,以/开头,始终以一个路径作为基准路径作为出发点</span></span><br><span class="line"><span class="comment">            href中也可以使用相对路径,不以/开头,以当前文件所在路径为出发点</span></span><br><span class="line"><span class="comment">            href中也可以定义完整的URL</span></span><br><span class="line"><span class="comment">        target用于定义打开的方式</span></span><br><span class="line"><span class="comment">            _blank 在新窗口中打开目标资源</span></span><br><span class="line"><span class="comment">            _self  在当前窗口中打开目标资源</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;01html的基本结构.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>相对路径本地资源连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/day01-html/01html的基本结构.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>绝对路径本地资源连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>外部资源链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/chaolianjiex.gif" alt="chaolianjiex" style="zoom:67%;" /><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><blockquote><p>img(重点) 图片标签,用于在页面上引入图片</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">src</span></span><br><span class="line"><span class="comment">用于定义图片的连接</span></span><br><span class="line"><span class="comment">title</span></span><br><span class="line"><span class="comment">用于定义鼠标悬停时显示的文字</span></span><br><span class="line"><span class="comment">alt</span></span><br><span class="line"><span class="comment">用于定义图片加载失败时显示的提示文字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/logo.png&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;Qing&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Qinglogo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>audio 用于在页面上引入一段声音</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> src</span></span><br><span class="line"><span class="comment">     用于定义目标声音资源</span></span><br><span class="line"><span class="comment"> autoplay</span></span><br><span class="line"><span class="comment">     用于控制打开页面时是否自动播放</span></span><br><span class="line"><span class="comment"> controls</span></span><br><span class="line"><span class="comment">     用于控制是否展示控制面板</span></span><br><span class="line"><span class="comment"> loop</span></span><br><span class="line"><span class="comment">     用于控制是否进行循环播放</span></span><br><span class="line"><span class="comment"> --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;img/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681196276582.png" alt="1681196276582" style="zoom: 67%;" /><blockquote><p>video 用于在页面上引入一段视频</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    src</span></span><br><span class="line"><span class="comment">        用于定义目标视频资源</span></span><br><span class="line"><span class="comment">    autoplay</span></span><br><span class="line"><span class="comment">        用于控制打开页面时是否自动播放</span></span><br><span class="line"><span class="comment">    controls</span></span><br><span class="line"><span class="comment">        用于控制是否展示控制面板</span></span><br><span class="line"><span class="comment">    loop</span></span><br><span class="line"><span class="comment">        用于控制是否进行循环播放</span></span><br><span class="line"><span class="comment">    --&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;img/movie.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681196233304.png" alt="1681196233304" style="zoom: 67%;" /><h3 id="表格标签-重点"><a href="#表格标签-重点" class="headerlink" title="表格标签(重点)"></a>表格标签(重点)</h3><blockquote><p>常规表格</p></blockquote><ul><li><p>table标签 代表表格</p></li><li><p>thead标签 代表表头 可以省略不写</p></li><li><p>tbody标签 代表表体 可以省略不写</p></li><li><p>tfoot标签 代表表尾  可以省略不写</p></li><li><p>tr标签 代表一行</p></li><li><p>td标签 代表行内的一格</p></li><li><p>th标签 自带加粗和居中效果的td</p></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小东<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>展示效果</li></ul><p><img src="/img/images/1681196961386.png" alt="1681196961386"></p><blockquote><p>单元格跨行</p></blockquote><ul><li><p>通过td的rowspan属性实现上下跨行</p></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            前三名升职加薪</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小东<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681197062594.png" alt="1681197062594"></p><blockquote><p>单元格跨行</p></blockquote><ul><li><p>通过td的colspan属性实现左右的跨列</p></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>员工技能竞赛评分表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; margin: 0px auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            前三名升职加薪</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李小东<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小虎<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>总人数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>平均分<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>及格率<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>80%<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681197299564.png" alt="1681197299564"></p><h3 id="表单标签-重点"><a href="#表单标签-重点" class="headerlink" title="表单标签(重点)"></a>表单标签(重点)</h3><blockquote><p>表单标签,可以实现让用户在界面上输入各种信息并提交的一种标签. 是向服务端发送数据主要的方式之一</p></blockquote><ul><li><p>form标签,表单标签,其内部用于定义可以让用户输入信息的表单项标签</p><ul><li>action, form标签的属性之一,用于定义信息提交的服务器的地址</li><li>method, form标签的属性之一,用于定义信息的提交方式<ul><li>get    get方式, 数据会缀到url后,以?作为参数开始的标识,多个参数用&amp;隔开</li><li>post  post方式,数据会通过请求体发送,不会在缀到url后</li></ul></li></ul></li><li><p>input标签,主要的表单项标签,可以用于定义表单项</p><ul><li>name, input标签的属性之一,用于定义提交的参数名</li><li>type, input标签的属性之一,用于定义表单项类型<ul><li>text   文本框</li><li>password 密码框</li><li>submit 提交按钮</li><li>reset    重置按钮</li></ul></li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">     用户名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681198068548.png" alt="1681198068548"></p><h3 id="常见表单项标签-重点"><a href="#常见表单项标签-重点" class="headerlink" title="常见表单项标签(重点)"></a>常见表单项标签(重点)</h3><blockquote><p>单行文本框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">个性签名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;signal&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681198354039.png" alt="1681198354039" style="zoom:50%;" /><blockquote><p>密码框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;secret&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681198393831.png" alt="1681198393831" style="zoom:50%;" /><blockquote><p>单选框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你的性别是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;summer&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>女</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681198448345.png" alt="1681198448345" style="zoom:50%;" /><ul><li>说明<ul><li>name属性相同的radio为一组，组内互斥</li><li>当用户选择了一个radio并提交表单，这个radio的name属性和value属性组成一个键值对发送给服务器</li><li>设置checked&#x3D;”checked”属性设置默认被选中的radio</li><li>如果属性名和属性值一样的话，可以省略属性值，只写checked即可</li></ul></li></ul><blockquote><p>复选框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你喜欢的球队是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Brazil&quot;</span>/&gt;</span>巴西</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;German&quot;</span> <span class="attr">checked</span>/&gt;</span>德国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;France&quot;</span>/&gt;</span>法国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>中国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Italian&quot;</span>/&gt;</span>意大利</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681198540737.png" alt="1681198540737" style="zoom:50%;" /><ul><li>说明<ul><li>设置checked&#x3D;”checked”属性设置默认被选中的checkbox</li></ul></li></ul><blockquote><p>下拉框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">你喜欢的运动是：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;interesting&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;swimming&quot;</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;running&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shooting&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>射击<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;skating&quot;</span>&gt;</span>溜冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681199376475.png" alt="1681199376475" style="zoom:50%;" /><ul><li>说明<ul><li>下拉列表用到了两种标签，其中select标签用来定义下拉列表，而option标签设置列表项。</li><li>name属性在select标签中设置,value属性在option标签中设置。</li><li>option标签的标签体是显示出来给用户看的，提交到服务器的是value属性的值。</li><li>通过在option标签中设置selected&#x3D;”selected”属性实现默认选中的效果。</li></ul></li></ul><blockquote><p>按钮</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681199471712.png" alt="1681199471712" style="zoom:50%;" /><ul><li>说明<ul><li>普通按钮: 点击后无效果，需要通过JavaScript绑定单击响应函数</li><li>重置按钮: 点击后将表单内的所有表单项都恢复为默认值</li><li>提交按钮: 点击后提交表单</li></ul></li></ul><blockquote><p>隐藏域</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2233&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>通过表单隐藏域设置的表单项不会显示到页面上，用户看不到。但是提交表单时会一起被提交。用来设置一些需要和表单一起提交但是不希望用户看到的数据，例如：用户id等等。</li></ul></li></ul><blockquote><p>多行文本框</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自我介绍：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681199589613.png" alt="1681199589613" style="zoom:50%;" /><ul><li>说明<ul><li>textarea没有value属性，如果要设置默认值需要写在开始和结束标签之间。</li></ul></li></ul><blockquote><p>文件标签</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681199672580.png" alt="1681199672580"></p><ul><li>说明<ul><li>不同浏览器显示的样式有微小差异</li></ul></li></ul><h3 id="布局相关标签"><a href="#布局相关标签" class="headerlink" title="布局相关标签"></a>布局相关标签</h3><blockquote><p>div标签  俗称”块”,主要用于划分页面结构,做页面布局</p></blockquote><blockquote><p>span标签 俗称”层”,主要用于划分元素范围,配合CSS做页面元素样式的修饰</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; height: 400px;background-color: cadetblue;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: beige;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面开头部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: blanchedalmond;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面中间部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 100px;background-color: burlywood;margin: 10px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: blueviolet;&quot;</span>&gt;</span>页面结尾部分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>展示效果</li></ul><img src="/img/images/1681200198741.png" alt="1681200198741" style="zoom:67%;" /><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><blockquote><p>对于有特殊含义的字符,需要通过转移字符来表示</p></blockquote><img src="/img/images/1681200435834.png" alt="1681200435834"  /><img src="/img/images/1681200467767.png" alt="1681200467767"  /><img src="/img/images/1681200487125.png" alt="1681200487125"  /><img src="/img/images/1681200503798.png" alt="1681200503798"  /><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>span<span class="symbol">&amp;gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>a href=&quot;http://www.atguigu.com&quot;<span class="symbol">&amp;gt;</span>尚<span class="symbol">&amp;nbsp;</span>硅<span class="symbol">&amp;nbsp;</span>谷<span class="symbol">&amp;lt;</span>/a<span class="symbol">&amp;gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;amp;</span>amp;  </span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681200662087.png" alt="1681200662087"></p><h2 id="CSS的使用"><a href="#CSS的使用" class="headerlink" title="CSS的使用"></a>CSS的使用</h2><blockquote><p>CSS  层叠样式表(英文全称：(Cascading Style Sheets)   能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力 ,简单来说,美化页面</p></blockquote><h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><blockquote><p>行内式,通过元素开始标签的style属性引入, 样式语法为       样式名:样式值; 样式名:样式值;</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        display: block;</span></span></span><br><span class="line"><span class="string"><span class="tag">        width: 60px; </span></span></span><br><span class="line"><span class="string"><span class="tag">        height: 40px; </span></span></span><br><span class="line"><span class="string"><span class="tag">        background-color: rgb(140, 235, 100); </span></span></span><br><span class="line"><span class="string"><span class="tag">        color: white;</span></span></span><br><span class="line"><span class="string"><span class="tag">        border: 3px solid green;</span></span></span><br><span class="line"><span class="string"><span class="tag">        font-size: 22px;</span></span></span><br><span class="line"><span class="string"><span class="tag">        font-family: &#x27;隶书&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="tag">        line-height: 30px;</span></span></span><br><span class="line"><span class="string"><span class="tag">        border-radius: 5px;</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681201322584.png" alt="1681201322584"></p><ul><li>缺点<ul><li>html代码和css样式代码交织在一起,增加阅读难度和维护成本</li><li>css样式代码仅对当前元素有效,代码重复量高,复用度低</li></ul></li></ul><blockquote><p>内嵌式</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 通过选择器确定样式的作用范围 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681201553427.png" alt="1681201553427"></p><ul><li>说明<ul><li>内嵌式样式需要在head标签中,通过一对style标签定义CSS样式</li><li>CSS样式的作用范围控制要依赖选择器</li><li>CSS的样式代码中注释的方式为  &#x2F;*   *&#x2F;</li><li>内嵌式虽然对样式代码做了抽取,但是CSS代码仍然在html文件中</li><li>内嵌样式仅仅能作用于当前文件,代码复用度还是不够,不利于网站风格统一</li></ul></li></ul><blockquote><p>连接式&#x2F;外部样式表</p></blockquote><ul><li>可以在项目单独创建css样式文件,专门用于存放CSS样式代码</li></ul><img src="/img/images/1681202361429.png" alt="1681202361429" style="zoom: 67%;" /><ul><li>在head标签中,通过link标签引入外部CSS样式即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/buttons.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>CSS样式代码从html文件中剥离,利于代码的维护</li><li>CSS样式文件可以被多个不同的html引入,利于网站风格统一</li></ul></li></ul><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><blockquote><p>元素选择器</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681203591080.png" alt="1681203591080"></p><ul><li>说明<ul><li>根据标签名确定样式的作用范围</li><li>语法为  元素名 {}</li><li>样式只能作用到同名标签上,其他标签不可用</li><li>相同的标签未必需要相同的样式,会造成样式的作用范围太大</li></ul></li></ul><blockquote><p>id选择器</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#btn1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn5&quot;</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681203748017.png" alt="1681203748017"></p><ul><li>说明<ul><li>根据元素id属性的值确定样式的作用范围</li><li>语法为  #id值 {}</li><li>id属性的值在页面上具有唯一性,所有id选择器也只能影响一个元素的样式</li><li>因为id属性值不够灵活,所以使用该选择器的情况较少</li></ul></li></ul><blockquote><p>class选择器</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.shapeClass</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.colorClass</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">140</span>, <span class="number">235</span>, <span class="number">100</span>); </span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fontClass</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&#x27;隶书&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;shapeClass colorClass fontClass&quot;</span><span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;shapeClass colorClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;colorClass fontClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">class</span> =<span class="string">&quot;fontClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮4&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;shapeClass colorClass fontClass&quot;</span> &gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/img/images/1681204269702.png" alt="1681204269702"></p><ul><li>说明<ul><li>根据元素class属性的值确定样式的作用范围</li><li>语法为  .class值 {}</li><li>class属性值可以有一个,也可以有多个,多个不同的标签也可以是使用相同的class值</li><li>多个选择器的样式可以在同一个元素上进行叠加</li><li>因为class选择器非常灵活,所以在CSS中,使用该选择器的情况较多</li></ul></li></ul><h3 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h3><blockquote><p>CSS的 Float（浮动）使元素脱离文档流，按照指定的方向（左或右发生移动），直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p></blockquote><ul><li>浮动设计的初衷为了解决文字环绕图片问题，浮动后一定不会将文字挡住，这是设计初衷。</li><li>文档流是是文档中可显示对象在排列时所占用的位置&#x2F;空间，而脱离文档流就是在页面中不占位置了。</li></ul><blockquote><p>浮动原理</p></blockquote><ul><li>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘</li></ul><img src="/img/images/1681260732580.png" alt="1681260732580" style="zoom: 80%;" /><ul><li>当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</li></ul><img src="/img/images/1681260842005.png" alt="1681260842005" style="zoom: 80%;" /><ul><li>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”</li></ul><img src="/img/images/1681260887708.png" alt="1681260887708" style="zoom: 80%;" /><blockquote><p>浮动的样式名:float</p></blockquote><img src="/img/images/1681260937920.png" alt="1681260937920" style="zoom:80%;" /><blockquote><p>通过代码感受浮动的效果</p></blockquote><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outerDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">224</span>, <span class="number">224</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*  float: right; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outerDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681261311289.png" alt="1681261311289" style="zoom: 67%;" /><h3 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h3><blockquote><p>position 属性指定了元素的定位类型。</p></blockquote><ul><li><p>这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。</p></li><li><p>元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。</p></li></ul><img src="/img/images/1681261377875.png" alt="1681261377875" style="zoom: 80%;" /><blockquote><p>静态定位</p></blockquote><ul><li>说明<ul><li>不设置的时候的默认值就是static，静态定位，没有定位，元素出现在该出现的位置，块级元素垂直排列，行内元素水平排列</li></ul></li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: static;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681261602297.png" alt="1681261602297" style="zoom:50%;" /><blockquote><p>绝对定位 </p></blockquote><ul><li><p>说明</p><ul><li>absolute ,通过 top left right bottom 指定元素在页面上的固定位置</li><li>定位后元素会让出原来位置,其他元素可以占用</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681261830830.png" alt="1681261830830" style="zoom:50%;" /><blockquote><p>相对定位</p></blockquote><ul><li><p>说明</p><ul><li>relative 相对于自己原来的位置进行地位</li><li>定位后保留原来的站位,其他元素不会移动到该位置</li></ul></li><li><p>代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681261993904.png" alt="1681261993904" style="zoom:50%;" /><blockquote><p>固定定位</p></blockquote><ul><li>说明<ul><li>fixed 失踪在浏览器窗口固定位置,不会随着页面的上下移动而移动</li><li>元素定位后会让出原来的位置,其他元素可以占用</li></ul></li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">166</span>, <span class="number">247</span>, <span class="number">46</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        br*100+tab</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/fixeddingwei.gif" alt="fixeddingwei" style="zoom:50%;" /><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><blockquote><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p></blockquote><ul><li>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距（margin），边框（border），填充（padding），和实际内容（content）</li></ul><img src="/img/images/1681262535006.png" alt="1681262535006" style="zoom:67%;" /><ul><li>说明：<ul><li>Margin(外边距) - 清除边框外的区域，外边距是透明的。</li><li>Border(边框) - 围绕在内边距和内容外的边框。</li><li>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</li><li>Content(内容) - 盒子的内容，显示文本和图像。</li></ul></li></ul><img src="/img/images/1681262585852.png" alt="1681262585852" style="zoom:67%;" /><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outerDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">224</span>, <span class="number">224</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.innerDiv</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* margin-top: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-right: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-bottom: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-left: 40px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">       </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* padding-top: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-right: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-bottom: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-left: 40px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">230</span>, <span class="number">124</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.d3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">26</span>, <span class="number">165</span>, <span class="number">208</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outerDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d1&quot;</span>&gt;</span>框1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d2&quot;</span>&gt;</span>框2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innerDiv d3&quot;</span>&gt;</span>框3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="/img/images/1681263227281.png" alt="1681263227281" style="zoom: 67%;" /><ul><li>在浏览器上,通过F12工具查看盒子模型状态</li></ul><img src="/img/images/1681263265604.png" alt="1681263265604" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死星照命</title>
      <link href="/2024/10/27/%E6%AD%BB%E6%98%9F%E7%85%A7%E5%91%BD/"/>
      <url>/2024/10/27/%E6%AD%BB%E6%98%9F%E7%85%A7%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<p><em>你眼睛的面积一定小于湖<br>你也很少哭 可为什么<br>坐在你面前 就像站在湖边<br>细细的雾水就扯地连天</em></p><br>  <p>我翻看之前写的东西时，总会想：我靠，我到底是怎么写出来这些屁话的。</p><p>感觉是即兴发挥的抽象成分太多了，无法复现。有一种早上起来发现起早了，想要睡又睡不着，愣在床上不知道干啥，想打喷嚏又打不出来，想下床又不想动的感觉。</p><p>我的灵魂一直在同一个躯体里反复地压缩折叠变形，像是在揉一团只放鸡蛋的碱面。新的血肉层层叠叠覆盖旧的，形似质量很差的3D打印机，藕断丝连，到最后只能糊成一团。</p><p>有一段时间，我妄想从自己输出的密集的内容中寻到慰籍、鼓励、救赎之类的东西，然而输出后我只觉得恐惧而空虚，只会变本加厉，本能似地一遍遍模拟着明天和将来的人生道路，担惊受怕却乐此不疲。这些东西就像不知道什么时候爬在身上的水蛭，偷偷地吸血，被摘掉以后也会留下巨大的空洞。</p><p>我总是冷不丁地回头看，然后又冷不丁地发现自己早就已经来到了以前的以后。片刻的抽离感，一切都发生在一瞬间，眨眼间的狂风乍起——和老友重聚的旅行，彻夜的狂欢与黎明出头的疲惫，随着时间逐渐陌生，离别，再往后是乍起的怀念，恍然大悟原来往日不复，只好又把自己这点小小的酸楚收拾好，浸回时光的腌菜缸。</p><p>写这段的时候我才发现，小时候所能设想的最远的以后，居然是2022卡塔尔世界杯。怪不得梅西举起大力神杯的一瞬间，我突然有些恍惚。好像只要所有的故事写到了头，结局就会像一个编译器里的断点，把所有悲欢离合都停住。我以为可以像三毛说的那样，在有限的时空里过无限广大的日子呢。可是世界这个沟槽的垃圾编译器没有断点，命运只会疯了一样奔腾不息，故事结束以后，还有更多更多的以后，像是不停地出狗尾续貂的续集恰烂钱的垃圾作品。</p><p>未来无穷的日子，无尽的路，一眼看得到头的生活一眼望不到头。海子诗里写过，风后面是风，天空上面是天空，道路后面还是道路。</p><p>他还写过，我年华虚度，空有一身疲倦。和所有以梦为马的诗人一样。岁月易逝。一滴不剩。</p><p><br><br></p><p>收拾东西偶然翻出以前的作业本，好像看到了青春游走的印痕，斑驳的纸面上尽是日夜流转的车辙，纹路走脉，一览无余。</p><p>时间实实在在地从指缝里流过，我正在四季轮转的空气里氧化，像一只被咬了一口又放置了二十年的苹果。能被记住的夏天都会熔进身体，春秋冬的时候它就在骨髓里休眠。等新的夏天回来了，它就又带着洗完澡回到书桌旁时，沐浴露，水汽，木头，笔油，空调风的复合气味，弥散在缭乱涣散的记忆里。时间的颗粒度并不是均匀的，人的一生最多经历百八十个夏天，去掉几年的茫然、匆忙、恍惚什么的杂质，其实我们一生真正能记住的只有寥寥几个夏天，不管怎么说，十八岁的肯定算一个，因为我在每一个夏天都会忍不住地回想十八岁的夏天。</p><p>以后就会变好了，以后就轻松了，以后是一切的答案，现在的以后，以后的以后，一切的以后，所有十八岁的痛苦都会像变戏法似的，噗嗤一声消失不见。那时深信不疑的我会心甘情愿不厌其烦地收拾自己的烂摊子，一遍又一遍。书桌上铺天盖地的卷子诱发史上最大的雪崩。零落的一把把红叉，横七竖八，落得遍地都是。可是我还是那样的灿烂，伸个懒腰都能抖落一地闪闪发光的可能性。我已经记不清那时我在用什么消遣，出于怎样的想法与观点，用什么填补空虚与孤独。我只记得那时觉得世界太过懦弱轻薄，唯我孤高勇敢。那时看到茨威格回忆录里最后一段话，深以为然，“不过，每个影子毕竟也都是光的孩子。”</p><p>我以为，只要我想，我就可以轻松飞越教室，飞越教学楼，飞向克里姆林宫。狂热的心忍不住要冲垮世间的一切高墙，直达最闪耀最明亮的未来。联想到夏天起风的日子，我们学校有个不成文的传承，毕业班的同学们会用草稿纸折纸飞机。我用尽力气，想将它带到最高的蓝天。在窗前放飞梦想时，我只想看到它笔直冲出教室带着自己所有的期望消失在窗户的视野里，此去千千万万里，替我去寻找以后的千千万万个奇迹。</p><p>我烧尽绽放的原野，浇灌给期待。</p><p>上次回学校，经过那些教学楼，我在楼下看到了一架又一架新坠毁的年轻的心。我猜他们多半也是和我一样，都扑了个空吧。</p><p><br><br></p><p>如今，我亲眼看着“以后”一点一点地挪到了自己面前。原来“以后”根本不是免死金牌，张牙舞爪的关底隐藏boss。</p><p>多年以后，面对像山一样横在面前的“以后”，被城管赶得满地跑的码农烧烤老板L1ttleQing会想起老师带他见识”hello world”的那个遥远下午。</p><p>我现在才知道，所有的“以后”都需要一个清晰的明天才能稳稳接住。可是啊，可是啊，那些不切实际的期许就像满屏幕乱飞的野指针，过去种种的不甘心，年少的不如意，那些无能为力又痛彻心扉的事情，我很清楚地知道自己怪不了任何人，都是我没操作好，技术水平不到位。它们变成了永远不会释放的内存。数据结构的张维勇老师说了一句我记到现在的话，人生好像一棵不平衡的二叉树。这个论断有些悲观，因为到达尽头前，我们总会不断地1怀疑这一端的遍历是死胡同，树杈最远那一端的选择才是最优的。</p><p>现在，高中时让我困扰的一切变本加厉地卷土重来，尽数钻进屏幕，变成编译器上瀑布一样的报错。IDEA上花花绿绿的只言片语，像是炫目的霓虹灯，闪烁着迷离的光，乱人心神。它们是不是正好能找补秋招金九银十里下落不明的简历。看着密密麻麻的日志，我有时会莫名其妙地感到愤怒，不明所以的压抑，呼吸短暂变成手动挡。情绪错综复杂，绞尽脑汁搜罗词句也描述不出来，有时候像是锟斤拷烫烫烫一样难以识别，有时候就干脆单纯是缺省值，留下好大一块令人心悸的空白，让人不知道怎么去填补。</p><p>忘记是哪一天，我明白了自己终其一生所做的，最多就是普通的应用开发，不可能是创新研究。所以我的问题在网上一定能找到，如果找不到，要么问错了，要么思路错了，重新分析方案。总之就是，我知道自己挺普通又自信的，但遇到一个存在多年、多次reopen、现在还是open的issue，还是会心力憔悴。这个issue的内容是怎么好好生活，怎么爱自己。</p><p>我的绝大部分想法，就只是像艳阳天里的肥皂泡而已，流光溢彩，晃晃悠悠，载浮载沉，明灭不定，然后突然啵一声消失不见。好想按ctrl+&#x2F;，把它们全都注释掉啊。<br>我能看穿内存里雀跃的0和1，摆弄函数和接口，识破数据结构的伎俩，但还看不清那些生活的实景，捉摸不透漫漫岁月的形状。</p><p>我真想绕过繁杂往复的电子帷幕，亲眼看看实实在在的人间。所以我又去了一趟川西。</p><p><br><br></p><p>我只用了半天就越过了去年去的最远的地方，感叹怎么一年一眨眼就过去了，到底是谁在用薄薄的刀子裁剪我窄窄的日子，分寸恰到好处，让我毫无察觉地慢慢变单薄，风吹一吹就吹透了，想流眼泪。我好像永远也走不出去年的记忆。折多河还是一样湍急，折多山也还在那等着我，漫山遍野都是流淌着的云，而呼啸的风正扯满一座塔的彩旗。</p><p>去年的川西和今年的似乎是一个样。一样澄清明亮的天，淡淡的流云，十月青黄不接的漫漫草原，牦牛群相似地甩着尾巴。便利店的阿婆似乎和去年是同一个，一样皱巴巴红彤彤的高原面相，像正被风化剥落的岩石。她坐在一样的位置，卖着一样的正宗高原老酸奶。浑身灰扑扑的小孩一样地在一旁追打嬉闹，而我在同样的车窗边靠着脑袋，在同样的318上急驰而过。</p><p>好像所有一切都被定住了，只有我到来之后，高原才开始被加载，这里的时间才继续流动。日子变得好慢，好长，一成不变。他们有太多和我截然不同的生活，呈现我难以想象的面貌，在世界的每个角落隐秘地展开。原来人生真的有好多种可能性，可惜我们都不能选择另一种生活，我当然有权拒绝一种生活，但是我没能力拒绝。</p><p>我也想留在格底拉姆当野人，在鱼子西开观光车，想和他们一起去放牛骑马，想在理塘露出纯真微笑；某些高原的藏民们会不会也想和我一样，去不需要氧气也能好好呼吸，皮肤不会晒出高原红的大城市生活呢？也就想想了。生活太沉重，它的惯性太大。</p><p>在洛绒牛场时暴雨倾盆，大伙躲在景区小木屋避雨。这一瞬间我从去川西追寻自由的说辞里短暂抽离，因为我发现自己根本没有摆脱自己面临的任何一种困境，旅行就要进入返程阶段了，我会很自然地回到原本的生活里，那些希望逃避的事情会随着海拔的下降变得清晰，什么都没有改变，仅此而已。我望着云雾里的仙乃日、央迈勇和夏诺多吉三座雪峰出神，神话里有比天伟力的它们如今纹丝不动，缄口不言，只有亘古的沉默在我耳朵里炸开。</p><p>我给我妈发消息，说稻城亚丁在下雨。我妈说高原下雨很正常。顿时想起百年孤独。我是在七年前补习班里用午休时间看的百年孤独，那时年少春衫薄，如今一晃七年过去了，我以为自己早就不再多愁伤感，可是现在却仍然被这样磅礴的巧合击中。</p><p>“奥雷里亚诺，”他悲伤地敲下发报键，“马孔多在下雨。”</p><p>线路上一阵长久的沉默，忽然，在机器上跳出奥雷里亚诺·布恩迪亚上校冷漠的电码。</p><p>“别犯傻了，赫里内勒多，”电码如是说道，“八月下雨很正常。”</p><p>时间这台大机器散架了。</p><p>小时候暑假，每天晚上吃完饭就出门疯玩，玩到天慢慢黑下去。傍晚时分的滨江广场，太阳斜斜地洒下好暖好暖的光，质感就像是刚出炉的烤红薯。我望着涪江夕阳下粼粼的波光，看那些云母片一样亮闪闪的光点浩浩荡荡流向水天一色的远方，一去再不回头，只有几只水鸟隐隐约约在天边闪烁。</p><p>那是个多好的傍晚，树一点点高，鸟一声声叫，我的影子在斜阳下晃晃悠悠地漂在水上，眼前的一切都灿烂明亮。我跑来跑去，和小朋友们在暮色四合里穿梭往返，舍不得回家。一玩就忘记了时间，总觉得什么看不够，怎么都玩不够。</p><p>我爸说，要看够玩够，那还得了啊！那可就长大了，差不多了就回家吧。于是这时我转身回头，路灯亮起来，夜幕拉上去，我们慢慢悠悠往回走，像来时一样。那时身边的江风软软的，像泛起水汽和草叶的味道的拥抱。江的那一边千灯万盏，好像是从水里浮起又沉下去，水波把它们打碎又重组。影影绰绰的岸边，我的每一步都踏在未来的回忆里。涪江在我身后徐徐消散。那一天，心底突然生发出一种莫名的悲伤，是关于爸爸说的长大吗。我还不知道，曾经的生活有一天会需要在回忆里不断证明。终于忘记你的时候，你出现在我的梦里。</p><p>什么时候那些沉寂的温暖可以以另一种方式重新变得鲜活呢，其实我一直在暗中期待，某一天，那时的斜阳可以又升回江边的天空，我可以像小时候一样，重新再来一次一模一样的日落。我真正需要的，或许就是这样平常却又弥足珍贵的温暖，它们能在漫长岁月的每一个皱褶里熠熠生辉，我藉此火得度一生的茫茫黑夜。</p><p>如果没有滨江广场旁一排排熟悉的红漆面房子，没有扬起又落下的尘土，没有还在吹刮着的那一场一场的江风，谁会证实我以往的生活。可是即使有它们，一个人内心的风雨飘摇，谁又能见证。</p><p>我已经是升级版的自己了，很多特性和历史版本已经不兼容，几乎不可能再溯源。于是我顺理成章地，变成了浩荡时光里一个离家出走的远行客。</p><p>我突然感觉到喘不过气来，生活二字在丹田处骤然升腾，直冲到脑子里。它以350TB每秒的速度被上传至云端，然后又以600TB每秒的速度被下载到一些去中心化的时空里。</p><p>我想起那时甚至没上小学，最多四五岁，想要和小朋友们一起去吃旺旺碎冰冰。可是我没有钱，爸爸妈妈也没带钱。我左顾右盼，然后坐在地上放声大哭，无计可施又无济于事。我已经二十一岁，我现在已经习惯了无计可施，理解了无济于事，所以不再放声大哭了。</p><p>也是那时候，偶尔晚上睡不着，婆婆会陪我聊天。很难想象那时睡不着的只是因为白天太兴奋了。我讲学校里追逐的笑声，和朋友打闹的惊险，小卖部里新奇的玩具；婆婆给我讲市场涨了两角的豇豆，隔壁大爷大妈家里的琐事。听不懂，但不知不觉心里就轻了。“早点睡吧，明天带你去吃米粉。”米粉真的很好吃，我现在也还是很爱吃米粉。</p><p>想起一年级的寒假，书房开着暖气，有铺了毛毯的椅子，我在摩尔庄园里把烂番茄砸到那个冲我扔雪球的人头上，然后扭头和身边观战的爸爸一起哈哈大笑。</p><p>想起初中，某次考试考的很糟糕，有道简单题全班只有我一个人错了，数学老师气笑了，过来揪着我的耳朵说，你看看，辣不辣眼睛？可是我就是不会做，我说有点辣，然后大家都笑了。那时教学楼外面的天黑蓝黑蓝的，我的胸口闷闷的，被骂的时候没哭，走在路上，看到路灯刺眼的光，突然无意识地泪流满面。</p><p>想起高中，偶尔我会早醒，爸爸妈妈还没有起来。我躺在床上看着窗外的天，那是每周都听的华北浪革专辑封面的蓝，心里的疏离感和自由感交替着爬上来。小区里传来几声鸟鸣，在它变成很多声之前，我就又会睡去，等到六点半出发去学校再醒来。</p><p>我想起刚满二十岁的时候，站在西南大学橘园八舍113的镜子前，踌躇满志，试图发起一场盛大的冲锋。</p><p>想起二十一岁的我，在稻城亚丁短线尽头珍珠海的岸边上坐着。我用手遮住太阳，看着雪山，在湛蓝的天空下说，我一定要坚持下去，所有的事情总会好起来的。</p><p>科学研究表明一个人的脑容量只有2.6MB，所以整个云同步的过程持续0.03微秒，0.03微秒之后，我返回当下，两手空空。</p><p>“我围抱着火炉，烤热漫长一生的一个时刻。我知道这一时刻之外，我其余的岁月，我的亲人们的岁月，远在屋外的大雪中，被寒风吹彻。”</p><p>文字于我即是快马、长枪、大碗的酒和阻绝兵马的群山，可以让我在自己的小世界里短暂割据一方，当一把土匪，然后被现实迅速剿灭。这是内在的狂欢，平息后即归于日常。时至今日，因为已经读过了好多书，我的情感阈值已经大幅提升，对浓烈的文字有种近于自我保护的屏蔽，越来越少被深深触动。可是写到这里，以前读过的这些东西，像是哈利波特的闪电伤疤一样，突然就疼得发烫。</p><p>我现在终于知道了，漫漫的岁月原来是雪一样，纷纷落落。趁扬眉的功夫，它正好就能掉进抬头纹里，压出一道道好深好深的沟壑，横贯我似有若无的记忆，深得足以埋藏一大半侥幸的童年与仓皇的青春，足够掩饰孤独，歧视与荒芜的爱。潦草的旷野，不待解释的失败，混乱的眼泪，匆忙的失去，成批量的无疾而终。</p><p>人的生活总是看似丰饶而又格外空旷，靠着二十年前的生命，十年前的梦想，五年前的回忆，一年前的衣服，三个月前的项目，昨天的作业，中午的拼好饭，以及因为塞满了期待而变得越来越重的的未来堪堪支撑着。</p><p>临走前，我把以前的自己深深掩埋在贡嘎的积雪下。从此我不记得他，狂妄的他。</p><p>芒草在山巅，痛苦都留在眉间。</p><p><br><br></p><p>有时我很爱看自己的手。一些人相信，手上矛盾密布的纹路深埋着自己的命运，能以隐秘的形式断言未来百年分支蔓生的光阴，这样就可以自作聪明地逃避虚妄的思考。</p><p>我倒是觉得，它们更类似于江河的形态，起落流淌，浅浅泛起细碎的过往。</p><p>似乎认同了这样的解释，实质化的命运就能服服帖帖地在指间闪烁跃动，辗转腾挪，严丝合缝地运转，像啮合的齿轮。</p><p>汉朝时，蜀郡有口怪井，井中常年冒火，在国运兴盛的时期，火势很旺；汉室衰微后，火渐渐小了。后来有人投了一支蜡烛进去，大概是想引火，那火却灭了。那年蜀汉灭亡。</p><p>帝国的命运正反映在千里外一团颤动的火焰中。汉武帝在上林苑中策马奔腾，驰骋射猎时，对此毫不知情。</p><p>我喜欢这个小故事，我想，人对自己命运的掌控，只是迟钝反射弧下的暧昧的幻觉。一生的风沙星辰何其辽远广阔，不可能被简简单单地攥进拳头。</p><p>我感到一种近乎抽象的哀伤，哀伤没有想象中的持久。有点惭愧，惭愧也转瞬而逝。和那年背后的涪江一样，消弭于无形，好像那只蜡烛之于蜀汉。只是我偶尔也还是会感到眼底潮湿，是心底贡嘎的积雪消融，还是身体里涪江的潮汐又拍上了岸头。</p><p>带我回去吧，我想找到十八岁夏夜的灰烬。</p><p>天地轰鸣，此消彼长，死星照命。</p><p>青春已复过，白日忽相催。</p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雨打风吹去</title>
      <link href="/2024/05/27/%E9%9B%A8%E6%89%93%E9%A3%8E%E5%90%B9%E5%8E%BB/"/>
      <url>/2024/05/27/%E9%9B%A8%E6%89%93%E9%A3%8E%E5%90%B9%E5%8E%BB/</url>
      
        <content type="html"><![CDATA[<p><em>“陈清扬后来说，在山上她也觉得很有趣。漫山冷雾时，腰上别着刀子，足蹬高统雨靴，走到雨丝里去。但是同样的事做多了就不再有趣。所以她还是决定下山，去忍受人世的摧残。”——《黄金时代》王小波</em><br></br><br></br></p><p>十二点，站在地平线下的宿舍阳台上刷牙，月黑风高杀人夜，听说马上要下一场很大的雨。潮湿的味道很浓。</p><p>趁着我心里空落落，寒森森的乌云压下来，满满当当地填进胸口。衣服鼓荡就像帆张开，不知道要把我吹到哪去。没有一个人注意到，我的脖颈上正勒着道细细的风，让人喘不上气。</p><p>最近世界变得很没礼貌，对我不怎么好。诸事不顺，手足无措，山雨欲来风满楼。大部分时间，我只有一个感觉：力不从心。</p><p>陡然间冒出来太多事情要并行处理，而我根本没有三头六臂。我时常觉得自己是实验组的小白鼠，没有翅膀的蚊子，刮好了鳞片的鱼，被提着翅膀的鸡，诸如此类的东西。</p><p>于是整个人变得千疮百孔，四处漏风，我总是很神经质地担心自己的大学生活是不是走错了哪步，而恰好又正是这一处溃口，导致最后棋差一招，满盘皆输。</p><p>可是生活又没有全收集攻略，丢三落四是常态，所以我又心绪难宁。</p><p>小时候在充气城堡玩，我总是在想，要是拿根针给它戳个孔会怎么样。现在知道了，就像我这样，噗呲噗呲地冒着一肚子的气，眼巴巴看着自己慢慢瘪下去。</p><p></br></br></p><p>我发现，每次去追溯痛苦的根源，最后无一例外都指向我自己。王小波说人的一切痛苦，本质上都是对自己无能的愤怒。</p><p>老一辈都说吃啥补啥，这些年我吃的全是苦中苦，怎么办，在线等，挺急的。</p><p>我写东西的时候喜欢细细琢磨，老是爱想怎么处理好一点。往往选好了一个词，却又舍不得另一个词。说白了就是穷讲究，爱选来选去，选花了眼。</p><p>按数据科学的说法，我写东西在进行一个可视化的过程。我是在把游离的思绪具现化出来，不断地逼近一个置信区间，等到它们终于被死死固定在方寸之间，就工工整整表示出来，ctrl+s保存为模型，算是勉强收拾好情绪的结晶，以后有时间再矫正——“以后有时间”，这种话一说出来，就是再也没有时间的意思，模型让我选什么就选什么了。</p><p>我每次回看先前的文章，都能捡起先前的部分心境，就像是听到一首某个时间段经常听的老歌，这是情绪的快照版本，类似许多文献都需要在参考资料部分的留痕。这是在把布满裂纹的自己不负责任地丢给另一个自己去修复。正常来说，看病是先确诊再拿药，我不一样，我是狂吃上次开过的药，再试图把自己的病变成上次的病。实在不行，就天马行空地产点新药，多少对付两口，等待下一次不时之需。</p><p>好像坐井观天的小青蛙又想方设法爬回了那口井，望着一模一样的尺水寸天，欺骗自己说一切还好，终于心安理得地松弛下来。</p><p>可是当暮色四合时，阴郁的情绪会斩断晨昏，就算是青蛙，也知道天要黑下去了。</p><p>身边的人都在往前走，信赖的学长要退网考研，老同学转眼就要出国，很多朋友也要去实习。大家都有自己的事情，各自有各自的忙碌。很多人都闪闪发光，有拿到国奖的，有能十分钟内秒杀一切算法题的，有手拿几份大厂offer的，有考研狂砍412的，有留在实验室发IEEE论文的。</p><p>只有我，笨手笨脚地忙前忙后，仍然庸庸碌碌。午夜梦醒时发现自己只会背诵一堆计算机八股文，顶多糊弄糊弄外行，信口雌黄地甩出一大堆英文缩写来掩人耳目，说实话，和农村里装神弄鬼的神婆已经没有本质区别了。</p><p>这种感觉，好像是知道作业有答案，所以放心玩到假期最后一天，终于开始补的时候赫然发现一个大大的“略”。</p><p></br></br></p><p>咨询发展方向的时候，学长问我有什么优点，我说我学习认真，数据结构知识牢固，了解计算机网络，熟悉操作系统和算法。</p><p>学长说我很适合干电信诈骗。</p><p>长时间处在过载的状态，每次听说别人的大学生活是如何的游刃有余潇洒写意，亲眼看到意气风发的白衬衫少年在阳光灿烂的教学楼下开怀大笑——不开玩笑地讲，我就觉得自己像一台性能落后的老电脑，面对着理应很好懂的事，锈迹斑斑的机体还是会一如既往地红温冒烟，然后骤然宕机，等待一次彻底的重启。</p><p>可是我又不敢停下一点，毕竟未来，我的未来，它就那样堂而皇之地，晃晃悠悠地，大模大样地，居心叵测地，悬在我的头顶。</p><p>在时间界限模糊不清的这几年里，我偶尔会想要根据年份换算年龄。当得出答案时，却不知这个数字的前缀该是“我才”还是“我已经”。</p><p>是到该做什么事的年龄了吗？可是他们说的人生的分岔口，我好像一次都没遇到过。可能，我已经糊里糊涂地把它们全部漏过去了。又或者，我只是跟着惯性随波逐流。</p><p>每每对自己所处的人生节点感到迷惑，却发现自己也只是迷惑，脚步仍然亦步亦趋地向前迈着，不知道终点在哪，也不知道为什么要去终点，这是一段没人追赶的冷门路线。</p><p>我实在不知道对于明天而言，今天凌晨的自己到底够不够格。我并不知道下一步应该做什么，我应该去哪里。每次想到这里，恐惧都会弥散开来，精神世界具象化成一个巨大的下水道。我想没有人会一开始就把自己带入老鼠的角色吧。</p><p>想要抓住青春岁月的尾巴，我就应该接受过去、把握当下、期待未来；可我永远只会后悔过去、浪费当下、焦虑未来。</p><p>唉唉，没事，能与世界保持联系已经很棒了。</p><p></br></br></p><p>前些天和朋友一起吃自助烤肉，全是合成肉，只好挑着吃，很快就倦了。瘫在椅子上发呆，我又想起这个问题。</p><p>想来我有好多好多朋友，他们都是非常可爱的，但深入相处起来又有一些麻烦，因为每每深入一些，都需要贡献出来一些更隐秘的自己，多交出一些自己的脆弱。这对我来说是一件很难的事情，就像那时，我没有把正在想的这些事和朋友讲出来。</p><p>过去的日子居然在慢慢发黄、模糊、漫漶不清。这是难以想象的。</p><p>刚进校时，走的是二号门，我和爸爸妈妈吃的韭家小面，我爸说，这家的杂酱不如我炒的好。拎起行李，只身走上校车，师傅让我扫三份校车钱，我没有校园卡，只能扫微信，花了整整六块。</p><p>正值十月，薄云也呈漫卷的态势，阳光不辣，斜斜地打在四运。坐在车里紧紧捏着装得满满的行李箱，我的心情和风一起翻涌，幻想着自己的未来，宏大的愿景如同此刻的太阳一样，灿烂辉煌，明媚敞亮。</p><p>那时候，还不知道身处何处，也不知道前途何往，只知道脑子里有大把大把的想法凭空冒出来，像肥皂泡一样流光溢彩又转瞬即逝。我会平白无故地相信未来可期，相信着战胜死亡的年轻。</p><p>人迟早得往前走，就像红灯变绿后，总赖着不走，会有跟着的人嘟嘟嘟按喇叭的。可是我就是有种空空荡荡的茫然，一不留神就被难以言说的局促困顿爬满一身,这让我动弹不得。命运与其说是注定，不如说是忘记了何时做出了选择。</p><p>现在的自己，其实是无数次选择排列组合的结果。所以一定存在一个最优解，指向一个理想化的好结局。可惜，关键选项不会有高亮提示，擦肩而过时也不能读档。</p><p>我也会很多次问自己，那么多的选择、那么多的可能性匆匆流过的时候，我到底有没有后悔——要是我再努力一下，要是我再勇敢一点，结果会不会不一样？</p><p>我会不会也意气风发，光芒万丈呢。我会不会会不会大步流星，奔逸绝尘，自信到不需要回头？我会不会也可以昂首挺胸地说我也值得，我也配得上？</p><p>我想，唯独关于后悔，我是不后悔的。因为未来的人对过去的人的批评，是这个世界上最不公平的事。</p><p></br></br></p><p>以前我不擅长很坦率地和人沟通，就像吃烤肉的时候，我总不可能把自己苦大仇深的想法全连汤带水地吐出来，直接败了大伙胃口吧。</p><p>所以很长一段时间里，我总是误以为自己遇到的这些迷茫全都是独一无二的限量款，繁杂到让人叹为观止；我自以为很多令自己痛苦的想法都深邃黑暗，值得写成一部荡气回肠的小说。</p><p>没人告诉我大家都经历着我所经历的一切。面前嬉皮笑脸地烤焦了肉的朋友们，其实心底也各有各的忧愁，只是我一无所知，而且彼此不提罢了。</p><p>刚刚切屏看到QQ有个什么虚拟形象，属实是唐得发瘟。我觉得自己的形象其实该是赛博祥林嫂，敝帚自珍，自说自话，絮絮叨叨，重复着人手一份的错愕。我最擅长的事，就是把一些没什么意思的挫折翻出来，拾掇拾掇，添油加醋。</p><p>能写下这些东西也是一种勇气，高中没有搭博客，在作业本上写过不少这样的只言片语，一写完，就迅速撕得碎碎的扔掉，阅后即焚，生怕被人看到。</p><p>现在想想还是因为当时太幼稚，不然也不至于没胆量面对实际存在的客观事实。到现在，我终于可以大大方方地承认我是一个俗人，一个庸人，一个没有脱离低级趣味的人，一个好高骛远的人，一个没有阅历的人，一生截至目前，大体上仍然循规蹈矩，人生规划不敢越雷池半步。我还是不大敢看自己的生活，它坚硬，铉黑，有风镐的锐角，石头碰一碰，就会流血。</p><p>我也没有一支足以生花的妙笔。我写童年，写青春，其实也没什么好写，很多东西都不太有意思。毕竟少有人经历过轰轰烈烈的故事，大都平淡琐碎无聊，漫长的生活中有趣的事情寥寥无几。想要写点抖机灵的话，又发现自己的灵魂相当俗气，只能像乌鸦一样聒噪。</p><p>当我从别人水银泻地的语言和天马行空的故事里抽离出来时，只会很遗憾——到头来，也不能写出一些让人无论翻来覆去读多少次都能潸然泪下的东西。</p><p>可是我喜欢自己的文字，这就够了。不是每句话都好，至少能撼动我。毕竟我是最贴近自己的人，吞咽困厄时并不会有排异反应。这样吐出的词句，它们砸在心头的份量，莫名让我想起我爸工地上的冲压机。愁是最真实的愁，不追加任何生活之外的假意。</p><p>突然想起《白马啸西风》里那个孑然一身，执拗又无常的李文秀。她说，“那都是很好很好的，可是我偏不喜欢。”从此选择反抗了她既定的命运。</p><p>怨憎会，爱别离，求不得。原来很多事情，本就解释不清楚，本就算不清。</p><p>算不清的东西就像是考卷上出错的题，答案无所谓对错，不管选什么都会给分。</p><p>哪怕绞尽脑汁也只能写出这样拼凑的句子。可是我偏要写，这就是我的选择，不是吗。</p></br></br><p>朋友喊我夹刚刚烤好的巨大合成牛排。不管世界如何，觉得吃肉总是正确的，我一吃到肉就会好一些。啊呜啊呜。</p><p>众所周知，科比的名字来自神户牛排，然而他的作风跟牛排显然没啥关系；而自己起的绰号黑曼巴，倒的确更符合他强力的做派——狂野，震撼宇宙。</p><p>古龙也说过句话：一个人的名字会起错，绰号是不会错的。名字是父母起的，绰号是自己挣的。我想说的是，别人赐的，自己选的，终究不同些。</p><p>对我这种人来说，早早选择想要什么样的生活，并为之付出努力，最终志得意满地宣布目标实现，永远是一种奢望。更多的时候，就是一边在人海中身不由己地向前，一边调整心态，告诉自己，这就是我选的的生活。要是明天仍然会和今天一模一样，那也没必要留恋一成不变的现状。如果从未做出选择，我就不配害怕选择本身。</p><p>我仍然在试图做出选择，很大程度上是因为我不希望回头看时才发现，自己一生所做的，只是在贯彻不属于我的意志。我来人间一趟，我要看看太阳。</p><p>选择说花美，就会有人说“可是也有不美的花啊”。瞻前顾后地预想到会有这种抱怨，于是就会选择写“既有美丽的花也有不美的花”。</p><p>这他妈纯是废话。让所有人都认同的选择根本称不上选择，所以实际上应该大胆一点。</p><p>林清玄说，大多时候，我们在选择上仍然无能为力。我们能做的，也许就是在路过的时候温柔一点。</p><p>一开始读到的时候，觉得这是纯粹的鸡汤。现在我终于明白，这就像夜幕缓缓覆压整个世界时，自己正好是一盏灯。正好既温柔又有力量，正好有盈盈一握的希望。</p><p>真正的绝望应该是选择时不带一点恐惧。是无数次希望了又失望，心如沉潭槁木，于是也不再倾诉或抱怨，毕竟什么事过去了都再也不回来，无所吊谓了。心里悬着的大石头早早落了下去，却永远不再发出落地的巨响，只有漠然的平静，因为情绪的缺口已经太大，深不见底。</p><p>我还肯在选择时产生一点犹豫，其实就是还怀抱着一点希望，这是被生活反复揉搓上浆腌制准备下锅时，最后一点不肯被做成香菜味的倔强。一次又一次的选择，其实是把自己从生活的大锅里捞起来，沥干控油，端端正正地放在一旁备用。</p><p></br></br></p><p>刷完牙，窗外终于下起雨来。</p><p>蟋蟀唧唧，夜雨的淅淅，穿越黑暗至我的耳际，仿佛是往昔回到我的梦里。雨打风吹去，模糊了时序逻辑，卷走一些故人，搅乱许多旧事，混淆大量的的喜乐与忧愁。</p><p>你已经是一场成熟的夜雨了。</p><p>我几乎没有犹豫地做出了选择，明天就滚回组里，说到做到。我也不会再掉小珍珠了，毕竟眼泪通货膨胀的速度实在太快，时至今日，它已经解决不了任何问题。哪吒只哭过一次，从今后不会再有。</p><p>阿甘正传里，阿甘说，我去哪儿，都跑着去。如今，我终于能触摸到那种无所不能的自由感——也许以后我真会成为马背上潇洒的风，是山谷间穿梭的鹰，是暴雨中的闪电，我的灵魂真的可以骑在纸背上，一切都休想打倒我。孩子们，没准这回扣1真的能送复活币，而不是小布丁。</p><p>你知道的，古老的计算机可以分时使用，每一瞬间都被切割成无数份以供每个人使用。在我每一个寂寥的片段里，借我一帧的坦荡就好——这样就有空释怀地说，我选好了。我不害怕。</p><p>你知道的，世上不存在拉普拉斯妖，所选择的一切都不会把自己导向某个既定的神秘结局。不存在任何事物能预知任何形式的未来，薛定谔的猫早就把命运永远藏进不可测的帷幕里。</p><p>你知道的，一路的历险，奇遇，冒冒失失，都在遥祝未来葳蕤生光。我希望当一切缓慢又全面地落幕时，在那个必然到来的时刻，我可以不留遗憾地，不心虚地，鞠躬下台。</p><p>你知道的，风雨如晦唯自由长青。夏至重庆，炽烈的天空下，就让瞬间的宿命论换成栀子花的馨香。</p><p></br></br></p><p><em>也许多少年后在某个地方，<br>我将轻声叹息把往事回顾：<br>一片树林里分出两条路，<br>而我选了人迹更少的一条，<br>从此决定了我一生的道路。</em></p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyG学习笔记</title>
      <link href="/2024/05/15/3PyG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/15/3PyG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>仅占位。内容多点再填充。</p><p>鸽了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib数据可视化基础</title>
      <link href="/2024/04/15/3Matplotlib%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/04/15/3Matplotlib%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>缓慢填充中…</p><h1 id="简介与安装"><a href="#简介与安装" class="headerlink" title="简介与安装"></a>简介与安装</h1><p>Matplotlib是一个Python绘图库，它的设计受到了Matlab的影响，因此在一定程度上具有类似的语法和功能。</p><p>如果某天你发现自己要学习 Matplotlib, 很可能是因为:</p><ul><li>Matplotlib 是非常强大的 Python 画图工具，它非常潮流，非常带派。</li><li>这matlab我是一天也用不下去了！</li><li>手中有很多数据, 可是不知道该怎么呈现这些数据。</li></ul><p>所以就找到了 Matplotlib ，它能帮你画出美丽的:</p><ul><li>线图</li><li>散点图</li><li>等高线图</li><li>条形图</li><li>柱状图</li><li>3D 图形</li><li>图形动画</li></ul><p>对于python，配置只需终端下的一条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>或者直接在pycharm里安装包即可。这一步非常简单，不多赘述。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>使用import导入模块matplotlib.pyplot，并简写成plt，使用import导入模块numpy，并简写成np。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure><p>使用np.linspace定义x：范围是(-1,1);个数是50 , 再仿真一维数据组(x ,y)表示曲线1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-1, 1, 50)</span><br><span class="line">y = 2*x + 1</span><br></pre></td></tr></table></figure><p>使用plt.figure定义一个图像窗口, 使用plt.plot画(x ,y)曲线. 使用plt.show显示图像.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的结果是：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_c6ae60dcc3f3b02319d7810c41f0b222.png"></p><p>下面的按钮作用分别是：复位，切换视图，拖动范围，查看某一特定范围，调整图层显示，保存图片。</p><h2 id="关于figure"><a href="#关于figure" class="headerlink" title="关于figure"></a>关于figure</h2><p>matplotlib的 figure 就是一个单独的小窗口, 小窗口里面还可以有更多的小图片。</p><p>使用np.linspace定义x：范围是(-3,3);个数是50，仿真一维数据组(x ,y1)表示曲线1，仿真一维数据组(x ,y2)表示曲线2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y1 = 2*x + 1</span><br><span class="line">y2 = x**2</span><br></pre></td></tr></table></figure><p>使用plt.figure定义一个图像窗口：编号为3；大小为(8, 5)。使用plt.plot画(x ,y2)曲线，使用plt.plot画(x ,y1)曲线，曲线的颜色属性(color)为红色。曲线的宽度(linewidth)为很夸张的10.0。曲线的类型(linestyle)为虚线（dashed）,最后使用plt.show显示图像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num = 3)</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2,color = &#x27;red&#x27;,linewidth= 1.0，linestyle = &#x27;dashed&#x27; )</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_0fe04656d3a3fca846d495d0bef7f24a.png"></p><p>于是两条曲线就生成在一起了，而且可以看见显示的是我们所期望的figure3。</p><h2 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h2><p>追加设置，使用plt.xlim设置x坐标轴范围：(-1, 2)； 使用plt.ylim设置y坐标轴范围：(-2, 3)； 使用plt.xlabel设置x坐标轴名称：’I am x’； 使用plt.ylabel设置y坐标轴名称：’I am y’。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line">plt.xlabel(&#x27;I am x&#x27;)</span><br><span class="line">plt.ylabel(&#x27;I am y&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_16d6361453ac62a93f3aa98faa89241f.png"></p><p>使用np.linspace定义范围以及个数：这里范围是(-1,2);个数是5。 使用print打印出新定义的范围。使用plt.xticks设置x轴刻度：范围是(-1,2);个数是5。</p><p>使用plt.yticks设置y轴刻度以及名称：这里刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘T4’, ‘T3’, ‘T2’, ‘T1’, ‘T0’]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new_ticks = np.linspace(-1, 2, 5)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">  </span><br><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],[&#x27;T4&#x27;, &#x27;T3&#x27;, &#x27;T2&#x27;, &#x27;T1&#x27;, &#x27;T0&#x27;])</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_b66620dd80352c92dbc16c1bd098f30d.png"></p><p>使用plt.gca获取当前坐标轴信息。使用.spines设置边框：右侧边框；使用.set_color设置边框颜色：默认白色，我这里用红色，方便看。</p><p>使用.spines设置边框：上边框；使用.set_color设置边框颜色：默认白色，我用红色；此外，我们把二次函数的width调回了1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)</span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下图：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_4913dd9ba8db6ea4d0db0d03dca4beb9.png"></p><p>使用.xaxis.set_ticks_position设置x坐标刻度数字或名称的位置：bottom.（可选的所有位置：top，bottom，both，default，none）</p><p>使用.spines设置边框：x轴；使用.set_position设置边框位置：y&#x3D;0的位置；（可选的所有属性：outward，axes，data）</p><p>这一行代码用于设置x轴的边框（spine）的位置。ax.spines[‘bottom’]表示选择x轴底部的边框，set_position((‘data’, 0))表示将该边框的位置设置在y轴数据坐标轴上的0位置。换句话说，这行代码将x轴的底部边框移动到y轴上的0位置处，使得x轴在y轴0点交叉。综合起来，这两行代码的作用是将x轴的刻度和边框都设置在图表的底部，并且让x轴在y轴的0点交叉，这样就可以更清晰地显示图表中的数据。</p><p>y轴同理，代码给出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax.xaxis.set_ticks_position(&#x27;bottom&#x27;)</span><br><span class="line">ax.spines[&#x27;bottom&#x27;].set_position((&#x27;data&#x27;, 0))</span><br><span class="line">  </span><br><span class="line">ax.yaxis.set_ticks_position(&#x27;left&#x27;)</span><br><span class="line">ax.spines[&#x27;left&#x27;].set_position((&#x27;data&#x27;,0))</span><br></pre></td></tr></table></figure><p>如下图所示，我已经把边框调回了白色：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_c6836ef3e292b971f4108a3a105bd549.png"></p><h2 id="Legend-图例"><a href="#Legend-图例" class="headerlink" title="Legend 图例"></a>Legend 图例</h2><p>matplotlib 中的 legend 图例就是为了帮我们展示出每个数据对应的图像名称，让读者更容易认识到你的数据结构。</p><p>上面，我们已经了解到关于坐标轴设置方面的一些内容，代码已收折：</p><details>  <summary>点击展开/收缩代码块</summary>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y1 = 2*x + 1</span><br><span class="line">y2 = x**2</span><br><span class="line"></span><br><span class="line">plt.figure(num = 3)</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2,color = &#x27;red&#x27;,linewidth= 1.0,linestyle = &#x27;dashed&#x27; )</span><br><span class="line"></span><br><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line">plt.xlabel(&#x27;I am x&#x27;)</span><br><span class="line">plt.ylabel(&#x27;I am y&#x27;)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(-2, 2, 5)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],[&#x27;T4&#x27;, &#x27;T3&#x27;, &#x27;T2&#x27;, &#x27;T1&#x27;, &#x27;T0&#x27;])</span><br><span class="line"></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[&#x27;right&#x27;].set_color(&#x27;white&#x27;)</span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(&#x27;white&#x27;)</span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(&#x27;bottom&#x27;)</span><br><span class="line">ax.spines[&#x27;bottom&#x27;].set_position((&#x27;data&#x27;, 0))</span><br><span class="line">ax.yaxis.set_ticks_position(&#x27;left&#x27;)</span><br><span class="line">ax.spines[&#x27;left&#x27;].set_position((&#x27;data&#x27;,0))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></details></br><p>接下来，我们将对图中的两条线，也就是蓝色实线与红色虚线绘制图例，首先我们设置两条线的类型等信息。</p><p>legend将要显示的信息来自于下面代码中的 label。 所以我们只需要简单写下一下代码, 就能自动为我们添加图例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># set line syles</span><br><span class="line">l1, = plt.plot(x, y1, label=&#x27;linear line&#x27;)</span><br><span class="line">l2, = plt.plot(x, y2, color=&#x27;red&#x27;, linewidth=1.0, linestyle=&#x27;--&#x27;, label=&#x27;square line&#x27;)</span><br></pre></td></tr></table></figure><p>如果我们想单独修改之前的 label 信息, 给不同类型的线条设置图例信息, 可以在 plt.legend 输入更多参数。如果以下面这种形式添加 legend, 我们需要确保,在上面的代码 plt.plot(x, y2, label&#x3D;’linear line’) 和 plt.plot(x, y1, label&#x3D;’square line’) 中有用变量 l1 和 l2 分别存储起来。而且需要注意的是 l1, l2,要以逗号结尾, 因为plt.plot() 返回的是一个列表。这样我们就能分别重新设置线条对应的 label 了。</p><p>其中’loc’参数有多种，’best’表示自动分配最佳位置，其余的如下：</p><blockquote><p>‘best’ : 0,<br> ‘upper right’  : 1,<br> ‘upper left’   : 2,<br> ‘lower left’   : 3,<br> ‘lower right’  : 4,<br> ‘right’        : 5,<br> ‘center left’  : 6,<br> ‘center right’ : 7,<br> ‘lower center’ : 8,<br> ‘upper center’ : 9,<br> ‘center’       : 10,</p></blockquote><h2 id="Annotation标注"><a href="#Annotation标注" class="headerlink" title="Annotation标注"></a>Annotation标注</h2><p>当图线中某些特殊地方需要标注时，我们可以使用 annotation。 matplotlib 中的 annotation有两种方法， 一种是用 plt 里面的 annotate，一种是用 plt 里面的 text 来写标注.</p><p>首先，我们在坐标轴中绘制一条直线，然后挪动好坐标轴的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt  </span><br><span class="line">import numpy as np  </span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 50)  </span><br><span class="line">y = 2*x + 1  </span><br><span class="line"></span><br><span class="line">plt.figure(num=1, figsize=(8, 5),)  </span><br><span class="line">plt.plot(x, y,)  </span><br><span class="line"></span><br><span class="line">ax = plt.gca()  </span><br><span class="line">ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)  </span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)  </span><br><span class="line">ax.xaxis.set_ticks_position(&#x27;bottom&#x27;)  </span><br><span class="line">ax.spines[&#x27;bottom&#x27;].set_position((&#x27;data&#x27;, 0))  </span><br><span class="line">ax.yaxis.set_ticks_position(&#x27;left&#x27;)  </span><br><span class="line">ax.spines[&#x27;left&#x27;].set_position((&#x27;data&#x27;, 0))  </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_38535376a339536c53c44c8ca047135c.png"></p><p>我们要做的是标注出点(x0, y0)的位置信息，画出一条垂直于x轴的虚线，同时对(x0, y0)这个点进行标注。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x0 = 1  </span><br><span class="line">y0 = 2*x0 + 1  </span><br><span class="line">plt.plot([x0, x0,], [0, y0,], &#x27;k--&#x27;, linewidth=2.5)  </span><br><span class="line">plt.scatter([x0, ], [y0, ], s=50, color=&#x27;b&#x27;)  </span><br><span class="line">plt.annotate(r&#x27;$2x+1=%s$&#x27; % y0, xy=(x0, y0), xycoords=&#x27;data&#x27;, xytext=(+30, -30),  </span><br><span class="line">textcoords=&#x27;offset points&#x27;, fontsize=16,  </span><br><span class="line">arrowprops=dict(arrowstyle=&#x27;-&gt;&#x27;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br></pre></td></tr></table></figure><p>其中参数<code>xycoords=&#39;data&#39;</code>是说基于数据的值来选位置,<code>xytext=(+30, -30)</code>和<code>textcoords=&#39;offset points&#39;</code>对于标注位置的描述 和 xy 偏差值,<code>arrowprops</code>是对图中箭头类型的一些设置。</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_097d8c011d75eed24ff4826b65621ba4.png"></p><p>此外，还可以使用text。其中<code>-3.7, 3,</code>是选取text的位置, 空格需要用到转字符<code>\</code>,<code>fontdict</code>设置文本字体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.text(-0.7, 3, &#x27;Man,what can I say?&#x27;,</span><br><span class="line">         fontdict=&#123;&#x27;size&#x27;: 16, &#x27;color&#x27;: &#x27;r&#x27;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_7bcdc77fbbf925112bf939ac233bf4d3.png"></p><h2 id="tick-能见度"><a href="#tick-能见度" class="headerlink" title="tick 能见度"></a>tick 能见度</h2><p>现在我们重新生成一张图，特意把线的粗细调得很大，linewidth&#x3D;10，部分信息会被遮挡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">  </span><br><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y = 0.1*x</span><br><span class="line">  </span><br><span class="line">plt.figure()</span><br><span class="line">  </span><br><span class="line">plt.plot(x, y, linewidth=10, zorder=1)</span><br><span class="line">plt.ylim(-2, 2)</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)</span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span><br><span class="line">ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span><br><span class="line">ax.xaxis.set_ticks_position(&#x27;bottom&#x27;)</span><br><span class="line">ax.spines[&#x27;bottom&#x27;].set_position((&#x27;data&#x27;, 0))</span><br><span class="line">ax.yaxis.set_ticks_position(&#x27;left&#x27;)</span><br><span class="line">ax.spines[&#x27;left&#x27;].set_position((&#x27;data&#x27;, 0))</span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>可以对被遮挡的图像调节相关透明度，本例中，设置x轴和y轴的刻度数字进行透明度设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for label in ax.get_xticklabels() + ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(12)</span><br><span class="line">    label.set_bbox(dict(facecolor=&#x27;white&#x27;, edgecolor=&#x27;None&#x27;, alpha=0.7, zorder=2))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>其中label.set_fontsize(12)重新调节字体大小，bbox设置目的内容的透明度相关参，facecolor调节 box 前景色，edgecolor 设置边框， 设置边框为无，alpha设置透明度。</p><p>最终结果如下:</p><h1 id="画图种类"><a href="#画图种类" class="headerlink" title="画图种类"></a>画图种类</h1><h2 id="Scatter-散点图"><a href="#Scatter-散点图" class="headerlink" title="Scatter 散点图"></a>Scatter 散点图</h2><p>首先，先引入matplotlib.pyplot简写作plt,再引入模块numpy用来产生一些随机数据。生成1024个呈标准正态分布的二维数据组 (平均数是0，方差为1) 作为一个数据集，并图像化这个数据集。每一个点的颜色值用T来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">  </span><br><span class="line">n = 1024    # data size</span><br><span class="line">X = np.random.normal(0, 1, n) # 每一个点的X值</span><br><span class="line">Y = np.random.normal(0, 1, n) # 每一个点的Y值</span><br><span class="line">T = np.arctan2(Y,X) # for color value</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>数据集生成完毕，现在来用散点图画出这个点集。输入X和Y作为location，size&#x3D;75，颜色为T，color map用默认值，透明度alpha 为 50%。 x轴显示范围定位(-1.5，1.5)，并用xtick()函数来隐藏x坐标轴，y轴同理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X, Y, s=75, c=T, alpha=.5)</span><br><span class="line">  </span><br><span class="line">plt.xlim(-1.5, 1.5)</span><br><span class="line">plt.xticks(())  # ignore xticks</span><br><span class="line">plt.ylim(-1.5, 1.5)</span><br><span class="line">plt.yticks(())  # ignore yticks</span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>生成效果如图所示：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_cf3ad4af4438614dafa0b904df7cb159.png"></p><h2 id="Bar-柱状图"><a href="#Bar-柱状图" class="headerlink" title="Bar 柱状图"></a>Bar 柱状图</h2><p>还是先向上向下分别生成12个数据，X为 0 到 11的整数 ，Y是相应的均匀分布的随机数据。</p><p>这里使用的函数是plt.bar，参数为X和Y。下面我们就颜色和数值进行优化。 用facecolor设置主体颜色，edgecolor设置边框颜色为白色，用函数plt.text分别在柱体上方（下方）加上数值，用%.2f保留两位小数，横向居中对齐ha&#x3D;’center’，纵向底部（顶部）对齐va&#x3D;’bottom’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">n = 12</span><br><span class="line">X = np.arange(n)</span><br><span class="line">Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)</span><br><span class="line">Y2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1)</span><br><span class="line">plt.bar(X, -Y2)</span><br><span class="line"></span><br><span class="line">plt.xlim(-.5, n)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.ylim(-1.25, 1.25)</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1, facecolor=&#x27;#9999ff&#x27;, edgecolor=&#x27;white&#x27;)</span><br><span class="line">plt.bar(X, -Y2, facecolor=&#x27;#ff9999&#x27;, edgecolor=&#x27;white&#x27;)</span><br><span class="line"></span><br><span class="line">for x, y in zip(X, Y1):</span><br><span class="line">    # ha: horizontal alignment</span><br><span class="line">    # va: vertical alignment</span><br><span class="line">    plt.text(x + 0.4, y + 0.05, &#x27;%.2f&#x27; % y, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;)</span><br><span class="line"></span><br><span class="line">for x, y in zip(X, Y2):</span><br><span class="line">    # ha: horizontal alignment</span><br><span class="line">    # va: vertical alignment</span><br><span class="line">    plt.text(x + 0.4, -y - 0.05, &#x27;%.2f&#x27; % y, ha=&#x27;center&#x27;, va=&#x27;top&#x27;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_7e99b650cd3b64169b6429c0293ea24a.png"></p><h2 id="Image-图片"><a href="#Image-图片" class="headerlink" title="Image 图片"></a>Image 图片</h2><p>用这样 3x4的 2D-array 来表示点的颜色，每一个点就是一个pixel。</p><p>这里我们使用的是内插法中的 Nearest-neighbor的方法，其他的方式也都可以随意取选，如下图所示。</p><p> <img src="https://markdown.liuchengtu.com/work/uploads/upload_0f191f76ef6a8871b22cba622e6f6259.png"></p><p>添加一个colorbar ，添加shrink参数，使colorbar的长度变短为原来的92%。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">  </span><br><span class="line">a = np.array([0.313, 0.365, 0.22,0.22,</span><br><span class="line">              0.365, 0.439, 0.525,0.33,</span><br><span class="line">              0.423, 0.125, 0.651,0.14]).reshape(3,4)</span><br><span class="line">  </span><br><span class="line">plt.imshow(a, interpolation=&#x27;nearest&#x27;, cmap=&#x27;bone&#x27;, origin=&#x27;lower&#x27;)</span><br><span class="line">plt.colorbar(shrink=.92)</span><br><span class="line">  </span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_7ca8ad43fb185a359d6d9566a73ec041.png"></p><p>Matplotlib中有许多内置的颜色映射可供选择，更改cmap即可。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(a, interpolation=&#x27;nearest&#x27;, cmap=&#x27;Purples&#x27;, origin=&#x27;lower&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_26dfc32fc43fc2c703b4e3a8f9214aca.png"></p><h2 id="3D-图"><a href="#3D-图" class="headerlink" title="3D 图"></a>3D 图</h2><p>在进行<code>3D Plot</code>时除了导入<code>matplotlib</code>，还要额外添加一个模块，即<code>Axes 3D</code>，3D 坐标轴显示。之后要先定义一个图像窗口，在窗口上添加3D坐标轴。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np  </span><br><span class="line">import matplotlib.pyplot as plt  </span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D  </span><br><span class="line">  </span><br><span class="line"># 生成数据  </span><br><span class="line">x = np.linspace(-5, 5, 100)  </span><br><span class="line">y = np.linspace(-5, 5, 100)  </span><br><span class="line">x, y = np.meshgrid(x, y)  </span><br><span class="line">z = np.sin(np.sqrt(x**2 + y**2))  </span><br><span class="line">  </span><br><span class="line"># 创建3D图形  </span><br><span class="line">fig = plt.figure()  </span><br><span class="line">ax = fig.add_subplot(111, projection=&#x27;3d&#x27;)  </span><br><span class="line">  </span><br><span class="line"># 绘制曲面，并指定彩虹色调的色彩映射  </span><br><span class="line">ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=plt.get_cmap(&#x27;rainbow&#x27;))  </span><br><span class="line">  </span><br><span class="line"># 显示图形  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_38e8752250224fd41e542c04a85e60db.png"></p><h1 id="多图联合显示"><a href="#多图联合显示" class="headerlink" title="多图联合显示"></a>多图联合显示</h1><h2 id="多合一显示"><a href="#多合一显示" class="headerlink" title="多合一显示"></a>多合一显示</h2><p>matplotlib 是可以组合许多的小图, 放在一张大图里面显示的。 使用到的方法叫作 subplot。</p><p>使用plt.subplot来创建小图。plt.subplot(2,2,1)表示：将整个图像窗口分为2行2列, 当前选择的位置为1。</p><p>然后就可以在这个位置画任意类型的图了！</p><p>这里使用plt.subplot(2,1,1)将整个图像窗口分为2行1列, 当前位置为1，画一个柱状图。然后使用plt.subplot(2,3,4)将整个图像窗口分为2行3列, 当前位置为4，使用plt.plot([0,1],[0,2])在第4个位置创建一个小图。</p><p>上一步中使用plt.subplot(2,1,1)将整个图像窗口分为2行1列, 第1个小图占用了第1个位置, 也就是整个第1行。 这一步中使用plt.subplot(2,3,4)将整个图像窗口分为2行3列, 于是整个图像窗口的第1行就变成了3列, 也就是成了3个位置, 于是第2行的第1个位置是整个图像窗口的第4个位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">n = 12</span><br><span class="line">X = np.arange(n)</span><br><span class="line">Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)</span><br><span class="line">Y2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,1,1)</span><br><span class="line">plt.bar(X, +Y1)</span><br><span class="line">plt.bar(X, -Y2)</span><br><span class="line">for x, y in zip(X, Y1):</span><br><span class="line">    # ha: horizontal alignment</span><br><span class="line">    # va: vertical alignment</span><br><span class="line">    plt.text(x + 0.4, y + 0.05, &#x27;%.2f&#x27; % y, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;)</span><br><span class="line"></span><br><span class="line">for x, y in zip(X, Y2):</span><br><span class="line">    # ha: horizontal alignment</span><br><span class="line">    # va: vertical alignment</span><br><span class="line">    plt.text(x + 0.4, -y - 0.05, &#x27;%.2f&#x27; % y, ha=&#x27;center&#x27;, va=&#x27;top&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplot(2,3,4)</span><br><span class="line">plt.plot([0,1],[0,2])</span><br><span class="line"></span><br><span class="line">plt.subplot(235)</span><br><span class="line">plt.plot([0,1],[0,3])</span><br><span class="line"></span><br><span class="line">plt.subplot(236)</span><br><span class="line">plt.plot([0,1],[0,4])</span><br><span class="line"></span><br><span class="line">plt.show()  # 展示</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果如下，仍可微调。</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_6e14105716005e290853977f58cad11c.png"></p><h2 id="图中图"><a href="#图中图" class="headerlink" title="图中图"></a>图中图</h2><p>首先是一些准备工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 导入pyplot模块</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># 初始化figure</span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"># 创建数据</span><br><span class="line">x = [1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">y = [1, 3, 4, 2, 5, 8, 6]</span><br></pre></td></tr></table></figure><p>先绘制大图。首先确定大图左下角的位置以及宽高。注意，4个值都是占整个<code>figure</code>坐标系的百分比。在这里，假设<code>figure</code>的大小是10x10，那么大图就被包含在由(1, 1)开始，宽8，高8的坐标系内。</p><p>将大图坐标系添加到<code>figure</code>中，颜色为r(red)，取名为title。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">left, bottom, width, height = 0.1, 0.1, 0.8, 0.8</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax1.plot(x, y, &#x27;r&#x27;)</span><br><span class="line">ax1.set_xlabel(&#x27;x&#x27;)</span><br><span class="line">ax1.set_ylabel(&#x27;y&#x27;)</span><br><span class="line">ax1.set_title(&#x27;title&#x27;)</span><br></pre></td></tr></table></figure><p>效果是这样的：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_016bb10de5224d2b1361a621bcc501d7.png"></p><p>接着绘制左上角的小图，步骤和绘制大图一样，注意坐标系位置和大小的改变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">left, bottom, width, height = 0.2, 0.6, 0.25, 0.25  </span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])  </span><br><span class="line">ax2.plot(y, x, &#x27;b&#x27;)  </span><br><span class="line">ax2.set_xlabel(&#x27;x&#x27;)  </span><br><span class="line">ax2.set_ylabel(&#x27;y&#x27;)  </span><br><span class="line">ax2.set_title(&#x27;title inside 1&#x27;) #居然不支持中文</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_33d60895cd59c417813339351566ad29.png"></p><p>最后绘制右下角的小图。这里我们采用一种更简单的方法，即直接往plt里添加新的坐标系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.axes([0.6, 0.2, 0.25, 0.25])  </span><br><span class="line">plt.plot(y[::-1], x, &#x27;g&#x27;) # 注意对y进行了逆序处理  </span><br><span class="line">plt.xlabel(&#x27;x&#x27;)  </span><br><span class="line">plt.ylabel(&#x27;y&#x27;)  </span><br><span class="line">plt.title(&#x27;title inside 2&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_de4f36fb1b2b0acd4a387445dee73db1.png"></p><h2 id="次坐标轴"><a href="#次坐标轴" class="headerlink" title="次坐标轴"></a>次坐标轴</h2><p>有时候我们会用到次坐标轴，即在同个图上有第2个y轴存在。同样可以用matplotlib做到，而且很简单。</p><p>还是做一些准备工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x = np.arange(0, 10, 0.1)</span><br><span class="line">y1 = 0.05 * x**2</span><br><span class="line">y2 = -1 * y1</span><br><span class="line">fig, ax1 = plt.subplots()</span><br></pre></td></tr></table></figure><p>可以看到，<code>y2</code>和<code>y1</code>是互相倒置的。接着获取figure默认的坐标系<code>ax1</code>。</p><p>对<code>ax1</code>调用<code>twinx()</code>方法，生成如同镜面效果后的<code>ax2</code>，接着进行绘图, 将<code>y1</code>,<code>y2</code>分别画在<code>ax1</code>,<code>ax2</code>上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ax2 = ax1.twinx()</span><br><span class="line"></span><br><span class="line">ax1.plot(x, y1, &#x27;g-&#x27;)   # green, solid line</span><br><span class="line">ax1.set_xlabel(&#x27;X data&#x27;)</span><br><span class="line">ax1.set_ylabel(&#x27;Y1 data&#x27;, color=&#x27;g&#x27;)</span><br><span class="line">ax2.plot(x, y2, &#x27;b-&#x27;) # blue</span><br><span class="line">ax2.set_ylabel(&#x27;Y2 data&#x27;, color=&#x27;b&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_09c69a7260827b820e5d494c512b9818.png"></p><p>基础操作笔记到此为止。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv入门与速查（占位）</title>
      <link href="/2024/04/14/3opencv%E5%85%A5%E9%97%A8%E4%B8%8E%E9%80%9F%E6%9F%A5/"/>
      <url>/2024/04/14/3opencv%E5%85%A5%E9%97%A8%E4%B8%8E%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="简介与安装"><a href="#简介与安装" class="headerlink" title="简介与安装"></a>简介与安装</h1><p>大部分人知道的原生 OpenCV 是用 C++ 来开发的。众所周知，虽然 Python 语法简洁、编写高效，但相比 C&#x2F;C++运行慢很多。然而 Python 还有个重要的特性：它是一门胶水语言！Python 可以很容易地扩展 C&#x2F;C++。OpenCV-Python 就是用 Python 包装了 C++的实现，背后实际就是 C++的代码在跑，运行速度非常接近原生。某些情况下 Python的运行速度甚至好于 C++。抛开运行速度，实际工作中，python代码行数也普遍少得多，更容易理解。另外，图像是矩阵数据，OpenCV-Python 原生支持Numpy，相当于 Python 中的 Matlab，为矩阵运算、科学计算提供了极大的便利性。</p><p>在编程语言方面，更多人希望的是具备高效开发效率、跨平台、高度扩展性的语言，尤其是一些 AI 巨头优先推出支持 Python 语言的深度学习框架，如 Facebook的PyTorch、Google的Tensorflow等，用python更好接轨。</p><p>对于python，openCV的配置非常简单，只需终端下的一条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><p>虽然普遍推荐大家使用 OpenCV-Python 进行图像处理，但想要深入理解OpenCV，C++是必须的，尤其是OpenCV源码。这是后日谈。</p><p>鸽了</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呼啸着萍水相逢</title>
      <link href="/2024/03/17/%E5%91%BC%E5%95%B8%E7%9D%80%E8%90%8D%E6%B0%B4%E7%9B%B8%E9%80%A2/"/>
      <url>/2024/03/17/%E5%91%BC%E5%95%B8%E7%9D%80%E8%90%8D%E6%B0%B4%E7%9B%B8%E9%80%A2/</url>
      
        <content type="html"><![CDATA[<p><em>我们不要在这里<br>跟我回去十八岁<br>躲到台大校园杜鹃花丛下<br>不要被命运找到<br>——简嫃</em><br><br><br></p><p>记得千禧年吗，也不过就是二十四年前。</p><p>我爸妈说，2000年到来的时候，大家满怀期待又不知道怎么庆祝，于是就穿上最好的衣服，在街上从这一边走到另一边，再从另一边走回这一边。</p><p>每一步都踏在回忆里，越陷越深。就像昏沉的暮色一点点染上他们的心头。</p><p>直到他们给我讲的时候，世纪之交的夜幕才真正覆压下来，在我的心里留下模棱两可的轮廓——很多优秀大学应届毕业生一个月工资，居然可以买北上广深一平米的房子。</p><p>岁月太远，回音太慢，姗姗来迟。世界终于开始变成一句含混不清的旁白，所有的记忆勾连起来，带动过往的片段和当下的余波，流转不息，翻腾汹涌，潮起潮落。</p><p>大部分人都很乐意主动卷入往昔的漩涡。我怀疑，这是因为记忆是为数不多的、完全被自己掌握的东西。这样我们才会忘记，自己身上窸窸窣窣流动着的光阴，其实或多或少遵循着和别人雷同的轨迹。</p><p>一个人的回忆该到哪里为止，是离亲人最近的房子，大地与远空的交界，故乡飘渺的云瓢泼的雨，还是地图上往复重叠的经纬线，有时候我也会忘记望山跑死马的故事。</p><p><br><br></p><p>我太喜欢这个标题，好有隔阂感，像附着在列车车窗缝隙里擦不掉的灰，像整个00年代弥散着的毛玻璃滤镜，妈妈小灵通吵闹的彩铃；像过时的效果器音效，空舞厅里的灯球，沉默的皮衣吉他手，DVD切信号前的短暂花屏。</p><p>像下午三点的阳光透过钴蓝色的玻璃照在蓝色花纹的地板砖上，小狗呼哧呼哧吐着舌头，动画片声音很大。像搬家离开涪江边时，那样的阳光明媚。像是那天你在阳台说下次一起玩，可我在楼下等了十年，还是没等到你。</p><p>像是那种夕阳将落不落时，光影照在主唱的身上，吉他和贝斯手的剪影投射在旁边的幕布，空灵的嗓音和配器响起。像是没带伞又必须奔跑的雨天，全身感官都无可奈何地兴奋着的感觉。迷迷糊糊的，会让人联想到一连串很多年之前的东西。</p><p>EVA，涪江，赛尔号，在建国门打棒棒的圣诞节，挑担卖豆花的老人，三光街的专业卤鸡蛋，人民公园的少年宫，小卖部的卡片，肯德基的优惠印花，平安夜的兴力达百货。</p><p>千禧年，世纪之交，那个时代脱胎于80年代的改革开放，终结于10年代的互联网爆发，总共只维持了10年甚至更少的时间。夹杂在虚拟经济诞生和实体经济升腾的交接点。</p><p>而在这样狭窄的时间缝隙里，只有很少一部分像我一样的孩子，拥有过这样的记忆和童年。在短短十年内看到曾经朴素简单的生活环境突然变得拥挤喧嚣。特别是互联网，它居然会有方兴未艾的时候。在今天，这简直不可思议。</p><p>向前的长辈们，普遍没有什么深刻印象，改革开放的浪潮席卷而来，他们有更重要的事要操心；向后的后辈们，则是直接出生在发达的互联网时代，智能手机已经成为外置器官，他们无法理解流量要省着用，想象不到上网还需要按一下连接宽带，甚至极端情况下要使用拨号连接的生活。</p><p>一个时代的记忆居然只存在于我们那几年出生的孩子身上，这样的情况绝无仅有，也弥足珍贵——我们还来不及等待老年，就开始怀念曾经那个时代了，因为它不曾出现于长辈的口中，也不会被之后的小孩子们提起，它突然出现又突然消失，像一场发烧时做的怪梦，光怪陆离，醒后就不再记得。</p><p>既繁荣，也原始，既保守，也开放。我对千禧年代只有一句想说的：我不在乎天长地久，我只在乎和你们曾经一起拥有。</p><p>一晃眼，原来世界已经迭代了二十年，我也早已经不孚众望地，长成了一个奇形怪状的人。多年以后，与成长的世界再相逢，檐上旧巢不见雀鸟踪迹，檐下人到哪去，这封信怎么寄。春日部市的风吹不到翻斗花园，我们也永远不会再见。</p><p>如果把老房子拆了，修起一座一模一样的新房子；买一件新衣服，穿破大小相仿的几个洞；找回旧玩具，接着编他们无休无尽的冒险故事；儿时的燕子，是不是也会一模一样地飞回来。</p><p>要是这样，亲人们也还不老，你和朋友们也还那么小，那么擅长飞跑，脚程快到无妄之灾再也追不上你。</p><p>上次回西山公园，充气蹦床摊位的老板居然还记得我，指着我大笑：一转眼你长这么大了，你小时候每次都一路过这里就吵着要来玩呢，你爸爸妈妈都拿你没办法！</p><p>回忆有不稳定的花期。</p><p>回忆泡在千禧年的福尔马林罐里。</p><p><br><br></p><p>想起之前，学长讲给我的求职经历：几乎每一段人生经历都要交代清楚，有一点异常那就完了。几遍下来就很机敏地学会规避敏感词，不讲蒙太奇式的谎言根本找不到工作。于是那些经历渐渐变得模糊，真的假的都揉在一起，慢慢连自己也分不清，连自己也深信不疑。</p><p>而世纪之交，也就是2010年前这段时间，不论在什么情况下都不会被问到，所以，可以肆无忌惮地在记忆里闯下弥天大祸，把真正的自己安安稳稳地藏在这里，它像一个巨大的避难所，童年永驻。它很安全，只会未知，不会变化。</p><p>那时的太阳碎成一块块，云聚成被子铺在天上，风在涪江里游。绵阳晚七点的时候，人人都往有灯亮着的房子里赶。三轮车叮叮当，汽笛悠远，东方红大桥上的肚子不少是饿着的。滨江广场的灯一瞬间亮成一条远到天边的线。</p><p>在书房伸个懒腰，不知道该玩什么了，我也不想关掉电脑，一边发呆，一边想什么时候吃饭，电脑不用关，吃完了可以接着玩。</p><p>楼下的滨江广场，从过去到未来都是一个样，猫在一排路灯的黄光下缩成一个垃圾桶。白天出太阳，晚上有月亮，我夹在中间，是一片星星。窗外江风正缥缈。每次打完游戏，爸爸会让我去看看远处休息眼睛。在阳台上眺望远方，心上一件闲事都不挂。</p><p>那时他还不知道，在不算遥远的未来，他将经历什么样的波诡云谲，他会怎样跌跌撞撞地晃过一程又一程。他还不知道，是什么样的事，让他成为了什么样的人。</p><p>就像所有故事一开始的那样。</p><p>我想和他说声抱歉，不好意思，把你设想的未来走得乱七八糟。</p><p>我现在还经常梦见奶奶家，也就是科学城八区，某个夏天，凉爽的清晨，一场阵雨将歇，青草和泥土的气息，就是下雨的味道，漫到我床前。我躺在凉席上，外放着《稻香》的前奏，奶奶说这歌还怪好听的。周中爸爸妈妈上班，我在八区和小朋友们一起疯玩。至于周末，我不是骑着小车在人民公园的城堡里横行霸道，就是在富乐山的竹林里打真人CS。</p><p>后来在园艺山读书，一直很想回去看看。等到我终于有空自己回去，才发现我想回的不是奶奶家，不是人民公园，也不是富乐山，而是那个能随便浪费时间的时候——平时有人会喊我去楼下玩，周末可以选去人民公园还是富乐山的时候。</p><p>走在涪江边，呼啸的江风拥抱我，我和自己萍水相逢。童年的纸飞机，现在终于飞回我手里。</p><p><br><br></p><p>长大以后，我极其缓慢地意识到，世界的结构已经发生了根本的变化——我的一切终于都由自己掌控，我想干什么就干什么，没人管得住我，我随意贯彻自己的意志。</p><p>我爱说实话，一开始真是给我爽完了。</p><p>直到某一天突然发现，我对未来一点计划都没有。所有的计划，都无一例外地，整齐地，不约而同地，停在了高考完的那个夏天，我正好十八岁。好像被切断世界的那道斩击命中，人生在2022年的夏天腰斩。</p><p>我十三四岁左右混迹贴吧的时候，怕人家觉得我小不带我玩，都骗人说我十八岁。我好想早日十八岁，这样就可以再也不被管着。十八岁就是我想象的极限。现在想想，十八岁居然已经离我越来越遥远了。很奇怪吧，我甚至根本没准备好活到现在。</p><p>那时我还完全不知道，没人管的住我，也就意味着今后做的每件事、每个决定都不打折扣地记在了我自己的头上，而且无一例外，都会对未来造成不可挽回的持续性影响，或好或坏。从此不会再有谁为你清澈的愚蠢负一丁点责，基本所有人都只会说好死，开香槟咯。</p><p>以前做错事的代价只是承认错误，再挨一顿骂，痛痛快快地哭一场，好了，没事了，玩去吧。每个学期一开始，过往的记录几乎都被清零，像是新赛季整个重置。退一万步说，哪怕吃了个留校察看，等到高考前肯定也能被消掉。</p><p>有时也会想起，高中有很多自我感动着发狠的通宵，妄想凭着一腔热血就能掀起风暴。我自顾自地以为只要再多努力一点就可以了，再多一点，多一点。只会多刷题，现在看来就是方向性的错误。可是高考前犯多少错都无关紧要，高考前每一次考试的成绩都只是试错的一部分。我是杀红眼的赌徒，下注的零成本让我有底气一输再输。我好怀念那种无所畏惧的感觉。</p><p>对未来的孤注一掷，从今以后，不能再是赌气，不是说只要幻想自己有弄潮的命，到中流就能当上砥柱，浪遏飞舟的事是开不得玩笑的，被水冲走了可没救生员。以后没有方向性的错误经得起反悔，许下的承诺也不能随随便便烂尾。</p><p>拿打麻将举例子，小时候打纯计分的娱乐牛马场，现在突然打上了真算钱的，才发现原来自己根本赌不起，谁若赢了，我只能故作镇定地祝贺你。</p><p>在生活的方方面面，先前的我都不知道真正的失败应该是什么样，我所经历的失败都并不彻底，都是可以被某种手段弥补回来的，我经历的挫折也都是狐假虎威的半吊子罢了。那时的所有悲伤痛苦绝望，都在可控范围内，都是能在某种程度上预见的，它们其实是对现实的拙劣模仿。</p><p>所以那时才少年得意，春风满路。</p><p>所以现在才举步维艰，踟蹰不前。</p><p><br><br></p><p>有时我会想，要是我一开始就什么都不知道就好了，像个凑数的NPC，凭空刷新在三线四川小城，蓝得不像话的天空悬在上头，我什么都不想，什么都不去了解，就安安静静地看着，日子一会繁忙一会悠闲，细水长流，四平八稳。</p><p>可是现实是，所有的责任，对自己的，对别人的，都已经被狠狠地甩在了我脸上。从富乐山到缙云山，从涪江到嘉陵江，我真的走了好远。现在开始，不行真的就是不行，不会真的就是不会，做错了就是做错了，没有理由，不找借口。生活绝对不会放水，这个世界旋转得飞快。</p><p>人也再不会像高中时那样，直来直去地受伤——心就和一块玻璃似的，脆生生地碎掉。现在的伤痛更类似于锈蚀、腐烂、低温烫伤，局部坏死，温和地、毫无痛楚地，越来越麻木，越来越迟钝，直到某一天，让我再也说不出“我到了一百岁还可爱”这种话。</p><p>人生像遍历一棵有序树，从根节点开始就处处局促。还没来得及释怀，就又要被迫去面对下一层子节点刻不容缓的选择。好复杂的递归，我真想不明白啊，要是在命运的岔路口前，我能更主动更勇敢一些，现在的我会是什么样子。</p><p>只是想这些也没用，以前的我既不会数据结构，也不会算法。虽然现在也不怎么会就是了。当然，船到桥头自然直。我的意思是，在桥头直视船的时候，所有船都是直的。</p><p><br><br></p><p>前几天我妈给我发了一堆老照片，里面有很多亲戚年轻时候的样子。还找到了一张笑的很开心的我。在书房的电脑前，打游戏的我回身比了个耶，没心没肺的。</p><p>突然想起余光中的一句话，令你悲伤的一切，暂时都还不属于你。</p><p>那时候玩的是宝可梦叶绿，我最喜欢的宝可梦就是皮卡丘。学着小智配招，带电磁波打人，可以麻痹对面的宝可梦。看着对面出不了招而我可以打两回合，小小的我哈哈大笑。而长大后，常常有不知道躲在哪里的人对我打出电磁波，让我麻痹在书桌，在大街，在地铁，在床上，在梦里。</p><p>我在这里应该写一点热血或者冰冷的句子，但还是算了。一方面是因为，将一堆杂乱的思绪加工成一段没有语病的话，已经成为现在的我的奢求。另一方面，是因为它们都是CD很长的技能，前摇后摇也都很长，我要捏在手里，下一波ALL IN狠狠地打一次爆发。</p><p>毕竟再过两年，我好像是会变成那个近战兵啊，开局的时候被精心安排卡着挨三个远程兵打，对线时的主要作用是拉扯抗塔爆金币，打团时就被不明AOE爆了埋在中塔。我就爱偷吃点塔皮，半死不活的塔你不打我也不爱扛。</p><p>“春风若有怜花意，可否许我再少年”，我已经很难在不笑场的情况下念出这样的诗句，“终不似少年游”，只有少年念出来才会意气风发。从任何角度来看，我已经不适合当热血少年漫画或青春伤痛文学的男主角了。</p><p>我不明白这意味着什么，事实上，我还勉强算是少年，还算是个学信网可查的大学生。但是每每走在沉沉的夜色里，夜风灌满嘴的时候，我也总想纵声长啸。</p><p><br><br></p><p>回老家的时候，看到一片笔直的人工林。家里人说这是桉树，长得非常非常快，但是对环境破坏很大。从播种到砍伐只需要几年，而这短短的几年里，它们会榨干土地里所有的养分。</p><p>仿佛看见了人从出生开始就被摆弄被左右的命运，透过劳碌规矩的一生一眼望尽惶恐困顿的晚年。“终身役役而不见其成功，苶然疲役而不知其所归。”这句话突然冒出来，草蛇灰线伏脉千里，居然是高中积累作文素材时埋下的伏笔。</p><p>说到作文素材，看到过这么一句话，“每个人的心里都有一团火，路过的人只能看到烟。”据说是梵高写的，我不太信。又想起黑格尔的那句“历史是一堆灰烬，但灰烬深处有余温”。我那时非常中二地设想，自己读书的样子就像一个风雨飘摇的浪客，独自行走于莽莽荒原，漫漫长夜，看见一株悠久的火苗，于是奋不顾身，勇往直前，义无反顾地燃尽自己，最后成为历史的一堆灰烬。</p><p>朋友听后不以为然：“你cos的是梵高还是黑格尔？”</p><p>我也曾让理想就地生根，凝聚起脚下土地中所有的勇气和希望。毕竟时人不识凌云木，直待凌云始道高。在短暂的青春里，我做的所有事，其实只是拼命埋头汲取营养，寄希望于生长成材，参天凌云。</p><p>如果生活为你关上了一扇门，你就应该去打开它，关上的门就应该是要被打开的，这就是门，门就是这样用的。</p><p>对于开门这件事，有些人会问，这种情况下可以去打开一扇窗吗？</p><p>这就好比在说，程序员掉的毛可以换成腿毛吗？</p><p>很显然，不可以。</p><p><br><br></p><p>世界的迭代越来越快，一个终日缅怀往日风尘旧影的人，愈发显得荒谬而不合时宜。比起二叉树的非黑即白，现在我更相信人生像一个跳表，或者说更像有向图——更多的方向，更多的可能。甚至百般曲折后仍然殊途同归。</p><p>一个阶段有一个阶段的事，有特定时间要去争取的东西，不严谨地说，我只是装模作样，怀古伤今罢了，不是真想念过去，而是借着回望过去的这股劲对现在说，我燃烧你的梦，我诠释你的码。</p><p>举个例子，高中毕业以后很长一段时间，我再没写过什么东西。刚上大学碰上疫情，每天的生活都像缓慢行走的干尸。突发奇想写博客也只是想让自己能有点事干，偶尔还能反思内省，发发牢骚。虽然读理科，但我其实是喜欢文学的，要不是文科就业率太感人，当年差点读了文科。没想到现在还能写这么多东西，还有人乐意进博客看这些文字垃圾，感激不尽。既然你们都看到这里了，我提一嘴，文章下面有评论区，不知道你们知不知道。</p><p>我们总想着到时候，总没到时候。</p><p>万事不回头，毕竟难有头回；往事如水流，始终空送流水。世界好大，时间太长，我只能寄希望于未来，遗憾的事终究会款款重写，错过的人一定会再相逢。老人坐在人来人往的街头，我们划开没有通知的手机，其实都是一样的，因为想见和能见的人都在这里。</p><p>所以说，我还是喜欢吹弹可破的当下。</p><p>本质上，我们成长在每一场萍水相逢。</p><p>在长大后的漫长岁月里，我还是想做一个快乐的人。因为你要做一朵花，才会觉得春天离开你；如果你是春天，就没有离开，就永远有花。春天是长在骨子里的。</p><p>写得好乱，可是改也不好改了，想卒章显志升华主题也完全失败，既然是将就着写的，将就着看得了。</p><p><br><br></p><p><em>带我到很久很久以前<br>消失在某一年的某一天<br>过了期限<br>带我到很久很久以前<br>消失在某一年的某一天<br>某个时间</em></p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预测方法</title>
      <link href="/2024/01/29/2%E9%A2%84%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/29/2%E9%A2%84%E6%B5%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>预测类算法就是一种通过学习历史数据来预测未来事件或趋势的方法。它会根据过去的经验和规律，根据已知的数据来做出预测，帮助我们预测未来可能会发生的事情。这里记录几种在数学建模里较为常见且泛用性较高的算法。</p><p>先列出一些常见数据的类型：</p><ol><li><p>横截面数据（Cross-Sectional Data）：是在某一特定时间点上收集的数据。它包括不同个体或单位在同一时间点上的观察结果。例如，在一项调查中，收集了不同家庭在2019年的收入数据，这些数据就构成了横截面数据。通常用于描述群体特征、进行比较分析等。可以采用多元回归分析。</p></li><li><p>时间序列数据（Time Series Data）：是按照时间顺序记录的数据。它包括同一变量在不同时间点上的观察结果，可以用来分析随时间变化的趋势和模式。例如，某公司每个季度的销售额数据就构成了时间序列数据。可以采用时间序列分析。</p></li><li><p>面板数据（Panel Data）：结合了横截面数据和时间序列数据的特点，包括了多个个体（横截面）在多个时间点上的观察结果。面板数据可用于研究个体差异以及随时间的变化。例如，对不同地区居民的收入情况进行跟踪调查，即包含了不同个体在不同时间点上的数据。很少见，遇到了再说。</p></li></ol><h1 id="回归分析方法"><a href="#回归分析方法" class="headerlink" title="回归分析方法"></a>回归分析方法</h1><p>回归分析是一种用来预测或解释变量之间关系的统计方法。它的主要思想是通过观察已知的数据来建立一个数学模型，然后利用这个模型来预测未来的结果或者解释变量之间的关系，根据现有的数据来预测未来的结果。对于决策和规划都非常有帮助。</p><p>回归分析应该识别重要变量，判断相关性的方向，并且估计权重（回归系数）。</p><p>首先是简单线性回归。假设我们有两个变量，一个是用来帮助预测的变量X（称为自变量）,另一个是我们想要预测的变量Y（称为因变量）。比如，我们想要预测一个人的体重，可能会用身高作为帮助预测的变量。简单线性回归就是要找到一个直线方程，通过自变量（比如身高）来预测因变量（比如体重）。这个直线方程可以告诉我们，随着自变量的变化，因变量会怎么变化。</p><p>简单线性回归虽然可以用来描述变量之间的<strong>相关性</strong>，但却不能证明<strong>因果性</strong>。两个变量之间的相关性并不一定意味着它们之间存在因果关系，也就是说，一个变量的变化是否会导致另一个变量的变化，需要更进一步的研究来确定。举例来说，假设我们发现一个城市的人均收入和房价呈现正相关，即人均收入越高，该城市的房价也越高。这种相关性看起来很有道理，但我们不能因此就断定高收入导致了高房价，或者是高房价影响了人们的收入水平。实际上还可能存在其他因素，比如地理位置、人口密度等，也可能影响了这两个变量之间的关系。</p><p>让我们来举一个更极端的例子。假设我们观察到某地区消防队员人数与火灾数量之间存在正相关关系，也就是说，我们得出的结论是随着消防队员人数的增加，火灾的数量也在增加。因此我们应该减少消防人员的数量，这样火灾就会越来越少了！很显然，这个结论存在相关性，但没有因果性，我们不能因此得出消防队员人数的增加导致了火灾数量的增加的结论。实际上，更可能的解释是，这种相关性是由于第三个隐藏变量引起的，比如人口密度、城市规模等因素。另外，也可能是由于数据的选择或者测量方法等问题造成了这种看似荒谬的相关性。</p><p>因此，我们更应该进行多元回归分析，在简单线性回归的基础上考虑了更多的自变量。比如，我们想预测一个人的收入，不仅仅会考虑教育水平，还会考虑工作经验、所在地区等因素。多元回归可以帮助我们建立一个更复杂的模型，来解释所有这些自变量对因变量的影响。</p><p>多元回归分析中，存在内生性的问题。具体来说，当解释变量与误差项之间存在内生性时，解释变量不再是外生的，即它们不再是独立于误差项的。这意味着解释变量的变化可能是由于未观测到的因素或其他内部因素引起的，而不仅仅是外部因素的结果。内生性问题可能导致统计模型中的参数估计不一致，使得我们无法准确地推断解释变量对因变量的真实影响。它还可能模糊或混淆解释变量与因变量之间的因果关系，使得我们难以确定哪个是因果变量，哪个是结果变量。</p><p>核心解释变量通常是研究中我们最感兴趣的变量，也是对因果关系进行推断的变量。在一个统计模型中，核心解释变量通常是被认为对因变量有直接影响的变量。控制变量则是指在研究中被引入并控制在统计模型中的其他变量。它们被用来减少内生性问题的影响，以确保核心解释变量与因变量之间的关系是被准确估计的。通过引入控制变量，可以尽可能地排除其他可能对因变量产生影响的变量，从而更准确地衡量核心解释变量的影响。应保证核心解释变量不存在内生性。</p><p>进行回归分析,代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">% 读取 Excel 文件数据</span><br><span class="line">data = xlsread(&#x27;高数成绩数据.xlsx&#x27;, &#x27;Sheet1&#x27;, &#x27;A2:E&#x27;);</span><br><span class="line"></span><br><span class="line">% 提取自变量和因变量</span><br><span class="line">X = data(:, 2:end); % 自变量：高考数学、高考总分、班干与否、平时成绩</span><br><span class="line">y = data(:, 1); % 因变量：期末成绩</span><br><span class="line"></span><br><span class="line">% 进行多元线性回归分析</span><br><span class="line">mdl = fitlm(X, y);</span><br><span class="line"></span><br><span class="line">% 打印回归系数</span><br><span class="line">disp(mdl.Coefficients);</span><br><span class="line"></span><br><span class="line">% 打印回归统计信息</span><br><span class="line">disp(mdl.Rsquared);</span><br><span class="line">disp(sqrt(mdl.MSE));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者使用stata软件，导入后使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">cls </span><br><span class="line">// 导入数据</span><br><span class="line">// import excel &quot;奶粉数据.xlsx&quot;, sheet(&quot;Sheet1&quot;) firstrow</span><br><span class="line">import excel &quot;奶粉数据.xlsx&quot;, sheet(&quot;Sheet1&quot;) firstrow</span><br><span class="line">// 定量变量的描述性统计</span><br><span class="line"></span><br><span class="line">summarize 团购价元 评价量 商品毛重kg</span><br><span class="line">// 定性变量的频数分布，并得到相应字母开头的虚拟变量</span><br><span class="line">tabulate 配方,gen(A)</span><br><span class="line">tabulate 奶源产地 ,gen(B)</span><br><span class="line">tabulate 国产或进口 ,gen(C)</span><br><span class="line">tabulate 适用年龄岁 ,gen(D)</span><br><span class="line">tabulate 包装单位 ,gen(E)</span><br><span class="line">tabulate 分类 ,gen(F)</span><br><span class="line">tabulate 段位 ,gen(G)</span><br><span class="line"></span><br><span class="line">// Stata会自动剔除多重共线性的变量</span><br><span class="line">regress 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4</span><br><span class="line">est store m2</span><br><span class="line">reg2docx m2 using m2.docx, replace</span><br><span class="line"></span><br><span class="line">// 得到标准化回归系数</span><br><span class="line">regress 评价量 团购价元 商品毛重kg, b </span><br><span class="line"></span><br><span class="line">// 画出残差图</span><br><span class="line">regress 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4</span><br><span class="line">rvfplot </span><br><span class="line">// 残差与拟合值的散点图</span><br><span class="line">graph export a1.png ,replace</span><br><span class="line">// 残差与自变量团购价的散点图</span><br><span class="line">rvpplot  团购价元</span><br><span class="line">graph export a2.png ,replace</span><br><span class="line"></span><br><span class="line">// 描述性统计并给出分位数对应的数值</span><br><span class="line">summarize 评价量,d</span><br><span class="line"></span><br><span class="line">// 作评价量的概率密度估计图</span><br><span class="line">kdensity 评价量 </span><br><span class="line">graph export a3.png ,replace</span><br><span class="line"></span><br><span class="line">// 异方差BP检验</span><br><span class="line">estat hettest ,rhs iid</span><br><span class="line"></span><br><span class="line">// 异方差怀特检验</span><br><span class="line">estat imtest,white</span><br><span class="line"></span><br><span class="line">// 使用OLS + 稳健的标准误</span><br><span class="line">regress 评价量 团购价元 商品毛重kg A1 A2 A3 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 D1 D2 D3 D4 D5 E1 E2 E3 E4 F1 F2 G1 G2 G3 G4, r</span><br><span class="line">est store m3</span><br><span class="line">reg2docx m3 using m3.docx, replace</span><br><span class="line"></span><br><span class="line">// 计算VIF</span><br><span class="line">estat  vif</span><br><span class="line"></span><br><span class="line">// 逐步回归（一定要注意完全多重共线性的影响）</span><br><span class="line">// 向前逐步回归（后面的r表示稳健的标准误）</span><br><span class="line">stepwise reg 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r pe(0.05)</span><br><span class="line">// 向后逐步回归（后面的r表示稳健的标准误）</span><br><span class="line">stepwise reg 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r pr(0.05)</span><br><span class="line">// 向后逐步回归的同时使用标准化回归系数（在r后面跟上一个b即可）</span><br><span class="line">stepwise reg 评价量 团购价元 商品毛重kg A1 A3 B1 B2 B3 B4 B5 B6 B7 B9 C1 D1 D2 D3 D4 E1 E2 E3 F1 G1 G2 G3,  r b pr(0.05)</span><br></pre></td></tr></table></figure><h1 id="时间序列分析"><a href="#时间序列分析" class="headerlink" title="时间序列分析"></a>时间序列分析</h1><p>时间序列分析是一种用来研究随着时间推移而变化的数据的方法。这种数据可能是按照时间顺序记录下来的，比如每天、每月或每年的数据。时间序列分析的目标是揭示数据中存在的模式、趋势和周期性，并且利用这些信息做出预测或者推断。时间序列分析根据时间和数值性质的不同，可以分为时期序列和时点序列。时期序列反映现象在一定时期内发展的结果，而时点序列反映现象在一定时点上的瞬间水平。时期序列可加，时点序列不可加。通常情况下，时间序列分析可以帮助我们回答以下问题：</p><ul><li><p>趋势：数据是否存在逐渐增加或减少的趋势？这种趋势是线性的还是非线性的？</p></li><li><p>季节性：数据是否存在重复出现的季节性模式？比如一年中特定月份或季度的销售数据是否有规律性的波动？</p></li><li><p>周期性：数据是否存在长期的循环或者周期性变化？比如经济周期、商业周期等。</p></li><li><p>随机性：数据中是否存在随机的、不规律的波动？</p></li></ul><p>为了回答这些问题，时间序列分析会使用各种统计方法和模型，最常用的是季节分解，指数平滑方法和ARIMA模型。</p><ul><li><p>季节分解（Seasonal Decomposition）：季节分解是指将时间序列数据分解为趋势、季节性和残差三个部分的过程。趋势表示长期变化趋势，季节性表示周期性变化，残差则是除去趋势和季节性之后的随机波动部分。这种分解有助于我们更好地理解数据的结构和规律，以便进行预测和分析。</p></li><li><p>指数平滑方法（Exponential Smoothing Method）：指数平滑方法是一种常用的预测方法，适用于没有明显趋势和季节性的时间序列数据。该方法通过对历史数据赋予不同权重，来进行未来数值的预测。简单指数平滑、双指数平滑和三指数平滑是常见的指数平滑方法，它们在对历史数据赋予权重时有不同的考虑因素，适用于不同类型的数据。</p></li><li><p>ARIMA模型（Autoregressive Integrated Moving Average Model）：ARIMA模型是一种经典的时间序列分析和预测模型，适用于具有趋势和季节性的时间序列数据。ARIMA模型包括自回归（AR）、差分（I）和移动平均（MA）三个部分，分别代表了数据的自相关、趋势和残差成分。通过对这三个部分的组合，ARIMA模型可以对未来的数值进行预测。</p></li></ul><p>对于时间序列分析，我们将使用季节ARIMA模型（SARIMA），这是表述最全面的时间序列预测模型之一，其他的模型都可以由它简化变型后得到。其建模思想是，将预测对象随时间推移而形成的数据序列看作一个随机序列，时间序列是一组依赖时间*的随机变量，构成该时间序列的单个序列值虽然具有不确定性，但整个序列的变化却是有一定的规律性，可以用数学模型近似描述。这组随机变量所具有的依存关系或自相关性表征了预测对象发展的延续性，而一旦这种自相关性被相应的数学模型描述出来，就可以从时间序列的过去值预测其未来值，通过SARIMA模型可以消除趋势性和季节性，转化为平稳时间序列进行建模。</p><p>受限于水平，具体过程完全依赖于spss进行处理，请移步<a href="https://www.spsspro.com/help/sarima/">帮助文档</a>。</p><p>此处内嵌网页，便于查阅。</p><iframe width="100%" height="500" src="https://www.spsspro.com/help/sarima/" frameborder="0" ></iframe><p>这个方法在预测中短期的变化时效果较好，长期的预测可能会遇到外界环境变化的问题。</p><h1 id="灰色预测模型"><a href="#灰色预测模型" class="headerlink" title="灰色预测模型"></a>灰色预测模型</h1><p>存在三种系统，白色、黑色和灰色系统。它们之间的区别主要在于数据是否具有可预测性，以及对系统内部机制的了解程度。</p><ul><li><p>白色系统（White System）：白色系统指的是没有相关性的随机过程或时间序列，其各个时刻的观测值彼此独立且方差相等，因此无法通过历史数据来预测未来的数据。白噪声就是一种典型的白色系统，其在时间轴上呈现为完全随机、无法预测的波动。</p></li><li><p>黑色系统（Black System）：黑色系统指的是具有确定性规律的时间序列，其内部机制已经被充分理解，可以通过历史数据来预测未来的数据。黑色系统中的趋势和周期性成分都是明显的，由此可以建立相应的数学模型。例如，股票市场中的价格波动就属于一种黑色系统。</p></li><li><p>灰色系统（Grey System）：灰色系统指的是既不是白色系统也不是黑色系统的时间序列，其内部机制尚未被完全理解，但对其进行预测和分析仍然有一定的可行性。灰色系统中的趋势和周期性成分相对不太明显，其模型参数通常需要通过数据拟合来确定。</p></li></ul><p>而灰色预测模型是一种对含有不确定因素的系统进行预测的方法。灰色预测通过鉴别系统因素之间发展趋势的相异程度，即进行关联分析，并对原始数据进行生成处理来寻找系统变动的规律，生成有较强规律性的数据序列，然后建立相应的微分方程模型，从而预测事物未来发展趋势的状况。在处理较少的特征值数据时，不需要数据的样本空间足够大，就可以解决历史数据少，序列完整性低，可靠性低的问题，可以生成得到规律较强的生成序列。</p><p>我们根据数据量的不同，选择使用传统的GM(1,1)模型、新信息GM(1,1)模型还是新陈代谢GM(1,1)模型进行预测，然后比较三种模型对试验数据的预测结果。</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>仅作为例子，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">year =[1995:1:2004]&#x27;;  % 横坐标表示年份，写成列向量的形式（加&#x27;就表示转置）</span><br><span class="line">x0 = [174,179,183,189,207,234,220.5,256,270,285]&#x27;;  %原始数据序列，写成列向量的形式（加&#x27;就表示转置）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% 画出原始数据的时间序列图</span><br><span class="line">figure(1); % 设置编号</span><br><span class="line">plot(year,x0,&#x27;o-&#x27;); grid on;  % 原式数据的时间序列图</span><br><span class="line">set(gca,&#x27;xtick&#x27;,year(1:1:end))  % 设置x轴横坐标的间隔为1</span><br><span class="line">xlabel(&#x27;年份&#x27;);  ylabel(&#x27;排污总量&#x27;);  % 给坐标轴加上标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%% 因为我们要使用GM(1,1)模型，其适用于数据期数较短的非负时间序列</span><br><span class="line">ERROR = 0;  % 建立一个错误指标，一旦出错就指定为1</span><br><span class="line">% 判断是否有负数元素</span><br><span class="line">if sum(x0&lt;0) &gt; 0  </span><br><span class="line">    disp(&#x27;灰色预测的时间序列中不能有负数。&#x27;)</span><br><span class="line">    ERROR = 1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% 判断数据量是否太少</span><br><span class="line">n = length(x0);  % 计算原始数据的长度</span><br><span class="line">disp(strcat(&#x27;原始数据的长度为&#x27;,num2str(n))) % strcat()连接字符串</span><br><span class="line">if n&lt;=3</span><br><span class="line">    disp(&#x27;数据量太小！&#x27;)</span><br><span class="line">    ERROR = 1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% 数据太多时提示可考虑使用其他方法（不报错）</span><br><span class="line">if n&gt;10</span><br><span class="line">    disp(&#x27;数据太多，考虑使用其他的方法，例如ARIMA，指数平滑等&#x27;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%  防爆机制，如果输入的是行向量则转置为列向量</span><br><span class="line">if size(x0,1) == 1</span><br><span class="line">    x0 = x0&#x27;;</span><br><span class="line">end</span><br><span class="line">if size(year,1) == 1</span><br><span class="line">    year = year&#x27;;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%% 对一次累加后的数据进行准指数规律的检验(注意，这个检验有时候即使能通过，也不一定能保证预测结果非常好，例如上面的第三组数据)</span><br><span class="line">if ERROR == 0   </span><br><span class="line">    disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">    disp(&#x27;准指数规律检验&#x27;)</span><br><span class="line">    x1 = cumsum(x0);   % 生成1-AGO序列，cumsum是累加函数哦~    注意：1.0e+03 *0.1740的意思是科学计数法,即10^3*0.1740 = 174</span><br><span class="line">    rho = x0(2:end) ./ x1(1:end-1) ;   % 计算光滑度rho(k) = x0(k)/x1(k-1)</span><br><span class="line">    </span><br><span class="line">    % 画出光滑度的图形，并画上0.5的直线，表示临界值</span><br><span class="line">    figure(2)</span><br><span class="line">    plot(year(2:end),rho,&#x27;o-&#x27;,[year(2),year(end)],[0.5,0.5],&#x27;-&#x27;); grid on;</span><br><span class="line">    text(year(end-1)+0.2,0.55,&#x27;临界线&#x27;)   % 在坐标(year(end-1)+0.2,0.55)上添加文本</span><br><span class="line">    set(gca,&#x27;xtick&#x27;,year(2:1:end))  % 设置x轴横坐标的间隔为1</span><br><span class="line">    xlabel(&#x27;年份&#x27;);  ylabel(&#x27;原始数据的光滑度&#x27;);  % 给坐标轴加上标签</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    disp(strcat(&#x27;指标1：光滑比小于0.5的数据占比为：&#x27;,num2str(100*sum(rho&lt;0.5)/(n-1)),&#x27;%&#x27;))</span><br><span class="line">    disp(strcat(&#x27;指标2：除去前两个时期外，光滑比小于0.5的数据占比为：&#x27;,num2str(100*sum(rho(3:end)&lt;0.5)/(n-3)),&#x27;%&#x27;))</span><br><span class="line">    disp(&#x27;参考标准：指标1一般要大于60%, 指标2要大于90%，本例可以通过检验吗？&#x27;)</span><br><span class="line">    </span><br><span class="line">    Judge = input(&#x27;可以通过请输入1，不能请输入0：&#x27;);</span><br><span class="line">    if Judge == 0</span><br><span class="line">        disp(&#x27;考虑其他方法吧 例如ARIMA，指数平滑等。&#x27;)</span><br><span class="line">        ERROR = 1;</span><br><span class="line">    end</span><br><span class="line">    disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 当数据量大于4时，我们利用试验组来选择使用传统的GM(1,1)模型、新信息GM(1,1)模型还是新陈代谢GM(1,1)模型； 如果数据量等于4，那么我们直接对三种方法求一个平均来进行预测</span><br><span class="line">if ERROR == 0   % 如果上述错误均没有发生时，才能执行下面的操作步骤</span><br><span class="line">    if  n &gt; 4  % 数据量大于4时，将数据分为训练组和试验组(根据原数据量大小n来取，n为5-7个则取最后两年为试验组，n大于7则取最后三年为试验组)</span><br><span class="line">        disp(&#x27;因为原数据的期数大于4，所以我们可以将数据组分为训练组和试验组&#x27;)   % 注意，如果试验组的个数只有1个，那么三种模型的结果完全相同，因此至少要取2个试验组</span><br><span class="line">        if n &gt; 7</span><br><span class="line">            test_num = 3;</span><br><span class="line">        else</span><br><span class="line">            test_num = 2;</span><br><span class="line">        end</span><br><span class="line">        train_x0 = x0(1:end-test_num);  % 训练数据</span><br><span class="line">        disp(&#x27;训练数据是: &#x27;)</span><br><span class="line">        disp(mat2str(train_x0&#x27;))  % mat2str可以将矩阵或者向量转换为字符串显示, 这里加一撇表示转置，把列向量变成行向量方便观看</span><br><span class="line">        test_x0 =  x0(end-test_num+1:end); % 试验数据</span><br><span class="line">        disp(&#x27;试验数据是: &#x27;)</span><br><span class="line">        disp(mat2str(test_x0&#x27;))  % mat2str可以将矩阵或者向量转换为字符串显示</span><br><span class="line">        disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">        </span><br><span class="line">        % 使用三种模型对训练数据进行训练，返回的result就是往后预测test_num期的数据</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是传统的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        result1 = gm11(train_x0, test_num); %使用传统的GM(1,1)模型对训练数据，并预测后test_num期的结果</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是进行新信息的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        result2 = new_gm11(train_x0, test_num); %使用新信息GM(1,1)模型对训练数据，并预测后test_num期的结果</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是进行新陈代谢的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        result3 = metabolism_gm11(train_x0, test_num); %使用新陈代谢GM(1,1)模型对训练数据，并预测后test_num期的结果</span><br><span class="line">        </span><br><span class="line">        % 现在比较三种模型对于试验数据的预测结果</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">        % 绘制对试验数据进行预测的图形（对于部分数据，可能三条直线预测的结果非常接近）</span><br><span class="line">        test_year = year(end-test_num+1:end);  % 试验组对应的年份</span><br><span class="line">        figure(3)</span><br><span class="line">        plot(test_year,test_x0,&#x27;o-&#x27;,test_year,result1,&#x27;*-&#x27;,test_year,result2,&#x27;+-&#x27;,test_year,result3,&#x27;x-&#x27;); grid on;</span><br><span class="line">        set(gca,&#x27;xtick&#x27;,year(end-test_num+1): 1 :year(end))  % 设置x轴横坐标的间隔为1</span><br><span class="line">        legend(&#x27;试验组的真实数据&#x27;,&#x27;传统GM(1,1)预测结果&#x27;,&#x27;新信息GM(1,1)预测结果&#x27;,&#x27;新陈代谢GM(1,1)预测结果&#x27;)  % 注意：如果lengend挡着了图形中的直线，那么lengend的位置可以自己手动拖动</span><br><span class="line">        xlabel(&#x27;年份&#x27;);  ylabel(&#x27;排污总量&#x27;);  % 给坐标轴加上标签</span><br><span class="line">        % 计算误差平方和SSE</span><br><span class="line">        SSE1 = sum((test_x0-result1).^2);</span><br><span class="line">        SSE2 = sum((test_x0-result2).^2);</span><br><span class="line">        SSE3 = sum((test_x0-result3).^2);</span><br><span class="line">        disp(strcat(&#x27;传统GM(1,1)对于试验组预测的误差平方和为&#x27;,num2str(SSE1)))</span><br><span class="line">        disp(strcat(&#x27;新信息GM(1,1)对于试验组预测的误差平方和为&#x27;,num2str(SSE2)))</span><br><span class="line">        disp(strcat(&#x27;新陈代谢GM(1,1)对于试验组预测的误差平方和为&#x27;,num2str(SSE3)))</span><br><span class="line">        if SSE1&lt;SSE2</span><br><span class="line">            if SSE1&lt;SSE3</span><br><span class="line">                choose = 1;  % SSE1最小，选择传统GM(1,1)模型</span><br><span class="line">            else</span><br><span class="line">                choose = 3;  % SSE3最小，选择新陈代谢GM(1,1)模型</span><br><span class="line">            end</span><br><span class="line">        elseif SSE2&lt;SSE3</span><br><span class="line">            choose = 2;  % SSE2最小，选择新信息GM(1,1)模型</span><br><span class="line">        else</span><br><span class="line">            choose = 3;  % SSE3最小，选择新陈代谢GM(1,1)模型</span><br><span class="line">        end</span><br><span class="line">        Model = &#123;&#x27;传统GM(1,1)模型&#x27;,&#x27;新信息GM(1,1)模型&#x27;,&#x27;新陈代谢GM(1,1)模型&#x27;&#125;;</span><br><span class="line">        disp(strcat(&#x27;因为&#x27;,Model(choose),&#x27;的误差平方和最小，所以我们应该选择其进行预测&#x27;))</span><br><span class="line">        disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">        </span><br><span class="line">        %% 选用误差最小的那个模型进行预测</span><br><span class="line">        predict_num = input(&#x27;请输入你要往后面预测的期数： &#x27;);</span><br><span class="line">        % 计算使用传统GM模型的结果，用来得到另外的返回变量：x0_hat, 相对残差relative_residuals和级比偏差eta</span><br><span class="line">        [result, x0_hat, relative_residuals, eta] = gm11(x0, predict_num);  % 先利用gm11函数得到对原数据拟合的详细结果</span><br><span class="line">        </span><br><span class="line">        % % 判断我们选择的是哪个模型，如果是2或3，则更新刚刚由模型1计算出来的预测结果</span><br><span class="line">        if choose == 2</span><br><span class="line">            result = new_gm11(x0, predict_num);</span><br><span class="line">        end</span><br><span class="line">        if choose == 3</span><br><span class="line">            result = metabolism_gm11(x0, predict_num);</span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        %% 输出使用最佳的模型预测出来的结果</span><br><span class="line">        disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">        disp(&#x27;对原始数据的拟合结果：&#x27;)</span><br><span class="line">        for i = 1:n</span><br><span class="line">            disp(strcat(num2str(year(i)), &#x27; ： &#x27;,num2str(x0_hat(i))))</span><br><span class="line">        end</span><br><span class="line">        disp(strcat(&#x27;往后预测&#x27;,num2str(predict_num),&#x27;期的得到的结果：&#x27;))</span><br><span class="line">        for i = 1:predict_num</span><br><span class="line">            disp(strcat(num2str(year(end)+i), &#x27; ： &#x27;,num2str(result(i))))</span><br><span class="line">        end</span><br><span class="line">        </span><br><span class="line">        %% 如果只有四期数据，那么我们就没必要选择何种模型进行预测，直接对三种模型预测的结果求一个平均值~</span><br><span class="line">    else</span><br><span class="line">        disp(&#x27;因为数据只有4期，因此我们直接将三种方法的结果求平均即可~&#x27;)</span><br><span class="line">        predict_num = input(&#x27;请输入你要往后面预测的期数： &#x27;);</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是传统的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        [result1, x0_hat, relative_residuals, eta] = gm11(x0, predict_num);</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是进行新信息的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        result2 = new_gm11(x0, predict_num);</span><br><span class="line">        disp(&#x27; &#x27;)</span><br><span class="line">        disp(&#x27;***下面是进行新陈代谢的GM(1,1)模型预测的详细过程***&#x27;)</span><br><span class="line">        result3 = metabolism_gm11(x0, predict_num);</span><br><span class="line">        result = (result1+result2+result3)/3;</span><br><span class="line">        </span><br><span class="line">        disp(&#x27;对原始数据的拟合结果：&#x27;)</span><br><span class="line">        for i = 1:n</span><br><span class="line">            disp(strcat(num2str(year(i)), &#x27; ： &#x27;,num2str(x0_hat(i))))</span><br><span class="line">        end</span><br><span class="line">        disp(strcat(&#x27;传统GM(1,1)往后预测&#x27;,num2str(predict_num),&#x27;期的得到的结果：&#x27;))</span><br><span class="line">        for i = 1:predict_num</span><br><span class="line">            disp(strcat(num2str(year(end)+i), &#x27; ： &#x27;,num2str(result1(i))))</span><br><span class="line">        end</span><br><span class="line">        disp(strcat(&#x27;新信息GM(1,1)往后预测&#x27;,num2str(predict_num),&#x27;期的得到的结果：&#x27;))</span><br><span class="line">        for i = 1:predict_num</span><br><span class="line">            disp(strcat(num2str(year(end)+i), &#x27; ： &#x27;,num2str(result2(i))))</span><br><span class="line">        end</span><br><span class="line">        disp(strcat(&#x27;新陈代谢GM(1,1)往后预测&#x27;,num2str(predict_num),&#x27;期的得到的结果：&#x27;))</span><br><span class="line">        for i = 1:predict_num</span><br><span class="line">            disp(strcat(num2str(year(end)+i), &#x27; ： &#x27;,num2str(result3(i))))</span><br><span class="line">        end</span><br><span class="line">        disp(strcat(&#x27;三种方法求平均得到的往后预测&#x27;,num2str(predict_num),&#x27;期的得到的结果：&#x27;))</span><br><span class="line">        for i = 1:predict_num</span><br><span class="line">            disp(strcat(num2str(year(end)+i), &#x27; ： &#x27;,num2str(result(i))))</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    %% 绘制相对残差和级比偏差的图形(注意：因为是对原始数据的拟合效果评估，所以三个模型都是一样的哦~~~)</span><br><span class="line">    figure(4)</span><br><span class="line">    subplot(2,1,1)  % 绘制子图（将图分块）</span><br><span class="line">    plot(year(2:end), relative_residuals,&#x27;*-&#x27;); grid on;   % 原数据中的各时期和相对残差</span><br><span class="line">    legend(&#x27;相对残差&#x27;); xlabel(&#x27;年份&#x27;);</span><br><span class="line">    set(gca,&#x27;xtick&#x27;,year(2:1:end))  % 设置x轴横坐标的间隔为1</span><br><span class="line">    subplot(2,1,2)</span><br><span class="line">    plot(year(2:end), eta,&#x27;o-&#x27;); grid on;   % 原数据中的各时期和级比偏差</span><br><span class="line">    legend(&#x27;级比偏差&#x27;); xlabel(&#x27;年份&#x27;);</span><br><span class="line">    set(gca,&#x27;xtick&#x27;,year(2:1:end))  % 设置x轴横坐标的间隔为1</span><br><span class="line">    disp(&#x27; &#x27;)</span><br><span class="line">    disp(&#x27;****下面将输出对原数据拟合的评价结果***&#x27;)</span><br><span class="line">    </span><br><span class="line">    %% 残差检验</span><br><span class="line">    average_relative_residuals = mean(relative_residuals);  % 计算平均相对残差 mean函数用来均值</span><br><span class="line">    disp(strcat(&#x27;平均相对残差为&#x27;,num2str(average_relative_residuals)))</span><br><span class="line">    if average_relative_residuals&lt;0.1</span><br><span class="line">        disp(&#x27;残差检验的结果表明：该模型对原数据的拟合程度非常不错&#x27;)</span><br><span class="line">    elseif average_relative_residuals&lt;0.2</span><br><span class="line">        disp(&#x27;残差检验的结果表明：该模型对原数据的拟合程度达到一般要求&#x27;)</span><br><span class="line">    else</span><br><span class="line">        disp(&#x27;残差检验的结果表明：该模型对原数据的拟合程度不太好，建议使用其他模型预测&#x27;)</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    %% 级比偏差检验</span><br><span class="line">    average_eta = mean(eta);   % 计算平均级比偏差</span><br><span class="line">    disp(strcat(&#x27;平均级比偏差为&#x27;,num2str(average_eta)))</span><br><span class="line">    if average_eta&lt;0.1</span><br><span class="line">        disp(&#x27;级比偏差检验的结果表明：该模型对原数据的拟合程度非常不错&#x27;)</span><br><span class="line">    elseif average_eta&lt;0.2</span><br><span class="line">        disp(&#x27;级比偏差检验的结果表明：该模型对原数据的拟合程度达到一般要求&#x27;)</span><br><span class="line">    else</span><br><span class="line">        disp(&#x27;级比偏差检验的结果表明：该模型对原数据的拟合程度不太好，建议使用其他模型预测&#x27;)</span><br><span class="line">    end</span><br><span class="line">    disp(&#x27; &#x27;)</span><br><span class="line">    disp(&#x27;------------------------------------------------------------&#x27;)</span><br><span class="line">    </span><br><span class="line">    %% 绘制最终的预测效果图</span><br><span class="line">    figure(5)  % 下面绘图中的符号m:洋红色 b:蓝色</span><br><span class="line">    plot(year,x0,&#x27;-o&#x27;,  year,x0_hat,&#x27;-*m&#x27;,  year(end)+1:year(end)+predict_num,result,&#x27;-*b&#x27; );   grid on;</span><br><span class="line">    hold on;</span><br><span class="line">    plot([year(end),year(end)+1],[x0(end),result(1)],&#x27;-*b&#x27;)</span><br><span class="line">    legend(&#x27;原始数据&#x27;,&#x27;拟合数据&#x27;,&#x27;预测数据&#x27;)  % 注意：如果lengend挡着了图形中的直线，那么lengend的位置可以自己手动拖动</span><br><span class="line">    set(gca,&#x27;xtick&#x27;,[year(1):1:year(end)+predict_num])  % 设置x轴横坐标的间隔为1</span><br><span class="line">    xlabel(&#x27;年份&#x27;);  ylabel(&#x27;y坐标数据&#x27;);  % 给坐标轴加上标签</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关模型的代码实现"><a href="#相关模型的代码实现" class="headerlink" title="相关模型的代码实现"></a>相关模型的代码实现</h2><p>最后给出传统的GM(1,1)模型、新信息GM(1,1)模型还是新陈代谢GM(1,1)模型的代码。</p><ol><li>传统的GM(1,1)模型:</li></ol><ul><li>x0：要预测的原始数据</li><li>predict_num： 向后预测的期数</li><li>result：预测值</li><li>x0_hat：对原始数据的拟合值</li><li>relative_residuals： 对模型进行评价时计算得到的相对残差</li><li>eta： 对模型进行评价时计算得到的级比偏差</li></ul><p>注意，实际调用时该函数时不一定输出全部结果，就像corrcoef函数一样~，可以只输出相关系数矩阵，也可以附带输出p值矩阵</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function [result, x0_hat, relative_residuals, eta] = gm11(x0, predict_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n = length(x0); % 数据的长度</span><br><span class="line">    x1=cumsum(x0); % 计算一次累加值</span><br><span class="line">    z1 = (x1(1:end-1) + x1(2:end)) / 2;  % 计算紧邻均值生成数列（长度为n-1）</span><br><span class="line">    % 将从第二项开始的x0当成y，z1当成x，来进行一元回归  y = kx +b</span><br><span class="line">    y = x0(2:end); x = z1;</span><br><span class="line">    k = ((n-1)*sum(x.*y)-sum(x)*sum(y))/((n-1)*sum(x.*x)-sum(x)*sum(x));</span><br><span class="line">    b = (sum(x.*x)*sum(y)-sum(x)*sum(x.*y))/((n-1)*sum(x.*x)-sum(x)*sum(x));</span><br><span class="line">    a = -k;  %注意：k = -a哦</span><br><span class="line">    % 注意： -a就是发展系数,  b就是灰作用量</span><br><span class="line">    </span><br><span class="line">    disp(&#x27;现在进行GM(1,1)预测的原始数据是: &#x27;)</span><br><span class="line">    disp(mat2str(x0&#x27;))  % mat2str可以将矩阵或者向量转换为字符串显示</span><br><span class="line">    disp(strcat(&#x27;最小二乘法拟合得到的发展系数为&#x27;,num2str(-a),&#x27;，灰作用量是&#x27;,num2str(b)))</span><br><span class="line">    disp(&#x27;***************分割线***************&#x27;)</span><br><span class="line">    x0_hat=zeros(n,1);  x0_hat(1)=x0(1);   % x0_hat向量用来存储对x0序列的拟合值，这里先进行初始化</span><br><span class="line">    for m = 1: n-1</span><br><span class="line">        x0_hat(m+1) = (1-exp(a))*(x0(1)-b/a)*exp(-a*m);</span><br><span class="line">    end</span><br><span class="line">    result = zeros(predict_num,1);  % 初始化用来保存预测值的向量</span><br><span class="line">    for i = 1: predict_num</span><br><span class="line">        result(i) = (1-exp(a))*(x0(1)-b/a)*exp(-a*(n+i-1)); % 带入公式直接计算</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    % 计算绝对残差和相对残差</span><br><span class="line">    absolute_residuals = x0(2:end) - x0_hat(2:end);   % 从第二项开始计算绝对残差，因为第一项是相同的</span><br><span class="line">    relative_residuals = abs(absolute_residuals) ./ x0(2:end);  % 计算相对残差，注意分子要加绝对值，而且要使用点除</span><br><span class="line">    % 计算级比和级比偏差</span><br><span class="line">    class_ratio = x0(2:end) ./ x0(1:end-1) ;  % 计算级比 sigma(k) = x0(k)/x0(k-1)</span><br><span class="line">    eta = abs(1-(1-0.5*a)/(1+0.5*a)*(1./class_ratio));  % 计算级比偏差</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="2"><li>新信息GM(1,1)模型，代码如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function [result] = new_gm11(x0, predict_num)</span><br><span class="line">    result = zeros(predict_num,1);  % 初始化用来保存预测值的向量</span><br><span class="line">    for i = 1 : predict_num  </span><br><span class="line">        result(i) = gm11(x0, 1);  % 将预测一期的结果保存到result中</span><br><span class="line">        x0 = [x0; result(i)];  % 更新x0向量，此时x0多了新的预测信息</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="3"><li>新陈代谢GM(1,1)模型</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function [result] = metabolism_gm11(x0, predict_num)</span><br><span class="line"></span><br><span class="line">    result = zeros(predict_num,1);  % 初始化用来保存预测值的向量</span><br><span class="line">    for i = 1 : predict_num  </span><br><span class="line">        result(i) = gm11(x0, 1);  % 将预测一期的结果保存到result中</span><br><span class="line">        x0 = [x0(2:end); result(i)];  % 更新x0向量，此时x0多了新的预测信息，并且删除了最开始的那个向量</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合评价类模型</title>
      <link href="/2024/01/27/2%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/01/27/2%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>当我们对事物进行评价时，通常会使用综合评价模型来综合考虑各个方面的因素。对于数学建模而言，综合评价模型是一种系统化的方法，通过将多个评价指标进行加权和综合，得出对事物整体的评价结果。它可以应用于各种领域和场景，例如产品评价、学生综合素质评价、企业绩效评估等。</p><h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p>层次分析法（Analytic Hierarchy Process，AHP）是一种用于进行多指标综合评价的方法，它可以帮助我们确定各个指标的权重，并最终得出综合评价结果。这是最基础的模型之一，其主要用于解决评价类问题，例如：选择哪种方案最好、哪位运动员或者员工表现的更优秀。</p><p>层次分析法的基本思想是将一个复杂的问题分解成若干个层次，从而形成一个层次结构。每一层次包含若干个指标或因素，在进行评价时，我们需要对各个指标进行比较和权重计算，以确定它们在整个层次结构中的相对重要程度。假设我们要评估三种手机品牌（A、B、C）的性能，我们选择了以下指标：屏幕质量、摄像头性能和电池续航。我们需要对这三个指标进行两两比较，并根据比较结果给出权重值。</p><p>首先，你要确定一些重要的指标，比如屏幕质量、摄像头性能和电池续航。然后，你需要比较这些指标之间的相对重要程度。比如，你可能认为摄像头性能对你来说更重要，因为你经常拍照或者视频通话。接下来，你需要对每个指标进行进一步的比较。比如，你要比较不同手机的屏幕质量。你可以列出几个备选手机，并给它们打分。然后，你可以将这些分数转化为相对权重，用来表示在整个层次结构中的重要程度。最后，根据这些权重来做出决策。比如，如果一个手机在屏幕质量方面得分很高，并且屏幕质量在整个层次结构中的权重也很高，那么你可能会倾向于选择这款手机。</p><p>需要注意的是，层次分析法通过构建一个判断矩阵来进行两两比较，从而得到各个指标之间的权重值。在进行两两比较时，我们需要确保判断矩阵是一致的，即各个比较的结果相互符合。判断矩阵有时可能会出现矛盾情况。这种矛盾可能是由于主观判断的不一致或者信息不完整所导致的，这种情况很容易出现且很难被直接察觉到。以下是一个简化的例子：</p><p>假设我们的判断矩阵如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        屏幕质量     摄像头性能   电池续航</span><br><span class="line">屏幕质量    1         3         2</span><br><span class="line">摄像头性能   1/3      1         1/2</span><br><span class="line">电池续航    1/2       2         1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从判断矩阵可以看出，我们认为屏幕质量比摄像头性能好3倍，而摄像头性能比电池续航好2倍，同时电池续航比屏幕质量好1&#x2F;2倍。这样的比较存在矛盾，判断矩阵存在较大的一致性问题。在这种情况下，我们需要重新检查和修改判断矩阵，可能需要重新进行比较并调整权重值，以消除矛盾并提高一致性。这样做可以确保判断矩阵符合层次分析法的原则和要求，从而得到更准确和可靠的评价结果。</p><p>为了解决这个问题，我们需要进行一致性检验。</p><p>一致性检验是确保我们所构建的判断矩阵是合理和可靠的关键步骤。一致性检验的目的是验证判断矩阵中的数字是否具有内在的一致性。如果判断矩阵不够一致，那么权重计算可能会失真，从而影响最终的评价结果。在进行一致性检验时，我们使用一致性指标（Consistency Index, CI）和一致性比率（Consistency Ratio, CR）来评估判断矩阵的一致性程度。CI是通过计算判断矩阵的最大特征值与矩阵大小的差异得出的，而CR则是将CI与一个随机一致性指标进行比较。如果CR的值小于某个预定的阈值（通常为0.1），那么判断矩阵可以被认为是一致的。如果CR的值大于阈值，那么判断矩阵存在较大的一致性问题，需要重新进行比较和修改。</p><p>在通过一致性检验后，根据每个指标的权重值，将各个指标的得分进行加权求和，得到最终的综合评价结果。</p><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">disp(&#x27;请输入判断矩阵A&#x27;)</span><br><span class="line">A = input(&#x27;A = &#x27;);</span><br><span class="line"></span><br><span class="line">[n, n] = size(A);</span><br><span class="line"></span><br><span class="line">% 方法1：算术平均法求权重</span><br><span class="line">Sum_A = sum(A);</span><br><span class="line">SUM_A = repmat(Sum_A, n, 1);</span><br><span class="line">Stand_A = A ./ SUM_A;</span><br><span class="line"></span><br><span class="line">disp(&#x27;算术平均法求权重的结果为：&#x27;);</span><br><span class="line">disp(sum(Stand_A, 2) ./ n);</span><br><span class="line"></span><br><span class="line">%几何平均法求权重</span><br><span class="line">Product_A = prod(A, 2);</span><br><span class="line">Product_n_A = Product_A .^ (1/n);</span><br><span class="line">disp(&#x27;几何平均法求权重的结果为：&#x27;);</span><br><span class="line">disp(Product_n_A ./ sum(Product_n_A));</span><br><span class="line"></span><br><span class="line">% 特征值法求权重</span><br><span class="line">[V, D] = eig(A);</span><br><span class="line">Max_eig = max(max(D));</span><br><span class="line">[r, c] = find(D == Max_eig, 1);</span><br><span class="line">disp(&#x27;特征值法求权重的结果为：&#x27;);</span><br><span class="line">disp(V(:, c) ./ sum(V(:, c)));</span><br><span class="line"></span><br><span class="line">% 计算一致性比例CR</span><br><span class="line">CI = (Max_eig - n) / (n - 1);</span><br><span class="line">RI = [0 0.0001 0.52 0.89 1.12 1.26 1.36 1.41 1.46 1.49 1.52 1.54 1.56 1.58 1.59];  % RI理论上最多支持 n = 15</span><br><span class="line"></span><br><span class="line">CR = CI / RI(n);</span><br><span class="line">disp(&#x27;一致性指标CI = &#x27;);</span><br><span class="line">disp(CI);</span><br><span class="line">disp(&#x27;一致性比例CR = &#x27;);</span><br><span class="line">disp(CR);</span><br><span class="line"></span><br><span class="line">% 根据CR的值判断一致性是否可接受</span><br><span class="line">if CR &lt; 0.10</span><br><span class="line">    disp(&#x27;因为CR &lt; 0.10，一致性检验通过。&#x27;);</span><br><span class="line">else</span><br><span class="line">    disp(&#x27;CR &gt;= 0.10，该判断矩阵A需要修改。&#x27;);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="TOPSIS法（优劣解距离法）"><a href="#TOPSIS法（优劣解距离法）" class="headerlink" title="TOPSIS法（优劣解距离法）"></a>TOPSIS法（优劣解距离法）</h1><p>当数据已知时，TOPSIS法是一种更常用的综合评价方法，它能充分利用原始数据的信息，更精确地反映各评价方案之间的差距。</p><p>层次分析法存在一些小问题：</p><ol><li>评价的决策层不能太多，太多的话n会很大，所以判断矩阵和一致矩阵差异可能会很大。</li><li>权重是我们自己打分定的，如果决策层中指标的数据是已知的，应该更好地利用这些数据来使得评价的更加准确。</li></ol><p>这些数据可能符合以下的指标：</p><ul><li>极大型（效益型）指标：越大（多）越好，比如成绩、GDP增速、企业利润</li><li>极小型（成本型）指标：越小（少）越好，比如费用、坏品率、污染程度</li><li>中间型指标：越接近某个值越好，比如水质量评估时的PH值</li><li>区间型指标：落在某个区间最好，比如体温、水中植物性营养物量</li></ul><p>基本过程为，先将原始数据矩阵统一指标类型。最常用的是将所有的指标转化为极大型，称为指标正向化。因为不同指标有不同的评价方式，为了方便比较，需要将不同指标的得分转化成相同类型的数值，一般会将指标值按照一定的规则进行转换，使所有指标都能够在同样的范围内进行比较。</p><p>由于不同指标的量纲不同，对评价结果的影响也不同，所以需要对所有指标的数据进行标准化处理，以消除各指标量纲的影响。标准化后，数据在不同指标上的权重是相同的，可以直接进行比较。具体数学过程略。</p><p>处理完成后，就可以找到有限方案中的最优方案和最劣方案，然后分别计算各评价对象与最优方案和最劣方案间的距离，获得各评价对象与最优方案的相对接近程度，以此作为评价优劣的依据。该方法对数据分布及样本含量没有严格限制，数据计算简单易行。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">%%  第一步：把数据复制到工作区，并将这个矩阵命名为X</span><br><span class="line">clear;clc</span><br><span class="line">load matlab.mat</span><br><span class="line"></span><br><span class="line">%%  第二步：判断是否需要正向化</span><br><span class="line">[n,m] = size(X);</span><br><span class="line">disp([&#x27;共有&#x27; num2str(n) &#x27;个评价对象, &#x27; num2str(m) &#x27;个评价指标&#x27;])</span><br><span class="line">Judge = input([&#x27;这&#x27; num2str(m) &#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;]);</span><br><span class="line">if Judge == 1</span><br><span class="line">    Position = input(&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;); %[2,3,4]</span><br><span class="line">    disp(&#x27;请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） &#x27;)</span><br><span class="line">    Type = input(&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;); %[2,1,3]</span><br><span class="line">    for i = 1 : size(Position,2)  </span><br><span class="line">        X(:,Position(i)) = Positivization(X(:,Position(i)),Type(i),Position(i));</span><br><span class="line">    % Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span><br><span class="line">    % 第一个参数是要正向化处理的那一列向量 X(:,Position(i))   回顾上一讲的知识，X(:,n)表示取第n列的全部元素</span><br><span class="line">    % 第二个参数是对应的这一列的指标类型（1：极小型， 2：中间型， 3：区间型）</span><br><span class="line">    % 第三个参数是告诉函数我们正在处理的是原始矩阵中的哪一列</span><br><span class="line">    % 该函数有一个返回值，它返回正向化之后的指标，我们可以将其直接赋值给我们原始要处理的那一列向量</span><br><span class="line">    end</span><br><span class="line">    disp(&#x27;正向化后的矩阵 X =  &#x27;)</span><br><span class="line">    disp(X)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 第三步：对正向化后的矩阵进行标准化</span><br><span class="line">Z = X ./ repmat(sum(X.*X) .^ 0.5, n, 1);</span><br><span class="line">disp(&#x27;标准化矩阵 Z = &#x27;)</span><br><span class="line">disp(Z)</span><br><span class="line"></span><br><span class="line">%% 第四步：计算与最大值的距离和最小值的距离，并算出得分</span><br><span class="line">D_P = sum([(Z - repmat(max(Z),n,1)) .^ 2 ],2) .^ 0.5;   % D+ 与最大值的距离向量</span><br><span class="line">D_N = sum([(Z - repmat(min(Z),n,1)) .^ 2 ],2) .^ 0.5;   % D- 与最小值的距离向量</span><br><span class="line">S = D_N ./ (D_P+D_N);    % 未归一化的得分</span><br><span class="line">disp(&#x27;最后得分：&#x27;)</span><br><span class="line">stand_S = S / sum(S)</span><br><span class="line">[sorted_S,index] = sort(stand_S ,&#x27;descend&#x27;)</span><br></pre></td></tr></table></figure><h1 id="聚类模型"><a href="#聚类模型" class="headerlink" title="聚类模型"></a>聚类模型</h1><p>聚类，就是将样本划分为由类似的对象组成的多个类的过程，这里的“类”是事先未知的。聚类后，我们可以更加准确的在每个类中单独使用统计模型进行估计、分析或预测；也可以探究不同类之间的相关性和主要差异。</p><h2 id="K-means聚类"><a href="#K-means聚类" class="headerlink" title="K-means聚类"></a>K-means聚类</h2><p>K-means聚类的算法流程：</p><ol><li>指定需要划分的簇的个数K值（类的个数）;</li><li>随机地选择K个数据对象作为初始的聚类中心（不一定要是我们的样本点）;</li><li>计算其余的各个数据对象到这K个初始聚类中心的距离，把数据对象划归到距离它最近的那个中心所处在的簇类中;</li><li>调整新类并且重新计算出新类的中心;</li><li>循环步骤三和四，看中心是否收敛（不变），如果收敛或达到迭代次数则停止循环;</li></ol><p>优点：</p><ol><li>算法简单、快速。</li><li>对处理大数据集，该算法是相对高效率的。</li></ol><p>缺点：</p><ol><li>要求用户必须事先给出要生成的簇的数目K。</li><li>对初值敏感。</li><li>对于孤立点数据敏感。</li></ol><p>K-means++算法可解决2和3这两个缺点，只对K-means算法“初始化K个聚类中心” 这一步进行了优化。k-means++算法选择初始聚类中心的基本原则是：初始的聚类中心之间的相互距离要尽可能的远。</p><p>算法描述如下：</p><ol><li>随机选取一个样本作为第一个聚类中心；</li><li>计算每个样本与当前已有聚类中心的最短距离（即与最近一个聚类中心的距离），这个值越大，表示被选取作为聚类中心的概率较大；最后，用轮盘法（依据概率大小来进行抽选）选出下一个聚类中心；</li><li>重复步骤二，直到选出K个聚类中心。选出初始点后，就继续使用标准的K-means算法了。</li></ol><p>这一算法的最大缺点是，簇的个数k必须事前给定。</p><h2 id="系统（层次）聚类"><a href="#系统（层次）聚类" class="headerlink" title="系统（层次）聚类"></a>系统（层次）聚类</h2><p>系统聚类的合并算法通过计算两类数据点间的距离，对最为接近的两类数据点进行组合，并反复迭代这一过程，直到将所有数据点合成一类，并生成聚类谱系图。</p><p>系统（层次）聚类的算法流程：</p><ol><li>将每个对象看作一类，计算两两之间的最小距离；</li><li>将距离最小的两个类合并成一个新类；</li><li>重新计算新类与所有类之间的距离；</li><li>重复二三两步，直到所有类最后合并成一类；</li><li>结束。</li></ol><h2 id="DBSCAN算法"><a href="#DBSCAN算法" class="headerlink" title="DBSCAN算法"></a>DBSCAN算法</h2><p>聚类前不需要预先指定聚类的个数，生成的簇的个数不定（和数据有关）。该算法利用基于密度的聚类的概念，即要求聚类空间中的一定区域内所包含对象（点或其他空间对象）的数目不小于某一给定阈值。该方法能在具有噪声的空间数据库中发现任意形状的簇，可将密度足够大的相邻区域连接，能有效处理异常数据。</p><p>DBSCAN算法将数据点分为三类：</p><ul><li>核心点：在半径Eps内含有不少于MinPts数目的点</li><li>边界点：在半径Eps内点的数量小于MinPts，但是落在核心点的邻域内</li><li>噪音点：既不是核心点也不是边界点的点</li></ul><p>只有两个指标，且你做出散点图后发现数据表现得很“DBSCAN”，这时候再用DBSCAN进行聚类。</p><p>其他情况下，全部使用系统聚类吧！</p><p>具体实现使用spss，详见<a href="https://www.spsspro.com/help/hierarchical-cluster/">帮助文档</a>。</p><h1 id="主成分分析"><a href="#主成分分析" class="headerlink" title="主成分分析"></a>主成分分析</h1><p>主成分分析(Principal Component Analysis,PCA)，是一种降维算法，它能将多个指标转换为少数几个主成分，这些主成分是原始变量的线性组合，且彼此之间互不相关，其能反映出原始数据的大部分信息。一般来说，当研究的问题涉及到多变量且变量之间存在很强的相关性时，我们可考虑使用主成分分析的方法来对数据进行简化。</p><p>在实际问题研究中，多变量问题是经常会遇到的。变量太多，会增加分析问题的难度与复杂性，而且在许多实际问题中，多个变量之间是具有一定的相关关系的。因此，人们会很自然地想到，能否在相关分析的基础上，用较少的新变量代替原来较多的旧变量，而且使这些较少的新变量尽可能多地保留原来变量所反映的信息？事实上，这种想法是可以实现的，主成分分析方法就是综合处理这种问题的一种强有力的工具。主成分分析是把原来多个变量划为少数几个综合指标的一种统计分析方法。从数学角度来看，这是一种降维处理技术。</p><p>降维是将高维度的数据（指标太多）保留下最重要的一些特征，去除噪声和不重要的特征，从而实现提升数据处理速度的目的。在实际的生产和应用中，降维在一定的信息损失范围内，可以为我们节省大量的时间和成本。降维也成为应用非常广泛的数据预处理方法。</p><p>主成分分析可以用于聚类和回归问题。</p><p>在聚类问题中，主成分分析可以用来降低数据的维度。通过PCA，我们可以将原始数据转换为一组新的主成分（即特征向量），这些主成分是原始数据中变化最大的方向。然后，我们可以使用聚类算法（如K均值聚类、层次聚类等）来对这些主成分进行聚类，以实现样本的分组。</p><p>在回归问题中，主成分分析可以用来处理多重共线性。多重共线性指的是自变量之间存在高度相关性的情况，在回归分析中可能导致模型不稳定或系数估计不准确。通过应用主成分分析，我们可以将相关性较高的自变量转换为一组无关的主成分，并利用这些主成分进行回归分析，以建立更稳定和准确的预测模型。</p><p>主成分分析在聚类和回归问题中的具体应用方法会有所不同。在聚类问题中，我们可以根据主成分的方差解释率选择保留的主成分数量，然后再应用聚类算法进行分组。在回归问题中，我们可以根据主成分的贡献程度选择保留的主成分数量，然后再进行回归分析。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">load data1.mat   % 主成分聚类</span><br><span class="line"></span><br><span class="line">[n,p] = size(x);  % n是样本个数，p是指标个数</span><br><span class="line"></span><br><span class="line">%% 第一步：对数据x标准化为X</span><br><span class="line">X=zscore(x);   % matlab内置的标准化函数（x-mean(x)）/std(x)</span><br><span class="line"></span><br><span class="line">%% 第二步：计算样本协方差矩阵</span><br><span class="line">R = cov(X);</span><br><span class="line"></span><br><span class="line">%% 注意：以上两步可合并为下面一步：直接计算样本相关系数矩阵</span><br><span class="line">R = corrcoef(x);</span><br><span class="line">disp(&#x27;样本相关系数矩阵为：&#x27;)</span><br><span class="line">disp(R)</span><br><span class="line"></span><br><span class="line">%% 第三步：计算R的特征值和特征向量</span><br><span class="line">% 注意：R是半正定矩阵，所以其特征值不为负数</span><br><span class="line">% R同时是对称矩阵，Matlab计算对称矩阵时，会将特征值按照从小到大排列</span><br><span class="line">[V,D] = eig(R);  % V 特征向量矩阵  D 特征值构成的对角矩阵</span><br><span class="line"></span><br><span class="line">%% 第四步：计算主成分贡献率和累计贡献率</span><br><span class="line">lambda = diag(D);  % diag函数用于得到一个矩阵的主对角线元素值(返回的是列向量)</span><br><span class="line">lambda = lambda(end:-1:1);  % 因为lambda向量是从小大到排序的，我们将其调个头</span><br><span class="line">contribution_rate = lambda / sum(lambda);  % 计算贡献率</span><br><span class="line">cum_contribution_rate = cumsum(lambda)/ sum(lambda);   % 计算累计贡献率  cumsum是求累加值的函数</span><br><span class="line">disp(&#x27;特征值为：&#x27;)</span><br><span class="line">disp(lambda&#x27;)  % 转置为行向量，方便展示</span><br><span class="line">disp(&#x27;贡献率为：&#x27;)</span><br><span class="line">disp(contribution_rate&#x27;)</span><br><span class="line">disp(&#x27;累计贡献率为：&#x27;)</span><br><span class="line">disp(cum_contribution_rate&#x27;)</span><br><span class="line">disp(&#x27;与特征值对应的特征向量矩阵为：&#x27;)</span><br><span class="line">% 注意：这里的特征向量要和特征值一一对应，之前特征值相当于颠倒过来了，因此特征向量的各列需要颠倒过来</span><br><span class="line">%  rot90函数可以使一个矩阵逆时针旋转90度，然后再转置，就可以实现将矩阵的列颠倒的效果</span><br><span class="line">V=rot90(V)&#x27;;</span><br><span class="line">disp(V)</span><br><span class="line"></span><br><span class="line">%% 计算我们所需要的主成分的值</span><br><span class="line">m =input(&#x27;请输入需要保存的主成分的个数:  &#x27;);</span><br><span class="line">F = zeros(n,m);  %初始化保存主成分的矩阵（每一列是一个主成分）</span><br><span class="line">for i = 1:m</span><br><span class="line">    ai = V(:,i)&#x27;;   % 将第i个特征向量取出，并转置为行向量</span><br><span class="line">    Ai = repmat(ai,n,1);   % 将这个行向量重复n次，构成一个n*p的矩阵</span><br><span class="line">    F(:, i) = sum(Ai .* X, 2);  % 注意，对标准化的数据求了权重后要计算每一行的和</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% (1)主成分聚类 ：将主成分指标所在的F矩阵复制到Excel表格，然后再用Spss进行聚类</span><br><span class="line">% 在Excel第一行输入指标名称（F1,F2, ..., Fm）</span><br><span class="line">% 双击Matlab工作区的F,进入变量编辑中，然后复制里面的数据到Excel表格</span><br><span class="line">% 导出数据之后，我们后续的分析就可以在Spss中进行。</span><br><span class="line"></span><br><span class="line">%%（2）主成分回归：将x使用主成分得到主成分指标，并将y标准化，接着导出到Excel，然后再使用Stata回归</span><br><span class="line">% Y = zscore(y);  % 一定要将y进行标准化哦~</span><br><span class="line">% 在Excel第一行输入指标名称（Y,F1, F2, ..., Fm）</span><br><span class="line">% 分别双击Matlab工作区的Y和F,进入变量编辑中，然后复制里面的数据到Excel表格</span><br><span class="line">% 导出数据之后，我们后续的分析就可以在Stata中进行。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="灰色关联分析"><a href="#灰色关联分析" class="headerlink" title="灰色关联分析"></a>灰色关联分析</h1><p>数理统计中的回归分析、方差分析、主成分分析等都是用来进行系统分析的方法。这些方法都有下述不足之处:</p><ol><li>要求有大量数据,数据量少就难以找出统计规律。</li><li>要求样本服从某个典型的概率分布,要求各因素数据与系统特征数据之间呈线性关系且各因素之间彼此无关,这种要求往往难以满足。</li><li>可能出现量化结果与定性分析结果不符的现象,导致系统的关系和规律遭到歪曲和颠倒。</li></ol><p>对一个抽象的系统或现象进行分析,首先要选准反映系统行为特征的数据序列,称为找系统行为的映射量,用映射量来间接地表征系统行为。例如,用国民平均接受教育的年数来反映教育发达程度,用刑事案件的发案率来反映社会治安面貌和社会秩序,用医院挂号次数来反映国民的健康水平等。有了系统行为特征数据和相关因素的数据,即可作出各个序列的图形,从直观上进行分析。</p><p>灰色关联分析的基本思想是根据序列曲线几何形状的相似程度来判断其联系是否紧密。曲线越接近,相应序列之间的关联度就越大,反之就越小。</p><p>这不是传统的数理统计方法，但是可以用。</p><p>分析代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%% 灰色关联分析用于系统分析</span><br><span class="line">clear;clc</span><br><span class="line">load gdp.mat  % 导入数据 一个6*4的矩阵</span><br><span class="line">  </span><br><span class="line">Mean = mean(gdp);  % 求出每一列的均值以供后续的数据预处理</span><br><span class="line">gdp = gdp ./ repmat(Mean,size(gdp,1),1);  %size(gdp,1)=6, repmat(Mean,6,1)可以将矩阵进行复制，复制为和gdp同等大小，然后使用点除（对应元素相除），这</span><br><span class="line">disp(&#x27;预处理后的矩阵为：&#x27;); disp(gdp)</span><br><span class="line">Y = gdp(:,1);  % 母序列</span><br><span class="line">X = gdp(:,2:end); % 子序列</span><br><span class="line">absX0_Xi = abs(X - repmat(Y,1,size(X,2)))  % 计算|X0-Xi|矩阵(在这里我们把X0定义为了Y)</span><br><span class="line">a = min(min(absX0_Xi))    % 计算两级最小差a</span><br><span class="line">b = max(max(absX0_Xi))  % 计算两级最大差b</span><br><span class="line">rho = 0.5; % 分辨系数取0.5</span><br><span class="line">gamma = (a+rho*b) ./ (absX0_Xi  + rho*b)  % 计算子序列中各个指标与母序列的关联系数</span><br><span class="line">disp(&#x27;子序列中各个指标的灰色关联度分别为：&#x27;)</span><br><span class="line">disp(mean(gamma))</span><br></pre></td></tr></table></figure><p>评价代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">%% 灰色关联分析用于综合评价模型例</span><br><span class="line">clear;clc</span><br><span class="line">load data_water_quality.mat</span><br><span class="line">  </span><br><span class="line">%%  判断是否需要正向化</span><br><span class="line">[n,m] = size(X);</span><br><span class="line">disp([&#x27;共有&#x27; num2str(n) &#x27;个评价对象, &#x27; num2str(m) &#x27;个评价指标&#x27;])</span><br><span class="line">Judge = input([&#x27;这&#x27; num2str(m) &#x27;个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  &#x27;]);   %1</span><br><span class="line">  </span><br><span class="line">if Judge == 1</span><br><span class="line">    Position = input(&#x27;请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： &#x27;); %[2,3,4]</span><br><span class="line">    disp(&#x27;请输入需要处理的这些列的指  标类型（1：极小型， 2：中间型， 3：区间型） &#x27;)</span><br><span class="line">    Type = input(&#x27;例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  &#x27;); %[2,1,3]</span><br><span class="line">    % 注意，Position和Type是两个同维度的行向量</span><br><span class="line">    for i = 1 : size(Position,2)  %这里需要对这些列分别处理，因此我们需要知道一共要处理的次数，即循环的次数</span><br><span class="line">        X(:,Position(i)) = Positivization(X(:,Position(i)),Type(i),Position(i));</span><br><span class="line">    % Positivization是我们自己定义的函数，其作用是进行正向化，其一共接收三个参数</span><br><span class="line">    end</span><br><span class="line">    disp(&#x27;正向化后的矩阵 X =  &#x27;)</span><br><span class="line">    disp(X)</span><br><span class="line">end</span><br><span class="line">  </span><br><span class="line">%% 对正向化后的矩阵进行预处理</span><br><span class="line">Mean = mean(X);  % 求出每一列的均值以供后续的数据预处理</span><br><span class="line">Z = X ./ repmat(Mean,size(X,1),1);  </span><br><span class="line">disp(&#x27;预处理后的矩阵为：&#x27;); disp(Z)</span><br><span class="line">  </span><br><span class="line">%% 构造母序列和子序列</span><br><span class="line">Y = max(Z,[],2);  % 母序列为虚拟的，用每一行的最大值构成的列向量表示母序列</span><br><span class="line">X = Z; % 子序列就是预处理后的数据矩阵</span><br><span class="line">  </span><br><span class="line">%% 计算得分</span><br><span class="line">absX0_Xi = abs(X - repmat(Y,1,size(X,2)))  % 计算|X0-Xi|矩阵</span><br><span class="line">a = min(min(absX0_Xi))    % 计算两级最小差a</span><br><span class="line">b = max(max(absX0_Xi))  % 计算两级最大差b</span><br><span class="line">rho = 0.5; % 分辨系数取0.5</span><br><span class="line">gamma = (a+rho*b) ./ (absX0_Xi  + rho*b)  % 计算子序列中各个指标与母序列的关联系数</span><br><span class="line">weight = mean(gamma) / sum(mean(gamma));  % 利用子序列中各个指标的灰色关联度计算权重</span><br><span class="line">score = sum(X .* repmat(weight,size(X,1),1),2);   % 未归一化的得分</span><br><span class="line">stand_S = score / sum(score);   % 归一化后的得分</span><br><span class="line">[sorted_S,index] = sort(stand_S ,&#x27;descend&#x27;) % 进行排序</span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规划类模型相关</title>
      <link href="/2024/01/24/2%E8%A7%84%E5%88%92%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2024/01/24/2%E8%A7%84%E5%88%92%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>数学规划是运筹学的一个分支，研究在给定的条件下（约束条件），如何按照某一标准（目标函数）寻求计划的最佳方案。也就是求目标函数在一定约束条件下的极值的问题。不同类型的规划问题需要采用不同的建模方法和求解算法，因此在解决具体问题时需要根据问题特点选择合适的方法进行建模和求解。</p><p>数学规划问题通常可以分为以下几类：</p><ul><li><p>线性规划（Linear Programming, LP）：目标函数和约束条件均为线性的规划问题。例如资源分配、生产计划、运输优化等。</p></li><li><p>非线性规划（Nonlinear Programming, NLP）：目标函数和&#x2F;或约束条件包含非线性部分的规划问题。求解相对复杂，涉及到局部最优解和全局最优解的搜索。</p></li><li><p>整数规划（Integer Programming，IP）：在线性规划的基础上，自变量需要取整数值的优化问题。</p></li><li><p>二次规划（Quadratic Programming，QP）：目标函数为二次函数，约束条件为线性函数的优化问题。</p></li></ul><p>我们主要讨论泛用性较高的<strong>线性规划</strong>和<strong>非线性规划</strong>。</p><h1 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h1><p>要解决线性规划问题，首先需要定义决策变量、目标函数和约束条件。然后，可以使用MATLAB中的优化函数对问题进行求解。</p><p>举一个例子,要求解的线性规划问题的目标是最大化目标函数 f &#x3D; -5a - 4b - 6c，其中a、b、c是决策变量。</p><p>约束条件为：</p><blockquote><p>a - b + c ≤ 20<br>3a + 2b + 4c ≤ 42<br>3a + 2b ≤ 30<br>a、b、c ≥ 0</p></blockquote><p>为了解决这个问题，我们将调用 linprog 函数进行线性规划求解，代码是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x, fval] = linprog(c, A, b, Aeq, beq, lb, ub)</span><br></pre></td></tr></table></figure><p>其中的参数含义如下：</p><ul><li><p>c：目标函数的系数向量。它是一个列向量，表示目标函数中每个决策变量的系数。</p></li><li><p>A：不等式约束条件左侧的系数矩阵。它是一个矩阵，每一行对应一个不等式约束条件，并且每一列对应一个决策变量的系数。</p></li><li><p>b：不等式约束条件右侧的常数向量。它是一个列向量，表示不等式约束条件的右侧值。</p></li><li><p>Aeq：等式约束条件左侧的系数矩阵。它是一个矩阵，每一行对应一个等式约束条件，并且每一列对应一个决策变量的系数。</p></li><li><p>beq：等式约束条件右侧的常数向量。它是一个列向量，表示等式约束条件的右侧值。</p></li><li><p>lb：决策变量的下界向量。它是一个列向量，表示每个决策变量的下限值。如果某个决策变量没有下限，则对应的值设为 -Inf，如果不写就是没有。</p></li><li><p>ub：决策变量的上界向量。它是一个列向量，表示每个决策变量的上限值。如果某个决策变量没有上限，则对应的值设为 Inf,如果不写就是没有。</p></li></ul><p>要使用这个代码，我们就需要把问题表示成线性规划问题的标准型。在MATLAB中，线性规划问题的标准型指的是形如下面形式的线性规划问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minimize c^T * x</span><br><span class="line">subject to:</span><br><span class="line">    A * x &lt;= b</span><br><span class="line">    Aeq * x = beq</span><br><span class="line">    lb &lt;= x &lt;= ub</span><br></pre></td></tr></table></figure><p>这里都是“小于”形式，包括求解也是求最小值。如果有“大于”的形式出现，则等式两边同时加一个负号就可以了。</p><p>如果约束条件是大于，在约束条件里加上负号。</p><p>如果整个问题求的是最大值，我们先在c（目标函数的系数向量）里把目标函数的系数全部变号，再把最后求解的值变号即可。也就是说，**max f(x) &#x3D; min -f(x)**。</p><p>解决上述例子的代码是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = [5 4 6]&#x27;;  % 加单引号表示转置，这里需要变号</span><br><span class="line"></span><br><span class="line">A = [1 -1 1;</span><br><span class="line">     3 2 4;</span><br><span class="line">     3 2 0];</span><br><span class="line">b = [20 42 30]&#x27;;   </span><br><span class="line">lb = [0 0 0]&#x27;; </span><br><span class="line">[x fval] = linprog(c, A, b, [], [], lb) </span><br><span class="line">fval = -fval % 要取负号，原来是求最大值，我们添加负号变成了max f(x) = min -f(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子随手改的，答案全是0。</p><p>部分特殊情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%% 多个解的情况</span><br><span class="line">% 例如 ： min z = x1 + x2   s.t.  x1 + x2 &gt;= 10</span><br><span class="line">c = [1 1]&#x27;;   </span><br><span class="line">A = [-1 -1];</span><br><span class="line">b = -10;</span><br><span class="line">[x fval] = linprog(c, A, b)   % Aeq, beq, lb和ub我们都没写，意味着没有等式约束和上下界约束</span><br><span class="line">% x有多个解时，Matlab会给我们返回其中的一个解</span><br><span class="line"></span><br><span class="line">%% 不存在解的情况</span><br><span class="line">% 例如 ： min z = x1 + x2   s.t.  x1 + x2 = 10 、 x1 + 2*x2 &lt;= 8、 x1 &gt;=0 ，x2 &gt;=0 </span><br><span class="line">c = [1 1]&#x27;; </span><br><span class="line">A = [1 2];</span><br><span class="line">b = 8;</span><br><span class="line">Aeq = [1 1];</span><br><span class="line">beq = 10;</span><br><span class="line">lb = [0 0]&#x27;;</span><br><span class="line">[x fval] = linprog(c, A, b, Aeq, beq, lb)  % Linprog stopped because no point satisfies the constraints.（没有任何一个点满足约束条件）</span><br></pre></td></tr></table></figure><h1 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h1><p>很显而易见的是，非线性规划是指目标函数或约束条件中包含非线性项的优化问题。也就是说，在非线性规划中，目标函数和约束条件可以是非线性的，即涉及到变量的非线性函数、乘积、幂等运算或其他非线性形式。</p><p>举一个例子,要求解的非线性规划问题的目标是最大化目标函数f(x) &#x3D; x1^2 + x2^2 - x1*x2 - 2x1 - 5x2。</p><p>约束条件为：</p><blockquote><p>-(x1-1)^2 + x2 &gt;&#x3D; 0<br>2x1 - 3x2 + 6 &gt;&#x3D; 0</p></blockquote><p>这两个不等式分别表示了在定义域内 x1 和 x2的取值范围限制。</p><p>同样的，为了求解非线性规划问题，我们也需要把问题表示成非线性规划问题的标准型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minimize c^T * x</span><br><span class="line">subject to:</span><br><span class="line">    A * x &lt;= b , Aeq * x = beq; (线性不等式约束)</span><br><span class="line">    c(x) &lt;= 0 , ceq(x) = 0; （非线性不等式约束）</span><br><span class="line">    lb &lt;= x &lt;= ub;（上界，下界）</span><br></pre></td></tr></table></figure><p>对于非线性规划，我们使用fmincon 函数，标准格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x, fval, exitflag, output] = fmincon(fun, x0, A, b, Aeq, beq, lb, ub, nonlcon, options)</span><br></pre></td></tr></table></figure><p>其中的参数含义如下：</p><ul><li><p>fun：目标函数，该函数接受一个自变量向量作为输入，并返回一个标量作为输出。</p></li><li><p>x0：自变量的初始值，是一个向量。与线性规划相比，再非线性规划问题里，对它的选取非常主要，因为非线性规划的算法求解是一个局部最优值。</p></li><li><p>A 和 b：不等式约束的系数矩阵和右侧系数。A 是一个 m×n的矩阵，b 是一个 m×1的向量，表示 m 个不等式约束的系数和右侧限制。</p></li><li><p>Aeq 和 beq：等式约束的系数矩阵和右侧系数。Aeq 是一个 p×n的矩阵，beq 是一个 p×1的向量，表示 p 个等式约束的系数和右侧限制。</p></li><li><p>lb 和 ub：自变量的下界和上界，分别是 n×1的向量。若没有下界或上界，则使用 -inf 或 inf 表示。</p></li><li><p>nonlcon：非线性约束函数，该函数接受一个自变量向量作为输入，并返回一个向量作为输出，表示非线性约束的结果。</p></li><li><p>options：优化选项，可以使用 optimoptions 函数创建一个选项对象，也可以使用 optimset 函数创建一个选项结构体。</p></li></ul><p>需要注意，这里的fun和nonlcon是需要自己写成函数形式的。</p><p>对于fun,可以任意取名，到时候会被fmincon函数调用, 它实际上就是目标函数,输入值x实际上就是决策变量，由x1和x2组成的向量，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function f = fun1(x)</span><br><span class="line">    f = -x(1)^2-x(2)^2 +x(1)*x(2)+2*x(1)+5*x(2) ; </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里的f实际上就是目标函数，函数的返回值也是f。fun1是函数名称，保存的m文件和函数名称得一致，也要为fun1.m。</p><p>对于nonlcon，和fun类似，输入值x实际上就是决策变量，由x1和x2组成的一个向量。返回值有两个，一个是非线性不等式约束c，一个是非线性等式约束ceq。nonlfun1是函数名称，到时候会被fmincon函数调用。保存的m文件和函数名称得一致，也要为nonlfun1.m</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function [c,ceq] = nonlfun1(x)</span><br><span class="line">   c = [(x(1)-1)^2-x(2)];   %x1 写成 x(1)</span><br><span class="line">   ceq = [];  % 不存在非线性等式约束，所以用[]表示</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>现在还有一个问题，就是初始值的选择。初始值指的是优化算法开始搜索的起点，这个起点可以是一个参数向量、一组变量的取值，或者是一个解空间中的初始点。优化算法会根据这个初始值开始搜索最优解或局部最优解。如果选择的初始值不好，可能会导致优化算法无法在可接受的时间内找到全局最优解。在更极端的情况下，选择不当的初始值可能导致优化算法陷入无限循环或者发散。</p><p>在这里，我们使用蒙特卡洛算法处理。完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">n=10000000; %生成的随机数组数</span><br><span class="line">x1=unifrnd(-100,100,n,1);  % 生成在[-100,100]之间均匀分布的随机数组成的n行1列的向量构成x1</span><br><span class="line">x2=unifrnd(-100,100,n,1);  % 生成在[-100,100]之间均匀分布的随机数组成的n行1列的向量构成x2，这两步具体情况具体分析</span><br><span class="line">fmin=+inf; % 初始化函数f的最小值为正无穷,后续再更新</span><br><span class="line">for i=1:n</span><br><span class="line">    x = [x1(i), x2(i)];  %构造x向量, 这里千万别写成了：x =[x1, x2]</span><br><span class="line">    if ((x(1)-1)^2-x(2)&lt;=0)  &amp; (-2*x(1)+3*x(2)-6 &lt;= 0)     % 判断是否满足约束条件</span><br><span class="line">        result = -x(1)^2-x(2)^2 +x(1)*x(2)+2*x(1)+5*x(2) ;  % 如果满足条件，就计算函数值</span><br><span class="line">        if  result  &lt; fmin  </span><br><span class="line">            fmin = result;  </span><br><span class="line">            x0 = x;  % 更新</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">disp(&#x27;蒙特卡罗选取的初始值为：&#x27;); disp(x0)</span><br><span class="line"></span><br><span class="line">A = [-2 3]; b = 6;</span><br><span class="line">[x,fval] = fmincon(@fun1,x0,A,b,[],[],[],[],@nonlfun1)</span><br><span class="line">fval = -fval  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插值、拟合相关</title>
      <link href="/2024/01/22/2%E6%8F%92%E5%80%BC%E3%80%81%E6%8B%9F%E5%90%88%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/01/22/2%E6%8F%92%E5%80%BC%E3%80%81%E6%8B%9F%E5%90%88%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><h2 id="一维数据插值"><a href="#一维数据插值" class="headerlink" title="一维数据插值"></a>一维数据插值</h2><p>当我们有一些离散的数据点，但需要在这些数据点之间进行估计或预测时，插值法就可以帮助我们。它能够通过已知的数据点来填补空缺的数据点，使我们能够得到更完整的数据。想象一下你手上有几个散落的点，但你想要画一条平滑的曲线来穿过这些点。插值法就像是使用橡皮筋，你把它放在这些点上，然后让它自然地弯曲，最终形成一条平滑的曲线。这条曲线能够逼近原始数据点，同时也能够在数据点之间进行预测。插值法就是通过已知的数据点来预测或填补未知的数据点，让我们能够获得更完整、更平滑的数据集。</p><p>插值方法有很多种，下面列举几种常见的插值方法：</p><ul><li><strong>线性插值</strong>：线性插值是最简单的插值方法之一。它假设两个数据点之间的变化是线性的，并通过连接这些数据点来估计中间的未知数据点。</li><li><strong>分段线性插值</strong>：将数据点划分为若干段，每段使用线性插值来估计未知数据点。</li><li><strong>拉格朗日插值</strong>：使用拉格朗日多项式来逼近数据点。它通过在每个数据点上构建一个多项式，并将这些多项式相加来获得插值函数。拉格朗日插值可以准确地经过所有的已知数据点，但在计算复杂度上可能比较高。</li></ul><p>实际使用中，存在一个问题。当使用一些简单的插值方法（比如上述的线性插值或拉格朗日插值）时，如果函数在某些地方很快地变化，或者有剧烈的震荡，那么插值结果可能不准确，还会出现明显的振荡效应。</p><p>这种现象被称为<strong>龙格现象</strong>，是插值法存在的主要问题。举例说明，假设我们想要使用插值方法来逼近一个函数，在两个已知的数据点之间进行插值，如果这个函数在两个数据点之间有一个非常陡峭的峰或谷，那么直接使用简单的插值方法很难直接预测，可能会导致插值结果出现误差和振荡效应。这种情况在越高次的插值中越容易出现。存在两个问题：插值多项式次数越高，精度未必显著提升，而误差可能显著增大。</p><p>可以采用分段低次插值。将整个函数分成若干小区间，每个区间内采用低次插值方法（比如线性插值或二次插值）来逼近函数，可以在一定程度上避免高次插值带来的龙格现象。但是，这一方法也不能全面反映被插入函数的特征。解决方案是埃尔米特插值，它保证该点的导数也相等，模拟了形态特征。</p><p>综合多种方案的优缺点，我们一般采用以下方法：</p><ul><li><strong>分段三次埃尔米特插值</strong> ：不仅考虑数据点之间的线性变化，还考虑了斜率的变化。通过使用三次多项式来逼近每一段数据，可以得到更平滑的插值结果。</li><li><strong>三次样条插值</strong>： 更好的光滑插值方法。它将数据点之间的曲线定义为一系列的三次多项式段，并要求这些段在连接点上具有连续的一阶和二阶导数。这样可以得到更平滑、更自然的插值曲线。</li></ul><p>至于具体的数学证明，很显然，<strong>我是完全不会的</strong>。matlab内置了相关函数，我们可以直接调用。</p><p>这里我们举一个例子，对正弦函数进行分段三次埃尔米特插值和三次样条插值，并绘制出原始数据和插值结果的曲线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">% 分段三次埃尔米特插值</span><br><span class="line">x = -pi:pi; y = sin(x);</span><br><span class="line">new_x = -pi:0.1:pi;</span><br><span class="line">p = pchip(x,y,new_x);</span><br><span class="line">figure(1); % 在同一个脚本文件里面，要想画多个图，需要给每个图编号</span><br><span class="line">plot(x, y, &#x27;o&#x27;, new_x, p, &#x27;r-&#x27;)</span><br><span class="line">  </span><br><span class="line">% plot函数用法:</span><br><span class="line">% plot(x1,y1,x2,y2)</span><br><span class="line">% 线方式： - 实线  :点线    -. 虚点    - - 波折线</span><br><span class="line">% 点方式： . 圆点  +加号  * 星号  x x形  o 小圆</span><br><span class="line">% 颜色： y黄； r红； g绿； b蓝； w白； k黑； m紫； c青</span><br><span class="line">  </span><br><span class="line">% 三次样条插值和分段三次埃尔米特插值的对比</span><br><span class="line">x = -pi:pi;</span><br><span class="line">y = sin(x);</span><br><span class="line">new_x = -pi:0.1:pi;</span><br><span class="line">p1 = pchip(x,y,new_x);   %分段三次埃尔米特插值</span><br><span class="line">p2 = spline(x,y,new_x);  %三次样条插值</span><br><span class="line">figure(2);</span><br><span class="line">plot(x,y,&#x27;o&#x27;,new_x,p1,&#x27;r-&#x27;,new_x,p2,&#x27;b-&#x27;)</span><br><span class="line">legend(&#x27;样本点&#x27;,&#x27;三次埃尔米特插值&#x27;,&#x27;三次样条插值&#x27;,&#x27;Location&#x27;,&#x27;SouthEast&#x27;)   %标注显示在东南方向</span><br><span class="line">% LEGEND(string1,string2,string3, …)</span><br><span class="line">% 分别将字符串1、字符串2、字符串3……标注到图中，每个字符串对应的图标为画图时的图标。</span><br><span class="line">% ‘Location’用来指定标注显示的位置</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  所以我们现在的任务是整理数据，把有用的部分从完整的数据集里取出，单独组合在一起，这样有利于更方便地训练我们的模型。</p><h2 id="n维数据插值"><a href="#n维数据插值" class="headerlink" title="n维数据插值"></a>n维数据插值</h2><p>上面是一维数据的插值，同样的道理，我们也可以对n维数据进行处理。</p><p>在一维插值中，我们只有一个自变量和一个因变量，例如在一条直线上对数据进行插值。而在二维插值中，我们有两个自变量和一个因变量，例如在一个平面上对数据进行插值。而在更高维度的情况下，我们可能有更多的自变量。在多维数据中，我们需要使用多个坐标轴来描述每个数据点的位置。例如，在三维数据中，我们可以使用(x, y, z)来表示每个数据点的位置，其中x、y、z分别表示沿着三个不同方向的坐标值。通过在不同方向上进行插值计算，我们可以推断出缺失数据点的值，进而对整个多维空间进行预测或填充。</p><p>对于n维数据插值，优先使用三次样条插值。我也不知道怎么证明，反正用这个效果就是好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% n维数据的插值</span><br><span class="line">x = -pi:pi; y = sin(x);</span><br><span class="line">new_x = -pi:0.1:pi;</span><br><span class="line">p = interpn (x, y, new_x, &#x27;spline&#x27;);</span><br><span class="line">% 等价于 p = spline(x, y, new_x)，优先使用三次样条插值。</span><br><span class="line">figure(3);</span><br><span class="line">plot(x, y, &#x27;o&#x27;, new_x, p, &#x27;r-&#x27;)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>插值法一般不用于预测。如果真的要用它预测，你多半也就完蛋了。</p><h1 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h1><h2 id="拟合的实现"><a href="#拟合的实现" class="headerlink" title="拟合的实现"></a>拟合的实现</h2><p>拟合的思想就像是给你一些散落的数据点，你需要找到一条曲线或者函数，尽可能地贴近这些数据点，同时还要能够反映出数据的整体趋势。</p><p>可以想象一下，面前有一堆螺丝钉，你想要知道它们的整体形状。拟合就像是你拿一个橡皮筋，和插值不同，我们不直接放在螺丝钉上，而是使得它能够尽量贴合这些螺丝钉的位置。你会不断调整线的形状，直到你觉得它与螺丝钉的位置最接近，并且能够反映出整体的形状。如果使用不同的函数形式来进行拟合。通过寻找最适合的函数形式和参数，我们就可以找到一个拟合曲线或函数，使其与已知数据点尽可能接近，并且能够描述数据的总体趋势。尽管不能保证它通过每一个点，但是误差足够小就可以满足要求，得出一个确定的曲线。即使有一些数据点没有给出，也可以根据拟合曲线来预测这些缺失的数据点的位置。</p><p>因此我们可以认为，当数据点比较多、分布比较连续，且需要反映数据整体趋势时，拟合是比较合适的选择。</p><p>下面给出代码，使用最小二乘法找出x与y之间的拟合曲线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">load  data1</span><br><span class="line">plot(x,y,&#x27;o&#x27;)</span><br><span class="line">% 给x和y轴加上标签</span><br><span class="line">xlabel(&#x27;x的值&#x27;)</span><br><span class="line">ylabel(&#x27;y的值&#x27;)</span><br><span class="line">n = size(x,1);</span><br><span class="line">k = (n*sum(x.*y)-sum(x)*sum(y))/(n*sum(x.*x)-sum(x)*sum(x))</span><br><span class="line">b = (sum(x.*x)*sum(y)-sum(x)*sum(x.*y))/(n*sum(x.*x)-sum(x)*sum(x)) %最小二乘法</span><br><span class="line">hold on % 继续在之前的图形上来画图形</span><br><span class="line">grid on % 显示网格线</span><br><span class="line"></span><br><span class="line">% 画出y=kx+b的函数图像 plot(x,y)</span><br><span class="line">% 传统的画法：模拟生成x和y的序列，比如要画出[0,5]上的图形</span><br><span class="line"></span><br><span class="line">xx = 2.5: 0.1 :7  % 间隔设置的越小画出来的图形越准确</span><br><span class="line">yy = k * xx + b  % k和b都是上面已经算出来的已知值</span><br><span class="line">plot(xx,yy,&#x27;-&#x27;)</span><br><span class="line"></span><br><span class="line">% 匿名函数的基本用法。</span><br><span class="line">% handle = @(arglist) anonymous_function</span><br><span class="line">% 其中handle为调用匿名函数时使用的名字。</span><br><span class="line">% arglist为匿名函数的输入参数，可以是一个，也可以是多个，用逗号分隔。</span><br><span class="line">% anonymous_function为匿名函数的表达式。</span><br><span class="line">%  z=@(x,y) x^2+y^2; </span><br><span class="line">%  z(1,2) </span><br><span class="line">% % ans =  5</span><br><span class="line">% fplot(f,xinterval) 将匿名函数f在指定区间xinterval绘图。xinterval =  [xmin xmax] 表示定义域的范围</span><br><span class="line"></span><br><span class="line">f=@(x) k*x + b;</span><br><span class="line">fplot(f,[2.5,7]);</span><br><span class="line">legend(&#x27;样本数据&#x27;,&#x27;拟合函数&#x27;,&#x27;location&#x27;,&#x27;SouthEast&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="评价拟合质量"><a href="#评价拟合质量" class="headerlink" title="评价拟合质量"></a>评价拟合质量</h2><p>拟合优度 R^2，也称为决定系数，是用来衡量回归模型对观测数据的解释能力的统计指标，只适用于线性函数。它的取值范围在0到1之间，越接近1，说明误差平方和越接近0，也就意味着拟合效果越好。</p><p>R^2的计算方式是通过回归平方和 (SSR) 除以总体平方和 (SST) 得到的。具体公式为：R^2 &#x3D; SSR &#x2F; SST。</p><p>回归平方和（SSR）表示因变量的变异程度中可以被回归模型解释的部分的总和。计算方式是将每个预测值与因变量均值的差的平方求和。</p><p>误差平方和（SSE）表示因变量的变异程度中不能被回归模型解释的部分的总和。计算方式是将每个观测值与对应的预测值的差的平方求和，是另外一个重要指标，越小越好。</p><p>总体平方和（SST）表示因变量（被解释变量）的总方差。计算方式是将每个观测值与因变量均值的差的平方求和。</p><p>具体原理不赘述，只需要套公式实现代码就可以了。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y_hat = k*x+b; % y的拟合值</span><br><span class="line">SSR = sum((y_hat-mean(y)).^2)  % 回归平方和</span><br><span class="line">SSE = sum((y_hat-y).^2) % 误差平方和</span><br><span class="line">SST = sum((y-mean(y)).^2) % 总体平方和</span><br><span class="line">SST-SSE-SSR   % 5.6843e-14  =   5.6843*10^-14   matlab浮点数计算的一个误差</span><br><span class="line">R_2 = SSR / SST</span><br></pre></td></tr></table></figure><h2 id="曲线拟合工具箱"><a href="#曲线拟合工具箱" class="headerlink" title="曲线拟合工具箱"></a>曲线拟合工具箱</h2><p>进入曲线拟合工具箱界面“Curve Fitting tool”</p><ol><li>点击“Data”按钮，弹出“Data”窗口；</li><li>利用X data和Y data的下拉菜单读入数据x,y，可修改数据集名“Data set name”，然后点击“Create data set”按钮，退出“Data”窗口，返回工具箱界面，这时会自动画出数据集的曲线图；</li><li>点击“Fitting”按钮，弹出“Fitting”窗口；</li><li>点击“New fit”按钮，可修改拟合项目名称“Fit name”，通过“Data set”下拉菜单选择数据集，然后通过下拉菜单“Type of fit”选择拟合曲线的类型;</li><li>类型设置完成后，点击“Apply”按钮，就可以在Results框中得到拟合结果。</li></ol><p>工具箱提供的拟合类型有：</p><ul><li>Custom Equations：用户自定义的函数类型</li><li>Exponential：指数逼近，有2种类型， a<em>exp(b</em>x) 、 a<em>exp(b</em>x) + c<em>exp(d</em>x)</li><li>Fourier：傅立叶逼近，有7种类型，基础型是 a0 + a1<em>cos(x</em>w) + b1<em>sin(x</em>w)</li><li>Gaussian：高斯逼近，有8种类型，基础型是 a1*exp(-((x-b1)&#x2F;c1)^2)</li><li>Interpolant：插值逼近，有4种类型，不赘述。</li><li>Polynomial：多形式逼近，有9种类型。</li><li>Power：幂逼近，有2种类型，a<em>x^b 、a</em>x^b + c</li><li>Rational：有理数逼近</li><li>Smoothing Spline：平滑逼近</li><li>Sum of Sin Functions：正弦曲线逼近，有8种类型，基础型是 a1<em>sin(b1</em>x + c1)</li><li>Weibull：只有一种，a<em>b</em>x^(b-1)<em>exp(-a</em>x^b)</li></ul><p>操作结束后，会在工具箱窗口中显示拟合曲线。如果拟合效果不好，还可以在“Fitting”窗口点击“New fit”按钮，按照上述步骤4、5进行新的拟合。</p><p>左上角“文件”，选择“generate code”导出代码。这里给出样例，数据是乱编的。我这辈子都不想再看见Fourier了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">clear;clc</span><br><span class="line">year = 1790:10:2000;</span><br><span class="line">population = [3.9,5.3,7.2,9.6,12.9,17.1,23.2,31.4,38.6,50.2,62.9,76.0,92.0,106.5,123.2,131.7,150.7,179.3,204.0,226.5,251.4,281.4];</span><br><span class="line">plot(year,population,&#x27;o&#x27;)</span><br><span class="line">  </span><br><span class="line">[fitresult, gof] = createFit(year, population) % 这个就是从工具箱导出的函数</span><br><span class="line">  </span><br><span class="line">t = 2001:2030;</span><br><span class="line">xm = 342.4;  </span><br><span class="line">r =  0.02735; % 这些数据是工具箱拟合后得到的</span><br><span class="line">predictions = xm./(1+(xm./3.9-1).*exp(-r.*(t-1790)));  % 计算预测值（注意这里要写成点乘和点除,这样可以保证按照对应元素进行计算）</span><br><span class="line">figure(3)</span><br><span class="line">plot(year,population,&#x27;o&#x27;,t,predictions,&#x27;.&#x27;)  % 绘制预测结果图</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在每一个瞬息</title>
      <link href="/2023/12/26/%E5%9C%A8%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%9E%AC%E6%81%AF/"/>
      <url>/2023/12/26/%E5%9C%A8%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%9E%AC%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><em>这些承载着鸡零狗碎的文字<br>和我本人是一样的笨<br>用力、无趣，留不住乍现的奇迹<br>情绪鼓荡，战战兢兢起起落落<br>此行的终点是大海<br>我是一条船</em><br><br><br></p><p>周五下午就没课了。迈过吵吵嚷嚷的大街，我缩回埋在地平面之下的宿舍。坐在不太宽敞的窗前，看着刚刚落日但还没完全黑下去的天，拿出剩下的半瓶尊美醇，一口一口，可以喝到天完全黑下去。<br>这样，酒精和心情，全都看不清分不清。</p><p>天气转凉，阳光越来越像棉絮，盖在身上真的很暖和。这种天气，非常适合躲在被窝里做很长很长的白日梦。暖融融的梦里，未来的一切不仅美好明亮，还唾手可得。这样很容易让人忘记，其实自己连咬咬牙一个鲤鱼打挺钻出被窝的能力都没有。</p><p>生活没走上正轨，要不卧轨吧。</p><p>彷徨的时候，整个生活单纯是在高位截瘫。人只会翻来覆去地想，谁来帮帮我，有谁可以开辟出一条新的道路，带着自己义无反顾地逃离奄奄一息的年关岁末。</p><p>因为脚伤了走不动路，我请了整整一天的假，睡到中午才起床，躲在宿舍里打开电脑，开始猛猛刷题。</p><p>写完一道力扣题解，我偶然跟着评论区里前辈的脚步，第一次打开了Codeforces，接着第一次知道算法到底意味着什么，然后第一次知道rating分是什么东西。</p><p>在网页加载完毕的那一刻，我突然回头四顾，大伙都上课去了，宿舍安静得不像话，我自己呼吸的声音仿佛某种神谕，一种感觉紧跟着强烈地爆发——我没来由地意识到，这一瞬间，几乎注定会被今后的我无数次回访，好像命运就将要从此处开始汹涌奔流。所有的未来都指回这个似是而非的奇点。而我呢，另一种形式的众目睽睽之下，一无所知，只身打马，糊里糊涂地行走在故事的序幕里。</p><p>我得把这一幕收拾起来，多加点盐，腌起来，等老了，好下酒。</p><p>几秒钟的愣神以后，我开始带着点赌博的性质搜罗起词句，试图拼凑起那一瞬间的印象。可惜照猫画虎，越描越黑。不得不承认，很多最细微的感觉是根本不能诉诸笔端的。文字的质地太坚硬，最飘忽的散文终究是实打实的白纸黑字，哪怕最灵动的诗歌，也不会真的从纸上跳出来，在眼前流转不息。史铁生说过的，一旦变成文字，它们就不是它们了。</p><p>是不是可以认为，存在一个客观事实，生活中真正重要的事情是文字记录不下来的。试图用文字捕捉瞬息间的意义，我总会忍不住细细斟酌字句，想要达到形式上的完美。但要是太注重记录的形式，就会不可避免地经过情绪滤镜的再加工，好像是鲜花着锦烈火烹油，就难免掩盖食材的本味。这就是在忘却那个值得记住的瞬间本身。</p><p>我深知我自己这一支笔太无力，根本笼络不住像烟花一样炸开的灿烂瞬间，最多小心翼翼收集起散落的余烬，以此来纪念那些惊鸿一瞥的灵光乍现。高中那会为了做诗歌阅读，装模作样地看过《二十四诗品》，什么都没看进去，只知道里面写了很多意象，无一例外全是以物喻物。或许是因为文字的笨重定义实在留不住诗意，像是再密的筛网，总也留不住流水。</p><p>没关系的，我告诉自己，今后要允许自己在那样一刻发生时，就愣愣看着它发生，只要知道那一刻我曾亲历，就好。</p><p>猝不及防的热血沸腾，冷不丁的浪子回头，属于我的尤里卡时刻。那样的瞬间，就好像万千灵感凭空流进血液中沸腾。灵感是状态的流露，我一般在半夜听摇滚时最有状态，状态一过，就再也写不出了。灵感是七岁时那只再也抓不到的蝴蝶。我改文章，往往难下笔，越描越枯，不如不改。状态是不可以欺负的，任性之极，就是丑，也丑得有志气。其实我怀疑，这是因为是我的思维从来没有连贯过，总是在害怕这次写下的其实是某次写过的。</p><p>为什么会害怕呢，因为文学性已经一丝一缕地缠绕在了我世界的基本结构上。</p><br/><br/><p>某个哲学观点说，我们不能在同一时刻全部看见一张桌子上的东西，所以我们从来不能看见任何事情的“本来样子”。这个世界，与雨果的巴黎，狄更斯的伦敦，陀思妥耶夫斯基的彼得堡，是同一个吗？<br>很多人都说，我的文字带有某种灵气，这一点我不否认，因为再否认就显得我像个不要脸的大尾巴狼。</p><p>这种所谓的灵气，我认为更多指的是对具体词句的精确把控，清楚文字间细碎隐秘的差别，遣词造句就像中医凭感觉抓药。这大概来自一直纠缠我的文学性。与其说这是一种令人羡艳的天赋，不如说这是某种后天培养的慢性疾病。</p><p>很抱歉地说，我对语文补习班一向秉持嗤之以鼻的态度，特别是作文培训，简直是天方夜谭。直到现在写下这些字句的时候，我仍然认为，对文字的感觉是不能讲给别人听的，那是落地就消失的人参果，置我于江湖骗子的地位，就像试图用科学解释巫。。所以这篇文章大部分也都在鸡同鸭讲，简单来说，是在纯扯淡，我姑妄言之，你姑妄听之。</p><p>写到这，想起初中见过个哥们，大眼镜小眼睛，瘦瘦的，刻板印象里的典型文艺哥，他写的东西非常跳跃，好像那个半人马座燃烧的星门。他喜欢没事夹着本拆了封皮的书乱逛——很多时候，看书是一个特别好的托辞，因为没有人知道你看的到底是校花的贴身高手还是献给阿尔吉侬的花束，于是他们会在心里取两者均值作为你的印象分。他有个怪毛病，这估计是他的最爽时刻top1————见人就问，你看过浮士德吗，你懂浮士德吗。</p><p>我说不懂，不好意思，我看郭敬明来的。</p><p>高中侥幸发表过两篇文章，居然有人拿着篇文章让我指教指教，硬着头皮看了一眼，直接被文采奕奕的词句吓晕，类似于铁马是你冰河也是你。辞藻华丽我看不完，句式整齐我数不尽。我也不好意思装模作样地教训他，说些文以载道之类的东西，说你写成这样还不如买本词典来随机存取呢。归根到底，文学是一种症状各不相同的病症。有人就喜欢特立独行于他人的疏离感，用书本筑起高台，自顾自遗世独立。有人喜欢把玩音韵，遣词造句，愉悦精神，无可厚非。焚琴煮鹤，有辱斯文，其实也并非我愿。但是一味抱着脱离实际的虚空幻想，言之无物，卖弄风雅，就是你的不对。</p><p>于我，文学应该是回家的漫漫长路，而不是营造优越的利刃，更不应该是呻吟的材料。鉴于我已经病出可以指点江山的幻觉来了，我的情况显然更严重。关于我的种种症状，文字本身都比我更有主张，它们总私自给的人生我开出一张张荒唐的处方。每次把那些想到的金句妙句打出来，藏起来，都有一种大病初愈的畅快。</p><p>文学性唯一的好处是，给了我按自己心意来解释世界的权利，这就是说，我可以信手撕裂脑海里的现实，接着任凭春风缘隙来。我能肆意解构身上的一切苦难，消弭一切意义，或者在字里行间扭曲纷至沓来的悲伤，也可以摆弄过往的回忆，在主观上去定义某些必然而隐秘的联系。可是越试图编织现实，就越摧毁情绪的稳定性。就好像一把匕首，越锐也就越脆。很难解释。怎么维持精神状态的稳定呢，答案是多读书，随便什么书都行，从书里找到答案，然后生发出更多更多的问题。现在我才知道这根本就是饮鸩止渴，一旦开始，就再也停不下来。</p><p>这导致我的阅读在任何一个方面，都是完全混乱的。常常是在这一方面发现超出了理解的范围，又去补另一方面，却发现在那一方面又缺少必要的基础。后来，知识结构就变得奇形怪状，面目可憎了。这就好像是以前为了应付考试，强行将一些并不怎么相关的知识串成一条线，老师说就照着技能树一级一级的点，等你点满就毕业了。</p><p>可是读书这件事似乎不是这样的。我文学读的太多，任何文章读一半，就能嗅出行文里可能存在的异味。而读哲学时，又因为历史读的太少，常常抓耳挠腮。从连环画到童话书，从通俗小说到严肃文学，然后头也不回地顺着文史哲的不归路滑下去，我一路读到只能以pdf，txt格式存世的某些不可名状的东西去，这个过程太顺理成章，太自然而然，似乎只是在贯彻一次平常的呼吸。</p><p>很不幸，我已经被文学性侵蚀入骨。我的文字真的来自四面八方，经天纬地。它们是我读过的一切，包括但不限于小说，杂文，课本，漫画，牙膏背面的说明，小卡片上不可名状的文字，总之遍地风流。对于这一点，我自认为很幸运，因为可以很负责任地说，我比大部分人都清楚好文字该是什么样子的，毕竟好的坏的我都读了不少。</p><p>高三，我每天晚上都回家，但是从来没做过作业。都是读点闲书，读到十一点半，每每临睡前，就把好的文字从脑袋里翻出来，抖抖灰，拾掇干净，放在枕头下，期待着什么时候它会撞进梦里。</p><p>王小波在《未来世界》的自序中写道：“在写作时，讨厌受真实逻辑的控制，更讨厌现实生活中索然无味的一面。”他是一个热爱用想象力去创作的作家，而且极端地簇拥有趣。在王小波的作品中可以找到我认为在生命中最可珍视的三个元素：智慧、自由、乐趣。</p><p>闲得发慌的时候，我总是会想起一件事，北野武先生能在有生之年得到一句话，“日本电影的未来就拜托你了”————这是他最所崇拜的黑泽明先生的肯定。</p><p>当然，我现在还不能对王小波说出与北野武先生为黑泽明先生祈祷时说过的类似的话：“如果您在这个世界上还有东西想写的话，就让我代您写吧。您就把我当替身为您写东西好了。”可是我就是想。我想变成他那样的有趣的人。</p><p>高三，每次晚自习倒数第二节课下课，我总会走出教学楼。吹到晚风的时候，我都能看见，一路的灯光，就那么细细簌簌地打落在这栋我栖身三年的小楼上，我想，这个世界或许还有那么点诗意吧。我认为这个世界很需要文学，起码对于我这样的老鼠人来说，是需要的。</p><p>程序员要学会一个道理，不要反复造轮子。所以我要大段地引用王小波的话了，因为我写不出比这更好的。</p><p>“在冥想之中长大以后，我开始喜欢诗。我读过很多诗，其中有一些是真正的好诗。好诗描述过的事情各不相同，韵律也变化无常，但是都有一点相同的东西。它有一种水晶般的光辉，好像是来自星星……真希望能永远读下去，打破这个寂寞的大海。我希望自己能写这样的诗。我希望自己也是一颗星星。如果我会发光，就不必害怕黑暗。如果我自己是那么美好，那么一切恐惧就可以烟消云散。于是我开始存下了一点希望——如果我能做到，那么我就战胜了寂寞的命运。但是我好久好久没有动笔写，我不敢拿那么重大的希望去冒险。如果我写出来糟不可言，那么一切都完了。”</p><p>看过一篇童话，森林举办选美大赛，小乌鸦黑漆漆的，被大伙嘲笑，不敢去参加选美了。于是它搜集起其他鸟的羽毛拼凑在一起，看起来也像那么回事。最后小乌鸦的羽衣被弄散架了，只好灰溜溜逃跑。我小时候一直耿耿于怀，小乌鸦明明是自己找的大家不要的羽毛，怎么就要被欺负呢。没想到后来我也变成这只小乌鸦，不敢展露自己文字的半点锋芒，总是四下搜刮零落的字句，把那些熠熠生辉的碎片捡起来，镶嵌在自己的句子里，这样多多少少显得明亮些。我的修辞，大部分时候是从海子那里偷来的皮毛，感觉也带有一点木心的成分。至于音律和词句，大都来自余光中。格调，有一部分是史铁生，而另一部分下落不明，疑似是金庸。而文风，很不要脸地说，是当了王小波的门下跑狗。总而言之，写东西时，我无时无刻不是别人，在每一个句读，每一个顿挫里。</p><p>博尔赫斯说，你不过是每一个孤独的瞬息。</p><br/><br/><p>其实我也明白，我明白，所谓的时代里的文艺，不过是包装精良的文艺故事把我整魔怔了。这是一种纯粹又空洞的可能性，只存在于臆想里。文字是背负着我的一部分却又永远逃逸着我的流星。它让我的心中永远存在漏风的豁口，不断糊上的窗户纸，不断地破掉。如果文学只能用一个词形容，我会说是“潦草”。</p><p>是的，我也曾把勇敢面对未来的希望寄托于当个文艺b，但是真的不够。面对突然来临的冷空气，最好的办法不是看《百年孤独》，共情遥远的马孔多萧瑟的故事。而是添几件衣服，然后多做点运动，吃点热乎的，睡个好觉。</p><p>看过一篇小诗，写烟雾缭绕的寺庙里，一个小女孩在望着双眼微闭的观世音菩萨说——菩萨呀，祝你身体健康。</p><p>那么，文学呀，我祝你永远不死。</p><br/><br/><p>居然赶在元旦前把这篇东西写完，收笔的一瞬间突然想到，戴拿和盖亚，是一个双押。</p><p>就写到这里吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凌晨一点遗事</title>
      <link href="/2023/11/03/%E5%87%8C%E6%99%A8%E4%B8%80%E7%82%B9%E9%81%97%E4%BA%8B/"/>
      <url>/2023/11/03/%E5%87%8C%E6%99%A8%E4%B8%80%E7%82%B9%E9%81%97%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p><em>你这艘脆弱的木筏 归处是哪里呢<br>是人群 还是行迹隐匿的月亮<br>你要飘流到哪个方向呢<br>要逃走的话 就在夜色的掩护下<br>你要去告别吗<br>与你的过去<br>与你的身体</em></p></br></br><p>凌晨一点被室友微信骚扰。</p><p>他说你床上怎么还亮着灯，我说我喜欢熬夜燃烧生命，这样明天起床就有一种涅槃重生的感觉，还有你不也没睡？</p><p>看过一个说法，年轻人熬大夜只是把七十岁的生命拿来赊账，提前兑现到了二十岁，虽然不知道比例，但四舍五入就是一天当两天过，青春无限续杯。</p><p>我不用白条不借花呗，还是落入了提前消费的陷阱。莫名其妙地想起银翼杀手，“一半的长度，双倍的闪耀”。</p><p>为什么熬夜？因为半夜的时间是我悄悄咪咪从白天里偷来的，是我从庸常的生活手上硬生生抢过来的，它们都是我暗淡生命的辉煌延伸。</p><p>漫漫长夜时间永恒，早起之后屁事多多。我好喜欢熬夜，我把它当成生命的延展。</p><p>白天我太累太窝囊，时间也被研磨得太碎。而夜晚的时间终于变得纯粹，整块整块的。质地均匀，毫无杂质，一切琐碎的沉淀下来可以不讲效率、随心所欲地浪费。</p><p>十二点是熬过今夕与昨夜的分界线，而凌晨一点，仿佛是跨过了生活与生存的交界处。</p></br></br><p>写这段时，就是凌晨一点。</p><p>凌晨一点只有一个坏处，它太安静了，安静到能轻易挑起汹涌的思绪。我变成旷野上唯一的稻草人，而反复纠缠的鸟群忽而又至。</p><p>记忆比我家的狗还听话，只要做出扔的动作，它总能从以前捡点东西回来。</p><p>蜷缩在夜色里，就像躲进儿时的被窝。</p><p>那时窗外灯火影影绰绰，夜空是紫罗兰一样的沉沉靛蓝，东方红大桥上偶尔传来遥远的汽笛，铁牛广场上的灯光绵延，一直延伸到涪江的那一边。而涪江，它比时间流得更慢。我的小床安稳，日子粘稠又缓慢。</p><p>那时我不想实现什么价值，只是希望明天可以玩得更开心一点。小时候打街机，三国无双，黄忠很菜赵云很强，一把币几包辣条一瓶可乐，玩到暮色沉沉，玩到看见奶奶黄昏里拉长的影子。</p><p>到底是什么把我深深埋在忧郁里。</p></br></br><p>说起忧郁，初中晚自习，有个大叔在门口和我的班主任求了很久，想让孩子进我们班，他几乎抽掉整整一盒烟也点不燃夜晚，熄灭的烟头是掐灭的念头。他牵着的小孩在门口矗立，攥着摞厚厚的奖状，沉默得像一段长满青苔的枯木。</p><p>忘记哪个心理学家说过，同情的本质其实是这件事尚未发生在自己身上的侥幸，我深以为然。还好那个小孩不是我。</p><p>后来某次考试，九门课，一共九百分的满分，年级第一考了808分，听见这个数字的瞬间，主观上世界停顿了半秒，像电影里那样，嗡的一声，大脑空白。</p><p>多少？</p><p>那是某个初夏的平常中午，隔壁床的人用讲乐子的平淡语气告诉我的。我上铺的哥们在洗鞋，水龙头哗哗响，床板一如既往地嘎吱嘎吱叫，有谁刚刚撕开了一袋辣条，满屋飘香。808这个分数似乎从来不存在，大家不以为意。</p><p>室友说，哎呀没事的，我们又不跟他比。</p><p>我很清楚，自己当然不可能争第一，这对我的排名造不成任何实质影响，他考多少和我一点关系都没有，却仍然没来由地陷入剧烈的痛苦当中，头皮实实在在的发麻，就像脚下的地面突然塌陷，恐惧爬上心头。</p><p>我第一次真正意识到，有些事居然真的不是我能改变的，哪怕献出我的一切都不够。</p><p>未来的剧本已悄然写好，在痛苦的思考中向我掀开一角作为预告，而在自己花大钱提前点映后，却看到了最烂的结局。</p><p>那时我重复最多的动作就是坐下。坐在学校的椅子上，开始一天的课程，下课就是做题，也很少动；周五放学，马上去坐到补习班的椅子上，开始不同的查漏补缺，学到十点，在回家的车上，我常常会睡着；周六，坐到家里房间的椅子，又是几个钟的作业和所谓自我提升时间，爸爸妈妈夸我懂事；至于周日，我就要回学校了。</p><p>阳光照不透窗口的树叶，所以屋里有点黑，让我想起那个不算太遥远的夜晚，那个抽烟的父亲，那个沉默的孩子，那样的无力感，一点一滴，实实在在地渗进我的骨髓。</p><p>我发觉我的老师兢兢业业，他们的责骂真如他们所说的那样是为了我们好，我的父母管我也只是想我拥有更多选择的权利，我的生活已经比他们好千百倍。</p><p>他们谁都没有错，可是我也没有错，只是有人能考出808，而我永远考不出808。</p><p>这是根本上的无能为力，是不能消除的系统误差，是世界运行的底层逻辑。</p><p>我的叛逆期骤然结束，太过于简单干脆了，就像关上了某个开关。与此相对的是，这件事在一瞬间就改变了我的性格，不知道哪里冒出来的黑色幽默，从此和我如影随形。</p><p>我变成一个喜欢在苦难面前嬉皮笑脸的人，不管遇到什么事情，第一反应先是笑，因为这样可以轻而易举地消解很多意义——很多事从根源上被解构以后，极端来说，无外乎管我什么事和管你什么事。</p><p>“黑色幽默是一种荒诞的，把痛苦与欢笑、荒谬的事实与平静得不相称的反应、残忍与柔情并列在一起的喜剧。”</p><p>哈哈，真的是这样吗？</p></br></br><p>其实，每个清醒的凌晨一点，我只是在害怕迎来又一个不可知的明天。</p><p>醒悟的时候才最困顿，意识到自己挣扎在最普通的无力感里，多少年穿林打叶，佯装着轰轰烈烈，一路上花开花落，又侥幸地起起跌跌。</p><p>我的文字似乎也快要从我笔下背井离乡。硬着头皮遣词拼凑，写出的都是好烂的比喻，词不达意的一口枯井。我挤出来的东西要么太寡淡要么太晦涩，段落与段落间气若游丝，一写东西顿感笔锋无力，我在期待什么呢？</p><p>我好羡慕王小波余光中海子，我喜欢他们的多感，个人意志可以在干净的文字里毫不费力地闪耀，所有意象就乖巧地蹲伏在他们膝下，事物间隐秘的联系晓若晨星，于是苍茫来事，信手吟游。</p><p>博尔赫斯说过，好的作品会唤起读者的感觉，不是描述在下雨的事实，而是被雨淋湿的感觉。王小波也说，要是一个作家沉迷于搜肠刮肚地找出各种形容词，他就完了。</p><p>我写东西的时候，要是准确抓住那样好的文字，哪怕只有一句，肯定会开心好几天。而且每每想到，多半还要窃喜着再拿出来咀嚼。</p><p>我的神来之笔，只是别人的史不绝书。</p><p>我的月亮，又是谁的床头灯。</p></br></br><p>我一直在和自己和解，不管再怎么失望，也要尝试接纳理想的落差。就像再怎么熬夜熬到凌晨一点，迟早也要沉沉睡去，不然是要猝死的。</p><p>对于不切实际的未来，我仍然擅自抱有不多不少的期许。就像我以前一直期望着能过上诗一样的生活，好消息是过上了，坏消息是后期杜甫。</p><p>在高考前，活在巨大的压力下，似乎这个世界上什么都是有限的，要是不豁出命去抢就拿不到。所以我以为，如果考不出808，自己的追求就不可能实现，我想要的都会被无一例外地摧毁掉。</p><p>我是从那时候开始喜欢海子，喜欢“我借此火得度一生的茫茫黑夜”，喜欢与我一拍即合的，繁杂又暴烈的情绪。那时我对他能写出“劈柴喂马周游世界”感到十万分的不可思议。直到今天，我才终于开始理解。</p><p>对完美的执念终将困我一生，但那又怎么样，我根本不需要去打败完美的人，对普通人而言，世界的资源是太过饱和的，任何一只狮子都不需要去抢机器人的大号电池。</p><p>生活不是要咬牙切齿地和谁去拼刺刀，也不是要去记恨谁。要实现自己的意志，不意味着要“反抗什么”，“拼命做什么”。很多时候这并不是好事，它会带来懒惰和优柔寡断。但对于我来说，这是最好的休克疗法。</p><p>呼吸式的做自己喜欢的东西，并且把它当做最平常的事情，从追求完美，变成追求小小的欢喜和一星如豆的温暖。</p><p>这是某种意义上的悲剧，但不太明显。可以忽略不计。想起加缪说过，悲剧是人生的开胃酒。</p><p>所以，我还在装模作样地写这些支离破碎的东西，笼络起零零散散的词句，不是因为我想让自己的文字不朽，只是让它们充当我和世界之间的双面间谍。</p><p>所以，我还在想，也许是时候要振作精神，试着去打一次ACM了，哪怕打不好也无所谓，再也不会有人指着鼻子骂我。</p><p>把酒换新，把心换旧。背起行囊，打出名堂，我也要收拾旧山河，圆起青春的谎话。</p></br></br><p>此时窗外风雨大作，重庆到十一月终于开始有一点冷，睡觉要盖厚被子了。</p><p>已经写到了两点，居然还没写完，那标题就取凌晨一点遗事吧。</p><p>文学性的残片还在纠缠我，没救了，意识流好像写过头了，这个话题改天再写，明天还有课，我要先睡个觉。</p><p>平静似水的夜里，我心底的一部分正在死去，和刚刚过去的凌晨一点一样，悄悄地永远消失不见，只留下些一时半会捉摸不透的感觉，像流水或轻烟，海波或浅雪，晨雾里开遍鲜花的原野。</p><p>青年的一切腐烂都是为了抽芽，早该见怪不怪。就由他去风雨飘摇吧。</p><p>总会有那么一天，只为了热腾腾的早餐就热切地期盼日出，我站在金色的天空下，美好如期而至。</p></br></br><p><em>已经到了钟表划定的时刻<br>该换乘到黎明的车厢了<br>带不走往昔的你<br>归处只有浪漫的土地<br>月亮的踪迹就在彼端<br>缥缈的心<br>就把它交给凌晨一点的星空吧<br>或凌晨两点<br>来者不拒</em></p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在二十岁</title>
      <link href="/2023/09/29/%E5%86%99%E5%9C%A8%E4%BA%8C%E5%8D%81%E5%B2%81/"/>
      <url>/2023/09/29/%E5%86%99%E5%9C%A8%E4%BA%8C%E5%8D%81%E5%B2%81/</url>
      
        <content type="html"><![CDATA[<p><em>日子稠密，把我的身体当做容器，<br>裹起一层一碰就响的铁皮，<br>它埋伏着五十年后致命的暗伤。<br>待价而沽的，是沉默的人，萧条的人，<br>是二十岁的人</em></p></br></br><p>我还以为在每个人的二十岁，变得光芒万丈是顺理成章的事呢。</p><p>面对着席卷而来的命运，我照样只会手足无措，无所适从，寻求逃避。如果可以，我还是很情愿大哭大闹的。根本不会有一个灵光乍现的时刻，也不会有任何机械降神的反转桥段，被寄予厚望的一切戏剧性都不存在。</p><p>偷一句村上春树的话，我一点也没做好二十岁的准备，挺纳闷的，就像是谁从背后把它推给了我一样。</p><p>现在这个满二十岁的人，是谁都行，可是，可是，怎么会是我。</p></br></br><p>小时候，幼儿园老师问我，你觉得什么样才算是长大了呢？</p><p>多简单，十八岁就是长大了。</p><p>两个老师看着我笑了起来，那个笑太清晰，我今天都忘不掉——过于顺理成章，水到渠成，好像在说：这个笑就是标准答案啊。</p><p>我慌了，改口说，那就是二十岁。</p><p>他们还在笑，不置可否。</p><p>别笑了！你们倒是告诉我啊！我真二十岁了，怎么还没长大。</p></br></br>计划要坐大巴去木格措，所以我偷偷摸摸地提前吃掉了自己的生日蛋糕。<p>我的蛋糕上只插着两根蜡烛。</p><p>小时候，有一次我爸过生日，我攒了好久的钱，给他买了个大蛋糕。该插蜡烛了，他只插了四根。我说真没意思，我专门拿了很多蜡烛呀。</p><p>我爸说，就插四根，四根意思意思就够了。</p><p>我说，大人都是这样的啊？多少岁就应该插多少蜡烛，这样才能好好记录自己是怎么长大的。</p><p>他没理我，只是点燃蜡烛，准备直接吹灭，我抢着说，这时候应该许个愿呀。</p><p>我爸终于噗嗤一声笑出来，看看我妈，又看看我，顺从地眯上眼开始许愿。沉默片刻，神色意外的肃穆，然后猛地吹出一大口气，火苗噗的一声消失。</p><p>“你到底许了什么愿望啊？”</p><p>“说出来就不灵了。”</p></br></br><p>看着面前的蛋糕，不得不承认，我也已经变成了不喜欢过生日的大人。</p><p>我害怕看着整整二十根蜡烛在面前摇曳，它们明晃晃地提醒我：你现在二十岁，要承担责任，不许逃避。</p><p>原来在二十岁时，“长大”已经结束了。一尊雕塑，在铸成的那一刻就已经停止创作，剩下的岁月只是漫长的磨蚀。</p><p>现在的生日不再是“长大”的里程碑，是催人“成长”的倒计时。这是完全不一样的。</p><p>青葱无恙，尽数典当。难释怀的事，早早扯断了我与往昔之间那根细细的风筝线。</p></br></br><p>坐在长途大巴上写这些时，又看见窗外有个磕长头的人。和我以前看见过的一模一样，衣服很脏很烂，胡子和头发一起飘飞。一步一磕，晃悠悠，背上巨大的转经筒一直替他沉默地祝祷。嘴里无声的吟哦，随风直上高原的悠远天空。</p><p>他的愿望好纯粹，干净得像是远处高山上，亘古不化的雪。他就在车窗外一闪而过，融化在山野间迷蒙的雾里。</p><p>我突然想到，那时之前吃蛋糕时该许个愿。</p></br></br><p>穿过雾气，康定汽车站旁边的青年旅舍里，一间小房里奇迹般挤下了六个大学生。</p><p>我们有一搭没一搭地谈天说地，慢慢熟络了起来。聊最俗气的人生和理想，谈川西，讲喜欢的女孩子，从摇滚聊到罗马法去。</p><p>最后我说，我一直在怀疑自己是不是真的想去川西。只玩三天，甚至谈不上浮光掠影。没做攻略前，我根本不知道木雅圣地是什么地方，也没听过折多山或木格措。</p><p>这些地方有一个共同点：给人以离家很远的疏离感，和浪漫无关，和救赎更不接壤。</p><p>大概在心底里，我其实只是想去很远的地方。暂时摆脱我小小的、固定的生命轨迹——街口来往的车，石灰石斑斓的地板，教室的嘈杂声音。</p><p>我不希望描绘到最后时，才发现我的生命里原来只剩下一个社区、一个房屋、一个卧室，甚至只是一张床。</p></br></br><p>我问，你们为什么来川西？</p><p>不许说青春啊理想啊之类的废话。</p><p>大家一时失语，支支吾吾，语焉不详。</p><p>我把磕长头的人描述给他们，说，我补许一个生日愿望吧。我希望自己能永远相信战胜死亡的年轻。</p><p>木格措，是我送给自己的生日礼物。二十岁，我应该开始为自己活着，而活着的花应该有一万种开法。</p><p>我上铺的哥们嬉皮笑脸地锐评说，我好像对生命的大走向无所吊谓，却对细枝末节斤斤计较。</p><p>我说也挺好，我们各自还有一生的奇迹。</p><p>这句是偷的后海大鲨鱼的歌词，但是他们没听过，惊呼我这句话帅闷了啊啊啊！</p></br></br><p>深深地吹一口气，吹熄生日蛋糕上的两根蜡烛，我爸怎么吹的，我就怎么吹的。</p><p>二十年的岁月，二十年的时光，二十年的细碎悲喜，原来只是那样轻的呜咽。</p><p>这种时候，似乎该写点什么、说点什么。</p><p>可是我欲言又止，怕自相矛盾。</p><p>真奇怪啊，命运，它居然是自顾自的摆拍。</p><p>我一瞬间知道了我爸那年的生日愿望，答案简直已经写在谜面上——一定是祈愿着我的未来。毕竟我是父母这对中年夫妻周身上下唯一相同的顽疾。</p><p>可二十岁以前，我根本不会想到这里去。它们对那时的我超纲，不回答也不扣分，毕竟夏虫不可语冰。</p><p>但是我不是虫，我能活到冬天的。</p></br></br><p>写这段的时候，青旅里的人还在睡觉，我要赶最早的一班大巴去成都的音乐节。</p><p>康定的清晨真的很冷，折多河奔腾翻涌，整座城半睡半醒，沉默地吞吐雾气。四下连绵的群山若隐若现，天空淡得像褪了色，川西仍然是我悬而未决的谜。</p><p>走在路上，我感觉自己正变成一个将错就错的通假字，等待着被谁好好地解释，又被谁完整地接受。</p><p>谁有想起我，谁有讲起我，谁有唱起我。</p><p>谁有忘记我，谁有妄议我，谁有藏起我。</p><p>偷一句余秀华的诗，反正是绚烂，反正是到来，反正是背负着慢慢凋残的孤独，耀眼的孤独，义无反顾的孤独。</p><p>在成人之前，多想先成为自己。</p><p>生日快乐。<br></br><br></br></p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泥头车，创啊创</title>
      <link href="/2023/07/26/%E6%B3%A5%E5%A4%B4%E8%BD%A6%EF%BC%8C%E5%88%9B%E5%95%8A%E5%88%9B/"/>
      <url>/2023/07/26/%E6%B3%A5%E5%A4%B4%E8%BD%A6%EF%BC%8C%E5%88%9B%E5%95%8A%E5%88%9B/</url>
      
        <content type="html"><![CDATA[<p>“如果故事里出现了一辆泥头车，那它就非要创死些什么不可。”契科夫没说过这句话。</p></br></br><p>好久没写新东西了，因为在组里混了一段时间。</p><p>期末考完试的保留节目是出去吃饭，我比较喜欢听大伙吃嗨了吹牛。</p><p>我还在脑子里搜刮乐子，突然听见有个哥们说，自己毕业以后要去北上广深发展，给我吓得抬头看了一眼，他眼睛里全是光，分不清是说认真的还是开玩笑。</p><p>晴天霹雳，心照不宣。大伙闷闷地笑两声，然后我率先喝一口冰红茶缓缓。</p><p>油腻腻的味道在山城的苍蝇馆子里泛滥，盘子叮叮当当，邻桌吵吵闹闹，电风扇档位不低，假装很努力地降温。</p><p>天气太热，时间黏糊糊的。</p><p>不开玩笑，来个高情商的教教我，在我放下水杯以后，这句话该怎么接？</p><p>不好意思说出口的是，去北上广深只会变成出栏的小肉猪，毕业证上印的钢印是“检疫合格”。</p></br></br><p>北上广深是什么地方，我说不出来，只有隔岸观火的侥幸。多少人曾把心愿寄了又寄，现实却是跛脚的邮递员。</p><p>如专家所愿地掏空了“六个钱包”，然后在某个房租很贵的小区呆了半辈子。</p><p>嗯，就这样了，然后呢。</p><p>我不想明知像个小丑还狡辩——户籍才不是某种挥之不去的诅咒，故乡绝对是必须剪断的辫子。房贷是什么，我不知道啊。</p><p>谁来告诉我，青春鲜亮的梦想怎么才能挤进出租屋？这和把大象装进冰箱难度一样高。</p><p>打开，放进去，关上，真的仅此而已吗。</p><p>梦想不应该和早高峰地铁上的我一样局促。</p></br></br><p>如果想要的东西得不到，厉害的人会不断努⼒进取，克服重重困难，最后大获全胜。</p><p>我这种，得不到就不想了，原地休克！</p><p>獐头鼠目地期待着，我总欺骗自己准备好了接受最坏的结果，可又暗搓搓地期待撞上什么大运，扭转乾坤，惊艳所有人。</p><p>当然，什么都不会发生。</p><p>最好的不会来，最坏的也轮不到我。卡在这里了。</p><p>难道还能怪幸运女神来敲门时没叫人吗？</p></br></br><p>最后大伙，都象征性表示了尊重和祝福，我想到纪录片里的临终关怀，大概就是这样的温柔。</p><p>走出饭馆，远远看见一辆泥头车呼啸而来。</p><p>它不装土石方，装的是失望，满满一车，创向生活，创向我。往事被碾得直挺挺的，未来被卷得皱巴巴的。</p><p>后来做导师的任务时，这辆泥头车终于追进我脑子里，把我狠狠创飞。</p></br></br><p>刚放假，舅舅带着他家小朋友来我家玩，我还在处理手上的四百个图像，从搜集数据到抠图到标注标签，一人全役，累成傻逼。</p><p>我妈说，你陪妹妹玩玩嘛。</p><p>我说我处理数据呢，没时间。</p><p>于是家里的小狗当场接替了我的职责，被小朋友欺负到嗷嗷叫。</p><p>我处理到一半，看见门开了个缝，小朋友伸了个脑袋凑进来看。</p><p>她说，哥哥，你在干什么呀，打游戏吗。</p><p>我说，我在做作业，这样你能理解不。</p><p>她说，你作业好多哦，我每天的作业两小时就写完了。</p><p>她说，你好惨啊。</p></br></br><p>我所有反驳的话都卡在脖子里出不来了，因为我工作确实多，确实有点惨，确实是连续好多天早早起来弄，一度熬夜加班，迎面撞上一个又一个ddl。</p><p>其实，倒也不是任务数量非常多，只是因为我本人太铸币，处理起来事倍功半，又非要打肿脸充胖子，在组里硬混着。</p><p>客观来说，进组的时候我根本不知道是来干什么的，只知道导师就像个头上带问号的NPC，会给我派任务，还给大伙安排了个实验室的桌子随便用。那个实验室全是研究生，压迫感太强，我从来没进去过。</p><p>至于任务，就是看网课的视频，我纯当科普小视频看了，觉得挺有意思，然后忘得一干二净。</p><p>等到第一次开组会，我发现组里的人都在讨论机器学习，卷积神经网络，自监督学习，互相问谁在用服务器跑大模型，小组在线交流平台搭好了吗。他们发言时总是针对某一个细节和导师点唇枪舌战，不经意地提出深刻而有洞见的理解。研究生学长用平易近人的语气解读着某一篇论文，他信手摆弄那些扭曲的符号，就像在说一场脱口秀。</p><p>轮到我了，我说，我本周学习了前几集的内容，深受启发，感触颇深，受益良多啊。</p><p>空气凝固，导师大惊失色：学这么多？他只需要再问一句，你能讲一讲你对自注意力机制的看法吗，我就会当场露馅。</p><p>那时我的紧张，丝毫不亚于那位在1936的春天进军莱茵兰非军事区的小胡子先生。</p><p>他没问。其实根本不需要问。</p><p>我是电影院里唯一没进入剧情的观众，是盗版的南郭先生，是临时帮人托管五分钟峡谷之巅的黄铜AD。</p></br></br><p>接下来的任务是读论文。</p><p>导师说，开学每个人都要好好汇报。</p><p>他人很好，给我派任务的时候笑眯眯的，诚挚地祝愿我未来的研究顺利。</p><p>我的方向是基于图神经网络（Graph Neural Network，GNN），进行图亲和力（affinity）的研究，也可以理解为一种双图性质预测，应用场景面向蛋白质与配体的可结合性预测。</p><p>我的目标是：仔细阅读文献2021-BIBM-Attention-enhanced graph cross-convolution for protein-ligand binding affinity prediction，搞懂如下问题：<br>1.蛋白质和配体的可结合的定义 2.整理所涉及到的对比方法，尤其是顶刊和顶会，CCF-B类以上，后续阅读，用于完成文献综述 3.该文的方法。</p><p>这意味着，我需要先啃下30小时的专业课程作为前置内容，然后钻进6页全英论文里，针对文章里提到的每一种对比方法进行遥远的溯源，直到全学明白了才能开始文献综述，就这样一层层学下去，直到在知识的海洋里溺水。</p></br></br><p>“你作业好多哦，我每天的作业两小时就写完了。”</p><p>对不起，做不到。</p><p>“你好惨啊。”</p></br></br><p>我被拉回到考完试出去吃饭那天，那辆泥头车已经创飞了我。</p><p>我发现，要是继续为了这点名分混在在组里，按我的水平，绝对不可能继续保证正常作息，我觉得，生活好像不应该是这样的。</p><p>是不是还存在这样一种可能：小城市，上下班的通勤从来不是问题。中午吃不好不差的单位食堂，工作三小时摸鱼五小时，五点半回家，大把时间浪费在有意思的事情上，和喜欢的人慢慢约会，和父母在一起吃顿好饭，晚上出去散步，周末和朋友四处游荡，吃东西看电影。日子慢慢流淌。</p><p>主观上，这样的生活胜天半子。</p><p>我在五分钟内就打通了导师的电话。</p><p>我知道我在逃避，这样是不积极向上的。在组里的人看来，我应该在学术领域中颇为无能且一定程度上失败，无法承受压力，是一坨负能量。</p><p>我知道我不学无术不求上进自暴自弃费拉不堪自甘堕落不成气候，我自己都知道，比任何人都更知道。</p><p>最遗憾的是拉开窗帘，窗外是久违的艳阳天。最可笑的是现在，畅想的未来总比以前想的忙一点。</p><p>我说，我不干了。</p><p>一句话直接给导师干懵了，上午才布置任务下午就不干了，是不是有什么难言之隐。</p><p>我说没有，大家都很好，只是我不干了。</p><p>抱歉。</p></br></br><p>挂掉电话。我终于认定命运不是注定，而这一次我记住了自己在何时做出选择。</p><p>沉默的三分钟里，大学生活好像也沉没了。</p><p>那些躲着黑暗里的事情——先考虑就业，谋生，买车，买房，结婚，然后按既定计划老去。一股脑冒出来，让人不得不去想。</p><p>它们好像全险半挂刹车失灵满速狂飙的泥头车，成千上万，来势汹汹，蛮不讲理，一刻不停地追在身后，我逃无可逃。</p><p>那种感受，每次回想起来都觉得莫名的灰暗，整个世界的饱和度骤然下降。象牙塔里的幻想烟消云散，像正午烈阳下的肥皂泡，破裂时悄然无声，再也找不到踪迹。</p><p>也许有一天，我会有勇气回头面对它们，傲岸孤高，昂首挺胸，潇洒得像一个真正的英雄。</p><p>更可能的情况是，我会被它们先后追上，接着被创得体无完肤，从此一点点失去对生活的控制权。</p><p>我不想要这种耗时一生的慢性死亡。</p><p>可是不想要就活不下去，怎么办嘛。</p></br></br><p>那些无可奈何的瞬间，言不由衷的选择，胸腔里回荡着的无声呐喊，总有一次会让你明白，谁说人生是四下寂然的空荡旷野，扯淡，人生明明是一条高速公路。</p><p>高速公路上不能调头，不走到预设的出口无法改变方向，就算改变，可供选择的方向也是有限的。</p><p>同样地，人除了延续现有的生活方式直到下一个改变的节点出现之外，别无选择。</p><p>对大部分大学生来说，这个节点就是考研。所以，为了在这个未来的转折点获得生活的选择权，理性上讲，必须放弃对当下生活可能性的选择权。也就是说只能默认选择备考，别无他法。</p><p>回想一下，在高中，我也放弃了对高中生活不同可能性的选择权，默认成为做题家，只为了在高考择校环节有自己的选择权。</p><p>这产生了一个死局，就是我们需要不断放弃生活的选择权，投身于效率最高但不那么舒服的方式，这样才能换取在下一个阶段的选择权。在下一个阶段，我们继续选择放弃现阶段的利益，而投身于新的延迟享受。比如说，选择成为做题家考出高分，才能在择校时占据主动。但是在下一个阶段，也就是大学生活里，面对就业的压力，我们选择考研，那么也要选择卷绩点保研或去拼命考研。接下来是就业，是晋升，无穷无尽。</p><p>如果我们总是选择“延迟享受”，就直接导致我们总是在延迟而不敢享受。特别是存在某种巨大压力的时候，我们只敢循规蹈矩而不愿意越雷池半步。接下来就轻松了，接下来是什么时候？</p><p>如果根本不存在享受，延迟享受只是一场酷刑。插播一条寻人启事，谁是西西弗斯？</p></br></br><p>生活的惯性好大，就和我们的忘性一样大，这是一个残忍的叙事诡计，因为实际上最重要的事情，根本不是做出什么选择，而是这样的选择由什么理由推动，我们又为什么会忘记这些理由。</p><p>难道我会选择不读高中而去参加马术比赛吗？不会的，因为我的认知里根本没有马术这个东西，这就像是游戏里的隐藏角色，我压根没有解锁，自然选不出来。</p><p>说白了，我面前只有读大学和搬砖抹灰这两条路，其他的路在我认知之外。这一点，凭我自己的力量无可更改。</p><p>那些所谓的转折点，其实都是两难的选择题。生活是一套冗长的问卷。</p><p>“你要追随本心、追随热爱去生活”，骗人的，生活不是填空题而是选择题，很多所谓“本心”，从一开始就是不存在的答案。</p><p>比如马术比赛，北上广深，课题组的论文任务，于我，都是选择题里不存在的E。</p><p>我的能力，不足以让我放弃高考参加马术比赛，这是先天的。也不足以让我在北上广深落户，这是客观的。甚至不足以让我读懂那篇他妈的论文。这是实实在在因为我自己能力不足导致的。</p><p>最后我还是选择了姑息放弃，我向自身孱弱能力和高远追求间的矛盾深深低头。</p><p>回头看，这是小时候无法想象的。我怎么会因为“没有能力”而失败呢。我理应光芒万丈。我选择的应该是灿烂或辉煌，而不是莫须有的苦难或幽怨的自我否定。</p><p>我拿的是主角剧本，不是吗？</p><p>不是的。人生，好像是一场漫长的，漫长的妥协。</p><p>我要落下来了，接稳哦。</p></br></br><p>组里研究生九月应该要发论文，按我的这点微末贡献，运气好可能堪堪会有个名挂在上面。这也就是说，我现在退组，也就等同于主动放弃了这篇AAAI的A类文挂名机会。</p><p>虽然概率微乎其微，但或许，多年后自己也会拍着大腿懊恼，后悔没有追一次梦，没有能够咬咬牙坚持到底。</p><p>但是我知道，归根到底，一切痛苦，本质上都是对自己无能的愤怒。</p><p>好多愿望没来得及在妥协前实现。小时候想当奥特曼，想拯救世界。然后想要雷速登闪电赛车的玩具。</p><p>想写精细的文字，在纸上绚烂像烟花绽放。想考赢我最讨厌的人。想拼尽全力，和喜欢的人在一起。</p><p>想在组里扎根立足，成为深度学习高手。想好好生活，想天天开心。</p><p>这些梦想，这些最美好的希冀，大部分已经被脑子里的泥头车创得零零碎碎。</p><p>我知道当一切都结束时，它们会悄悄变成眼泪滴落。</p></br></br><p>不论如何，还好，至少，我的可能性还握在自己手里，好像高考铃响前最后的十五分钟，有种必须做点什么的紧迫。</p><p>现在，我的痛苦，尚且是无所适从的虚无感。</p><p>只来自周六午睡过头之后，到外卖送达之前，作为一个碌碌无为的大学生，被全世界遗忘的三十分钟。</p><p>很抱歉写这么多。主观上，我一个字也不想留给苦难。我也不乐意写泥头车。</p><p>语尽词穷，我偏说是从容。</p><p>不写了，我只想趴在窗台看看天。</p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜食小记</title>
      <link href="/2023/05/28/%E5%A4%9C%E9%A3%9F%E5%B0%8F%E8%AE%B0/"/>
      <url>/2023/05/28/%E5%A4%9C%E9%A3%9F%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>选修课下课，排队等校车的人密密匝匝，多得能把我淹死。反正就在校门口，不如去天生丽街的夜市逛逛。</p><p>说实话，我对逛夜市没什么特别兴趣，因为全国各地的夜市好像都长一个样：人挤人，各式灯带流光溢彩，苏联解体音质的喇叭响个不停，眼前是油腻腻的袋子和模糊的面容。</p><p>明明已经知道里面都是什么：狼牙土豆、凉皮凉面、臭豆腐、羊肉串、烤面筋，再来点网红标签，还能有什么意思？</p><p>但是很奇怪，一到这种地方我总是走不动路，不吃点东西宛若受了刑。</p><p>谁有本事拒绝眼皮底下的浓油赤酱？脆生生的烈火烹油是我们天生的软肋。太质朴太简单——只要猛火弄熟，皮鞋都好吃啊。</p><p>世上早有姜、葱、蒜、盐、酱油、酒、醋、豆瓣酱、辣椒、花椒等等等等为食材点石成金的法宝，但到最后，所有调味料和食材都无法取代的，还是在人声鼎沸里花了时间，好好做出来的，最俗气的烟火气。</p><p>我扯着嗓子要了一份火爆大鱿鱼，多加辣。老板嚷嚷着说前面可排了不少人别急着点啊，我说不急，我先自己乱逛一会。</p><p>走在夜色里，看着小摊的灯，眼前影影绰绰，我以为很多事早就该忘了，可回忆的雾气分明来自多年之前。</p></br><p>小时候一家人自驾去北海，开车开到很晚，天彻底暗下来，我们在某个贵州和广西的边界城市歇脚。</p><p>那座小城的名字我已经忘了，只记得有好多好多停摆的厂房，不少建筑横七竖八地排开，黑漆漆的，像是某种巨兽的躯体。</p><p>我饿肚子了，早在高速上就嚷嚷着要找东西吃。在路边找到了几家大排档，很特别，它们开在一些很大的工棚里，像是某个厂没搬完剩下的。铁锈的味道隐约传入鼻腔，天花板高得离谱，只架着几口孤零零的灶台，看上去空空荡荡，显得不太协调。</p><p>座位倒是不少，一次性桌布上是黑乎乎油腻腻的塑封菜单。其实这种地方，菜单根本没什么用，都是说什么炒什么。我要了一份炒河粉。老板应了一声就回灶台埋头开炒，信手抓料，火舌呼呼地撩出来。</p><p>炒河粉上桌，牛肉肥厚，蒜苗油润，河粉透亮，咸鲜带甜，又脆又韧。夹一筷子一口下去，牙齿像陷进去似的，有嚼劲又滑润，特别是蒜苗嚼到唧唧吱吱响，越吃越想吃。</p><p>环顾四周，上座率挺高。没上菜前，吹牛的醉酒男人，缩在墙根下偷偷抽烟的高中生，月光沉默地在他们身边投下阴影。不再冒烟的工厂墙壁上画满涂鸦，让人想起百年孤独里那个最后老得动不了，只能被小朋友当玩具的乌尔苏拉。</p><p>我就着饮料吃下最后一口。从此再也没吃过这么香的炒河粉，这东西不讲配方，讲个劲头。</p></br><p>后来在上海，晚上在南京路游荡觅食，误打误撞拐进一个小巷子，意外发现了家馄饨店。</p><p>听说以前的老上海，晚上馄饨挑子过，楼上放个篮子，篮里放钱，馄饨挑子就将一碗馄饨放进篮里，提上去当宵夜，吃个肚饱暖，睡觉，多好。</p><p>要一碗小馄饨，老板就打开木头锅盖，从热气喧腾的锅里盛一碗出来，好像加了酱油、紫菜、虾米和麻油。</p><p>这家的小馄饨和四川这边的不一样，它的讲究只在汤与皮，馅不过小小一抹肉。只要汤鲜，皮滑就行。馄饨像金鱼似的飘荡，软若无物，滑溜带烫，不用勺子舀来吃，吸一口就全下去了。其实也就借个味过个口瘾而已。</p><p>喝完一碗小馄饨，在店里懒洋洋地歇着，店里陆陆续续来了不少人，点好单，沉默着坐下，吸溜吸溜喝完馄饨又沉默着离去。</p><p>有个阿婆像是熟客，用上海话讲了不少，我只听懂一句“吃个汤头葱花香”，一直记到今天，因为她好像踩中了诗的韵脚。</p><p>馄饨店灯光昏黄，装修用了许多木结构，似旧非旧的感觉让人着迷。它笼络了多少寂寥的胃啊。</p></br><p>以前和爸妈晚上出门逛街，那会不知道因为什么事情正在闹矛盾，遇到门口有个小哥在摆摊卖凉虾。</p><p>天气闷热难耐，正好点了碗凉虾，加西米露和小汤圆，多放红糖和醪糟。</p><p>第一口先小心翼翼吸一口，别让水冒出来了，也把干得发响的嘴润一润。</p><p>这样第二口就好端着碗，猛地来一口大的。甜而又冰，满嘴冰凉，又有醪糟那股酒味，杀舌头，不觉就嘴发丝丝声，太阳穴都冰得发痛，这才叫做真痛快。</p><p>这时候已经解过了瘾，再喝太快会败胃口，所以要徐徐喝第三口第四口，咕咚咚下肚，凉虾滑溜溜，满嘴甜得透透的。矛盾还在吗？好像已经不重要了。</p><p>第二天再去喝凉虾，没有找到他。后来他再也没有来过。</p><p>爸妈调侃说，这小伙子，一点定力都没有，应该是生意不好就不来这里了，真的是。</p></br><p>没来由地想起这些事，也没来由地想起了很多人，想起我与他们偶然的交错。</p><p>广西边界小城的青年，生活的风沙把你们吹到了哪？</p><p>吹牛的大叔，你的酒又醒了多少？</p><p>上海的阿婆，还常去那家馄饨店吗？</p><p>卖凉虾的小哥，你到底跑到哪里去了？</p><p>这些答案我都无从知晓了。就像是上一秒才凭空闯入千千万万原本无关的命运，下一秒就已经匆匆掠过。可以唯心地说，我们唯一的联系就是我断断续续的记忆。</p><p>这些记忆显然也是不可靠的。凭我的记性，或许我根本没有去过那些工厂里的大排档，这只是我的一场梦；又或者是我记错了在电视里看过的片段，把它当成了我的经历。</p><p>更要命的是，现在只有我会记得这些鸡毛蒜皮的小事，所以我也无从证实它们是否真实存在，这成了我生命里的一桩桩悬案。</p><p>然而，我还是愿意相信我的记忆。在我再一次忘记它们之前，这都会是一种微妙的心照不宣。</p><p>我的记忆维持着一段过往存在的可能性。也许就在某一个不起眼的瞬间，那些似是而非的往事在消逝和存续的十字路口上停滞不前，而我正挠着脑袋苦苦回忆：哎那天我干什么了来着？</p><p>这种感觉让人着迷。</p></br><p>是时候回去拿我的火爆大鱿鱼了。</p><p>想了这么久，为什么火爆大鱿鱼还没叫到我？去问老板。</p><p>原来她把我忘了。</p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于R的球员身价预测模型</title>
      <link href="/2023/05/22/3%E5%9F%BA%E4%BA%8EFIFA20%E7%90%83%E5%91%98%E6%95%B0%E6%8D%AE%E9%A2%84%E6%B5%8B%E8%BA%AB%E4%BB%B7/"/>
      <url>/2023/05/22/3%E5%9F%BA%E4%BA%8EFIFA20%E7%90%83%E5%91%98%E6%95%B0%E6%8D%AE%E9%A2%84%E6%B5%8B%E8%BA%AB%E4%BB%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>R语言大作业的要求是这样的：</p><blockquote><p>找到一些公共数据集，下载它们，对它们进行数据分析。<br>就分析步骤和结果写一份数据分析报告。源代码、图表必须包含在内。<br>最好演示典型的数据科学项目的整个过程，例如导入、整理、转换、可视化、建模等。</p></blockquote><p>能自己选自己要处理的数据集，那为什么不选点有意思的呢？</p><p>第一步的任务是找到合适的公共数据集。在数据科学网站<a href="https://kaggle.com/">kaggle</a>上有很多质量非常高的数据集，由衷感谢每一位把自己辛辛苦苦整理好的数据集共享在网站上的数据科学工作者，你们是开源精神的真正践行者，鞠躬。</p><p> 我最初的设想是找世界杯数据集，分析主客队进球的差异并进行预测，如何进一步推广到比赛的胜负。接着我发现这个思路并不可靠，因为世界杯主客队的区别也就仅限于开球先后的区别，说实话影响不大。更重要的是，世界杯上的比赛随机性非常恐怖，且能挖掘的数据量并不大，都是显而易见的数据，无法深入推进。展开来说，就是足球比赛本身因为过大的随机性导致以我的水平难以建模预测。话说回来，要是任何一种比赛没有随机性，估计也就没人想看了。总之，这导致想水一篇论文的难度变得比较大。</p><p> 于是我们转变思路，有没有什么整理好的数据，可以量化足球这项运动呢？</p><p> 答案是足球游戏数值，这是现成的已经量化球员数据。</p><p> 所以我选用了这个<a href="https://www.kaggle.com/datasets/stefanoleone992/fifa-20-complete-player-dataset">FIFA20数据集</a>进行建模。EA的FIFA系列年货一年一部，数据更新快，球员数量多，而且结构非常清晰，不需要过多处理就很适合用作建模的数据集。</p><p> 我的方向是通过球员的数据预测该球员的身价，需要用有逻辑的方法完成建模。</p><h1 id="初步建模"><a href="#初步建模" class="headerlink" title="初步建模"></a>初步建模</h1><h3 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h3><p> 根据作业要求，我们使用R语言。</p><p> 拿到一个数据集，第一件事肯定是先看看这个数据集的结构，连数据集里面有什么都不知道还怎么下手？所以我们现在的当务之急就是把刚下好的新鲜数据集导入RStuido进行处理。</p><p> 查看和设置RStudio的工作路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getwd()</span><br><span class="line">setwd(&quot;E:/FIFA 20&quot;)</span><br></pre></td></tr></table></figure><p> 如果数据集已经被放在工作路径，可以输入相对路径打开，<br> 如果数据集没有被放在工作路径，可以输入绝对路径打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data &lt;- read.csv(&quot;FIFA20.csv&quot;)</span><br><span class="line">data &lt;- read.csv(&quot;E:/FIFA 20/FIFA20.csv&quot;)</span><br></pre></td></tr></table></figure><p>然后导入需要用的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library(tidyverse) </span><br><span class="line">library (corrplot)</span><br><span class="line">library(caret)</span><br><span class="line">library(rpart)</span><br></pre></td></tr></table></figure><ul><li>tidyverse 数据可视化的集成包，包含了ggplot2等包，有助于进行可视化、建模等任务。</li><li>corrplot 于绘制相关系数矩阵的 R 包，提供了多种可视化相关系数矩阵的方法。</li><li>caret 用于分类、回归和聚类等的包，可以完成数据预处理、特征选择、模型训练、模型评估等任务。</li><li>rpart 用于决策树建模的 R 包</li></ul><p>在成功导入后，输入下列代码查看数据集基本情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summary(data)</span><br></pre></td></tr></table></figure><p>由于这个数据集里东西太多，出现了海量的数据，如下：</p><details>    <summary>点击展开/收缩代码块</summary>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sofifa_id       player_url         short_name         long_name              age            dob              height_cm    </span><br><span class="line"> Min.   :   768   Length:18278       Length:18278       Length:18278       Min.   :16.00   Length:18278       Min.   :156.0  </span><br><span class="line"> 1st Qu.:204446   Class :character   Class :character   Class :character   1st Qu.:22.00   Class :character   1st Qu.:177.0  </span><br><span class="line"> Median :226165   Mode  :character   Mode  :character   Mode  :character   Median :25.00   Mode  :character   Median :181.0  </span><br><span class="line"> Mean   :219739                                                            Mean   :25.28                      Mean   :181.4  </span><br><span class="line"> 3rd Qu.:240796                                                            3rd Qu.:29.00                      3rd Qu.:186.0  </span><br><span class="line"> Max.   :252905                                                            Max.   :42.00                      Max.   :205.0  </span><br><span class="line">                                                                                                                             </span><br><span class="line">   weight_kg      nationality            club              overall        potential       value_eur            wage_eur     </span><br><span class="line"> Min.   : 50.00   Length:18278       Length:18278       Min.   :48.00   Min.   :49.00   Min.   :        0   Min.   :     0  </span><br><span class="line"> 1st Qu.: 70.00   Class :character   Class :character   1st Qu.:62.00   1st Qu.:67.00   1st Qu.:   325000   1st Qu.:  1000  </span><br><span class="line"> Median : 75.00   Mode  :character   Mode  :character   Median :66.00   Median :71.00   Median :   700000   Median :  3000  </span><br><span class="line"> Mean   : 75.28                                         Mean   :66.24   Mean   :71.55   Mean   :  2484038   Mean   :  9457  </span><br><span class="line"> 3rd Qu.: 80.00                                         3rd Qu.:71.00   3rd Qu.:75.00   3rd Qu.:  2100000   3rd Qu.:  8000  </span><br><span class="line"> Max.   :110.00                                         Max.   :94.00   Max.   :95.00   Max.   :105500000   Max.   :565000  </span><br><span class="line">                                                                                                                            </span><br><span class="line"> player_positions   preferred_foot     international_reputation   weak_foot      skill_moves     work_rate          body_type        </span><br><span class="line"> Length:18278       Length:18278       Min.   :1.000            Min.   :1.000   Min.   :1.000   Length:18278       Length:18278      </span><br><span class="line"> Class :character   Class :character   1st Qu.:1.000            1st Qu.:3.000   1st Qu.:2.000   Class :character   Class :character  </span><br><span class="line"> Mode  :character   Mode  :character   Median :1.000            Median :3.000   Median :2.000   Mode  :character   Mode  :character  </span><br><span class="line">                                       Mean   :1.103            Mean   :2.944   Mean   :2.368                                        </span><br><span class="line">                                       3rd Qu.:1.000            3rd Qu.:3.000   3rd Qu.:3.000                                        </span><br><span class="line">                                       Max.   :5.000            Max.   :5.000   Max.   :5.000                                        </span><br><span class="line">                                                                                                                                     </span><br><span class="line">  real_face         release_clause_eur  player_tags        team_position      team_jersey_number loaned_from           joined         </span><br><span class="line"> Length:18278       Min.   :    13000   Length:18278       Length:18278       Min.   : 1.0       Length:18278       Length:18278      </span><br><span class="line"> Class :character   1st Qu.:   563000   Class :character   Class :character   1st Qu.: 9.0       Class :character   Class :character  </span><br><span class="line"> Mode  :character   Median :  1200000   Mode  :character   Mode  :character   Median :17.0       Mode  :character   Mode  :character  </span><br><span class="line">                    Mean   :  4740717                                         Mean   :20.1                                            </span><br><span class="line">                    3rd Qu.:  3700000                                         3rd Qu.:27.0                                            </span><br><span class="line">                    Max.   :195800000                                         Max.   :99.0                                            </span><br><span class="line">                    NA&#x27;s   :1298                                              NA&#x27;s   :240                                             </span><br><span class="line"> contract_valid_until nation_position    nation_jersey_number      pace         shooting       passing        dribbling    </span><br><span class="line"> Min.   :2019         Length:18278       Min.   : 1.00        Min.   :24.0   Min.   :15.0   Min.   :24.00   Min.   :23.00  </span><br><span class="line"> 1st Qu.:2020         Class :character   1st Qu.: 6.00        1st Qu.:61.0   1st Qu.:42.0   1st Qu.:50.00   1st Qu.:57.00  </span><br><span class="line"> Median :2021         Mode  :character   Median :12.00        Median :69.0   Median :54.0   Median :58.00   Median :64.00  </span><br><span class="line"> Mean   :2021                            Mean   :12.12        Mean   :67.7   Mean   :52.3   Mean   :57.23   Mean   :62.53  </span><br><span class="line"> 3rd Qu.:2022                            3rd Qu.:18.00        3rd Qu.:75.0   3rd Qu.:63.0   3rd Qu.:64.00   3rd Qu.:69.00  </span><br><span class="line"> Max.   :2026                            Max.   :30.00        Max.   :96.0   Max.   :93.0   Max.   :92.00   Max.   :96.00  </span><br><span class="line"> NA&#x27;s   :240                             NA&#x27;s   :17152        NA&#x27;s   :2036   NA&#x27;s   :2036   NA&#x27;s   :2036    NA&#x27;s   :2036   </span><br><span class="line">   defending         physic        gk_diving      gk_handling      gk_kicking     gk_reflexes       gk_speed     gk_positioning </span><br><span class="line"> Min.   :15.00   Min.   :27.00   Min.   :44.00   Min.   :42.00   Min.   :35.00   Min.   :45.00   Min.   :12.0    Min.   :41.00  </span><br><span class="line"> 1st Qu.:36.00   1st Qu.:59.00   1st Qu.:60.00   1st Qu.:58.00   1st Qu.:57.00   1st Qu.:60.75   1st Qu.:29.0    1st Qu.:58.00  </span><br><span class="line"> Median :56.00   Median :66.00   Median :65.00   Median :63.00   Median :61.00   Median :66.00   Median :39.0    Median :64.00  </span><br><span class="line"> Mean   :51.55   Mean   :64.88   Mean   :65.42   Mean   :63.15   Mean   :61.83   Mean   :66.39   Mean   :37.8    Mean   :63.38  </span><br><span class="line"> 3rd Qu.:65.00   3rd Qu.:72.00   3rd Qu.:70.00   3rd Qu.:68.00   3rd Qu.:66.00   3rd Qu.:72.00   3rd Qu.:46.0    3rd Qu.:69.00  </span><br><span class="line"> Max.   :90.00   Max.   :90.00   Max.   :90.00   Max.   :92.00   Max.   :93.00   Max.   :92.00   Max.   :65.0    Max.   :91.00  </span><br><span class="line"> NA&#x27;s   :2036    NA&#x27;s   :2036    NA&#x27;s   :16242   NA&#x27;s   :16242   NA&#x27;s   :16242   NA&#x27;s   :16242   NA&#x27;s   :16242   NA&#x27;s   :16242  </span><br><span class="line"> </span><br><span class="line"> #数据过多，部分展示，下略。</span><br></pre></td></tr></table></figure></details></br><p>我们只需要取到部分有用的即可，大部分无意义的数据（例如player_url等）并不需要考虑。</p><p>所以我们现在的任务是整理数据，把有用的部分从完整的数据集里取出，单独组合在一起，这样有利于更方便地训练我们的模型。</p><p>初步考虑后，我挑选了以下数据：</p><ul><li>‘height_cm’,’weight_kg’ <strong>身高、体重的基本信息</strong></li><li>‘skill_moves’,’pace’,’shooting’,’passing’,’dribbling’,’defending’,’physic’ <strong>传球，射门等技术水平</strong></li><li>‘gk_diving’,’gk_handling’,’gk_kicking’,’gk_reflexes’,’gk_speed’,’gk_positioning’ <strong>门将技术水平</strong></li><li>‘overall’,’potential’,’wage_eur’ <strong>能力值，潜力，年薪等参考数值</strong></li><li>‘value_eur’ <strong>身价本身，用于训练的最关键数据</strong></li></ul><p>接下来，出于逻辑性的考虑，我们应该优先对这些数据进行初步的相关性分析。</p><p>如果直接处理这些数据，会出现一个问题：部分内容无法被正确分析，显示出问号。</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_8392ebc0bd98a47a55bb22d42b7af006.jpg"></p><p>根据对图像中出错区域的分析，这可能是由于数据缺失导致的。</p><p>在这里我优先怀疑是否存在数据集质量较低，数据不完全的情况。</p><p>输入代码如下查看球员传球这一项的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head (short_name)</span><br><span class="line">head (passing)</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; head (short_name)</span><br><span class="line">[1] &quot;L. Messi&quot;          &quot;Cristiano Ronaldo&quot; &quot;Neymar Jr&quot;         &quot;J. Oblak&quot;         </span><br><span class="line">[5] &quot;E. Hazard&quot;         &quot;K. De Bruyne&quot;     </span><br><span class="line">&gt; head (passing)</span><br><span class="line">[1] 92 82 87 NA 86 92</span><br></pre></td></tr></table></figure><p>在返回结果中，我们发现 “J. Oblak”这位球员没有’’passing’’数据，因为奥布拉克是效力于马德里竞技的门将。作为门将，他在游戏里的任务只是守门，只有门将特有的部分属性。他并没有被设置传球数据，所以这一项设为NA，如果直接对数据进行处理就会出现不可避免的错误。</p><p>同理，梅西也不会有’’gk_positioning’’数据，因为他根本不会守门，也不会有门将站位的数据，如果直接对他进行处理，也会在门将的数据上出相同的错。</p><p>对于这个问题，我的解决方案是把门将和非门将球员区分开，因为这两个位置的量化数据是不一样的。</p><p>所以我给出代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#处理非门将有效数据，无关紧要的数据去除</span><br><span class="line">data &lt;- df[,c(&#x27;height_cm&#x27;,&#x27;weight_kg&#x27;,&#x27;overall&#x27;,&#x27;potential&#x27;,&#x27;value_eur&#x27;,&#x27;release_clause_eur&#x27;,&#x27;wage_eur&#x27;,&#x27;skill_moves&#x27;,&#x27;pace&#x27;,&#x27;shooting&#x27;,&#x27;passing&#x27;,&#x27;dribbling&#x27;,&#x27;defending&#x27;,&#x27;physic&#x27;)] </span><br><span class="line">data &lt;- data[!is.na(data$passing),]  #守门员没有passing数据，这一行去掉所有passing为NA的球员</span><br><span class="line">corr_matrix &lt;- cor(data)</span><br><span class="line">corrplot(corr_matrix, method = &quot;square&quot;,diag = F, type = &quot;lower&quot;)</span><br><span class="line"></span><br><span class="line">#处理非门将有效数据，无关紧要的数据去除</span><br><span class="line">data_gk &lt;- df[,c(&#x27;height_cm&#x27;,&#x27;weight_kg&#x27;,&#x27;overall&#x27;,&#x27;potential&#x27;,&#x27;value_eur&#x27;,&#x27;release_clause_eur&#x27;,&#x27;wage_eur&#x27;,&#x27;gk_diving&#x27;,&#x27;gk_handling&#x27;,&#x27;gk_kicking&#x27;,&#x27;gk_reflexes&#x27;,&#x27;gk_speed&#x27;,&#x27;gk_positioning&#x27;)] </span><br><span class="line">data_gk &lt;- data_gk[!is.na(data_gk$gk_diving),] #同上，筛选门将。</span><br><span class="line">corr_matrix_gk &lt;- cor(data_gk)</span><br><span class="line">corrplot(corr_matrix_gk, method = &quot;square&quot;,diag = F, type = &quot;lower&quot;)</span><br></pre></td></tr></table></figure><p>这段代码筛选了门将球员和非门将球员，为他们各自保留了有价值的数据。</p><p><code>cor()</code>函数用于计算变量之间的相关系数，生成一个由变量之间的相关性组成的方阵，其中对角线上的元素表示每个变量与自身之间的相关性（始终为1），而非对角线的元素则表示每对变量之间的相关性。</p><p><code>corrplot()</code>函数用于创建相关性矩阵的图。<code>method = &quot;square&quot;</code>参数指定图应该是方形的，<code>diag = F</code>参数则指示函数从绘图中删除对角线元素（因为它们始终为1）。最后，<code>type = &quot;lower&quot;</code>参数指定只显示相关性矩阵的下三角部分，因为矩阵是对称的，上三角部分是重复的。</p><p> 可视化结果为下图：<br> <img src="https://markdown.liuchengtu.com/work/uploads/upload_2227341ba9f67ea1b8671e6c1b06f71a.jpg"></p><p>越蓝的部分相关性越强，越红的部分相关性越弱。</p><p>不难发现所有选中的数据与身价 ‘value_eur’的交点都是蓝色，正相关。</p><h3 id="用线性回归模型建模"><a href="#用线性回归模型建模" class="headerlink" title="用线性回归模型建模"></a>用线性回归模型建模</h3><p>现在开始建模，我先选用线性回归模型，对非门将球员进行处理。</p><p>首先需要把数据拆分为训练集和实验集，在训练集训练模型后，用实验集的数据去测试模型，这样可以有效评估模型精度。我们把数据拆分成70%训练集，30%实验集。</p><p>为了让结果可复现，还需要设置一个种子保证在这个种子下的每次随机生成结果都一样。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set.seed(313)</span><br><span class="line">ind &lt;- sample(2,nrow(data),replace=T,prob=c(0.7,0.3))</span><br><span class="line">data_train &lt;- data[ind == 1,]</span><br><span class="line">data_test &lt;- data[ind == 2,]</span><br></pre></td></tr></table></figure><p>这段代码用于将一个数据集 data 划分为训练集和测试集。</p><p>具体来说，set.seed(313) 是设置一个随机种子，以确保每次运行代码时都能得到相同的随机结果。ind &lt;- sample(2,nrow(data),replace&#x3D;T,prob&#x3D;c(0.7,0.3)) 则是生成一个长度为 nrow(data)的随机数向量，其中每个元素的取值为 1 或 2，概率分别为 0.7 和 0.3，表示将数据集中的样本随机划分为训练集和测试集。其中，sample() 函数用于生成随机数向量，replace&#x3D;T 表示采样时可以重复抽样，prob&#x3D;c(0.7,0.3) 表示生成的随机数向量中取值为 1 和 2的概率分别为 0.7 和 0.3。</p><p>接下来，data_train &lt;- data[ind &#x3D;&#x3D; 1,] 将数据集中随机取值为 1的样本作为训练集，赋值给 data_train 变量。而 data_test &lt;- data[ind &#x3D;&#x3D; 2,] 则将数据集中随机取值为 2的样本作为测试集，赋值给 data_test 变量。</p><p>通过将数据集划分为训练集和测试集，我们可以使用训练集来训练模型，并使用测试集来评估模型的性能。这样可以更好地估计模型对未知数据的预测能力，并避免模型在训练数据上过拟合的问题。</p><p>接下来，把数据导入，得到模型<code>data_model</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_model &lt;- lm(value_eur~ height_cm + weight_kg + overall + potential + wage_eur + skill_moves + pace + shooting + passing + dribbling + defending + physic,data_train)</span><br></pre></td></tr></table></figure><p>接下来使用这个模型，对测试集里的数据进行预测，用<code>data_pred</code>接收预测的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_pred = predict(data_model,data_test)</span><br></pre></td></tr></table></figure><p>为了有效评估模型的准确度，我们用真实值减去预测值得到误差<code>data_error</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_actual &lt;- data_test$value_eur</span><br><span class="line">data_error &lt;- data_actual - data_pred</span><br></pre></td></tr></table></figure><h3 id="误差可视化分析"><a href="#误差可视化分析" class="headerlink" title="误差可视化分析"></a>误差可视化分析</h3><p>接下来，我们对误差进行可视化处理。</p><p>如果直接画图，会出现这样的结果：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_9e83209029af1f71bfdce77b900a87ef.jpg"></p><p>这不是能获取有效信息的图。显然x轴范围太大了，是部分极端数据导致的。</p><p>反复试错后，确定范围为±1500000，这样的图牺牲了304个极端数据。而测试集样本总量为4851个，去除了约6%的数据，我认为这是可以接受的误差。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ggplot(data.frame(data_error), aes(x = data_error, fill = (data_error &gt; 0))) +</span><br><span class="line">  geom_histogram(binwidth = 50000, color = &quot;black&quot;) +</span><br><span class="line">  scale_x_continuous(limits = c(-1500000, 1500000)) +</span><br><span class="line">  scale_fill_manual(values = c(&quot;red&quot;, &quot;green&quot;)) +  # 手动指定颜色</span><br><span class="line">  xlab(&quot;Error&quot;) + ylab(&quot;Count&quot;) </span><br></pre></td></tr></table></figure><p>具体来说，data.frame(data_error) 将一个包含模型误差的向量 data_error 转换为数据框（data frame）格式，并将其作为 ggplot() 函数的数据源。aes(x &#x3D; data_error, fill &#x3D; (data_error &gt; 0)) 则指定了直方图的变量和填充颜色，其中 x 参数指定了直方图的横轴变量为 data_error，而 fill 参数则根据 data_error的取值是否大于 0 来填充直方图的颜色。</p><p>接下来，geom_histogram(binwidth &#x3D; 50000, color &#x3D; “black”) 添加了一个直方图层，其中 binwidth 参数指定了直方图的柱宽为 50000，color 参数指定了柱子的边框颜色为黑色。</p><p>scale_x_continuous(limits &#x3D; c(-1500000, 1500000)) 和 scale_fill_manual(values &#x3D; c(“red”, “green”)) 分别指定了直方图横轴的取值范围和填充颜色的取值范围。其中，limits 参数将横轴的取值范围限制在 -1500000 到 1500000 之间，values 参数手动指定了填充颜色为红色和绿色。</p><p>最后，xlab(“Error”) + ylab(“Count”) 分别指定了横轴和纵轴的标签为 “Error” 和 “Count”。</p><p>画出的图像如下：</p><p><img src="https://markdown.liuchengtu.com/work/uploads/upload_22016d1c271e94c28e37e6c473459af4.jpg"></p><p>可见大体符合正态分布的形式。</p><p>接下来绘制残差图，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot(data_pred, data_error, xlab = &quot;Predicted Value&quot;, ylab = &quot;Residuals&quot;, xlim = c(-1000000, 1000000),ylim = c(-3000000, 3000000))</span><br><span class="line">abline(h = 0, col = &quot;red&quot;)</span><br></pre></td></tr></table></figure><p>图像如下：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_d9fe26b762be8a7ab50a2c1f2def76ea.jpg"></p><p>发现左侧误差普遍较高，通常意味着模型在预测较小的变量时出现了偏差。可是这里，模型居然给出了小于0的预测值，这是不可接受的，我们需要用ifelse语句修正。</p><p>补充代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_pred &lt;- ifelse(data_pred&lt;0,0,data_pred)</span><br></pre></td></tr></table></figure><p>接下来使用交叉验证，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个交叉验证控制对象ctrl，指定交叉验证方法为&quot;cv&quot;，即k折交叉验证，k的值为10。</span><br><span class="line">ctrl &lt;- trainControl(method = &quot;cv&quot;, number = 10)</span><br><span class="line"># 进行交叉验证</span><br><span class="line">data_model_cv1 &lt;- train(value_eur ~., data = data_train, method = &quot;lm&quot;,trControl = ctrl)</span><br><span class="line"># 查看交叉验证结果</span><br><span class="line">data_model_cv1$results</span><br></pre></td></tr></table></figure><p>这里使用的k折交叉验证是其中最常用的一种。它将数据集分成k个大小相等的子集，然后重复k次。在每一次重复中，选择其中一个子集作为测试集，其余的k-1个子集作为训练集。然后对模型进行训练，并在测试集上进行测试，记录误差。这样就会得到k个评估分数，平均值可以作为模型的性能指标。这种方法可以有效地减少模型过拟合和欠拟合的可能性，从而提高模型的泛化能力。</p><p>得出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept    RMSE  Rsquared     MAE RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 2578957 0.7844251 1370050 316320 0.03640009 60225.02</span><br></pre></td></tr></table></figure><p>术语笔记记录：</p><ul><li>RMSE（Root Mean Squared Error）：均方根误差，是实际值与预测值之间误差的平方和的平均值的平方根。RMSE越小，代表模型的预测能力越好。</li><li>R-squared（R平方）：决定系数，是实际值与预测值之间的相关性的平方。R平方在0到1之间，越接近1代表模型的拟合程度越好。</li><li>MAE（Mean Absolute Error）：平均绝对误差，是实际值与预测值之间误差的绝对值的平均值。MAE越小，代表模型的预测能力越好。</li><li>RMSESD：RMSE的标准差，用于评估模型的泛化能力。</li><li>RsquaredSD：R平方的标准差，用于评估模型的稳定性。</li><li>MAESD：MAE的标准差，用于评估模型的稳定性和泛化能力。</li></ul><p>R值仅有0.78，均方根误差2578957，平均绝对误差1370050。</p><p>可以接受，我们仍然能做得更好。</p><h1 id="误差分析和修正"><a href="#误差分析和修正" class="headerlink" title="误差分析和修正"></a>误差分析和修正</h1><h3 id="采用数据的问题"><a href="#采用数据的问题" class="headerlink" title="采用数据的问题"></a>采用数据的问题</h3><p>上文提及，我采用了如下的数据。</p><ul><li>‘height_cm’,’weight_kg’ <strong>身高、体重的基本信息</strong></li><li>‘skill_moves’,’pace’,’shooting’,’passing’,’dribbling’,’defending’,’physic’ <strong>传球，射门等技术水平</strong></li><li>‘gk_diving’,’gk_handling’,’gk_kicking’,’gk_reflexes’,’gk_speed’,’gk_positioning’ <strong>门将技术水平</strong></li><li>‘overall’,’potential’,’wage_eur’ <strong>能力值，潜力，年薪等参考数值</strong></li><li>‘value_eur’ <strong>身价本身，用于训练的最关键数据</strong></li></ul><p>这些数据是否完全反映了球员的身价？基本信息已经完全录入，而还可以入手的地方就是侧面反映球员能力的’’参考数据’’。除能力值，潜力，年薪之外，我发现我在第一轮建模时忽略了一个数据：强制解约金。</p><p>其他球队可以通过支付这笔解约金来买断这名球员的合同，解约金一般高于该球员身价。数据集里梅西的解约金是1.9亿欧元，而某位不知名球员’’Mohammed Sagaf’’解约金只有可怜的7万欧元。所以我认为，球员的合同里存在的强制解约金可以间接反映这个球员的价值。</p><p>在训练模型时加入解约金这一项，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data &lt;- df[,c(&#x27;height_cm&#x27;,&#x27;weight_kg&#x27;,&#x27;overall&#x27;,&#x27;potential&#x27;,&#x27;value_eur&#x27;,&#x27;release_clause_eur&#x27;,&#x27;wage_eur&#x27;,&#x27;skill_moves&#x27;,&#x27;pace&#x27;,&#x27;shooting&#x27;,&#x27;passing&#x27;,&#x27;dribbling&#x27;,&#x27;defending&#x27;,&#x27;physic&#x27;)] </span><br><span class="line">data &lt;- data[!is.na(data$passing),]  #守门员没有passing数据</span><br><span class="line">corr_matrix &lt;- cor(data)</span><br><span class="line">corrplot(corr_matrix, method = &quot;square&quot;,diag = F, type = &quot;lower&quot;)</span><br></pre></td></tr></table></figure><p>如果直接处理，仍然会出现问号，如下图：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_523a0a7eed6fe7b9a8f1539f65418ede.jpg"><br>在上面的探究中，我们已经知道问号出现的原因是出现了空缺的数据。</p><p>检查数据集，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summary(data$release_clause_eur)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA&#x27;s </span><br><span class="line">18000    609000   1300000   4924714   4000000 195800000      1165 </span><br></pre></td></tr></table></figure><p>可见1165个球员的合同并没有加入解约金条款，所以解约金数据空缺。</p><p>现在有两个方法处理这些空缺的数据：</p><ul><li>去除所有空缺数据。</li><li>把空缺的部分用该项数据的平均值填补。</li></ul><p>这部分球员数量占比仅达到了7%左右，且水平参差不齐，用该项数据的平均值填补可能导致出现进一步的误差。处于严谨性，我们按之前建立线性回归模型的方法对这两种方法都进行一次测试，量化地对比两个方法。</p><h4 id="去除所有空缺数据"><a href="#去除所有空缺数据" class="headerlink" title="去除所有空缺数据"></a>去除所有空缺数据</h4><p>与先前的方法相比，添加代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data &lt;- data[!is.na(data$release_clause_eur),]</span><br></pre></td></tr></table></figure><p>这个代码可以把所有空缺项全部去掉，接下来按之前的方法操作，最后再使用交叉验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个交叉验证控制对象ctrl，指定交叉验证方法为&quot;cv&quot;，即k折交叉验证，k的值为10。</span><br><span class="line">ctrl &lt;- trainControl(method = &quot;cv&quot;, number = 10)</span><br><span class="line"># 进行交叉验证</span><br><span class="line">data_model_cv1 &lt;- train(value_eur ~., data = data_train, method = &quot;lm&quot;,trControl = ctrl)</span><br><span class="line"># 查看交叉验证结果</span><br><span class="line">data_model_cv1$results</span><br></pre></td></tr></table></figure><p>得出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 646712.3 0.9867474 289196.5 57692.47 0.00225056 11995.83</span><br></pre></td></tr></table></figure><p>可以发现，这里已经比原模型有了较明显的提升，在分析出更好的处理方法后，我们会对它们的结果进行可视化处理，有利于直观地分析差距。</p><h4 id="用平均值填补"><a href="#用平均值填补" class="headerlink" title="用平均值填补"></a>用平均值填补</h4><p>与先前的方法相比，添加代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data$release_clause_eur[is.na(data$release_clause_eur)] &lt;- mean(data$release_clause_eur, na.rm = TRUE)</span><br></pre></td></tr></table></figure><p>这个把所有空缺项全部用解约金平均值填补。接下来按之前的方法操作，最后再使用交叉验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个交叉验证控制对象ctrl，指定交叉验证方法为&quot;cv&quot;，即k折交叉验证，k的值为10。</span><br><span class="line">ctrl &lt;- trainControl(method = &quot;cv&quot;, number = 10)</span><br><span class="line"># 进行交叉验证</span><br><span class="line">data_model_cv1 &lt;- train(value_eur ~., data = data_train, method = &quot;lm&quot;,trControl = ctrl)</span><br><span class="line"># 查看交叉验证结果</span><br><span class="line">data_model_cv1$results</span><br></pre></td></tr></table></figure><p>得出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept    RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 1034079 0.9633106 454096.9 322250.3   0.022778 31027.41</span><br></pre></td></tr></table></figure><h4 id="可视化分析"><a href="#可视化分析" class="headerlink" title="可视化分析"></a>可视化分析</h4><p>评估思路非常简单，对比两组数据即可。首先把两组数据单独列出，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 &lt;- as.data.frame(data_model_cv1$results)</span><br><span class="line">df2 &lt;- as.data.frame(data_model_cv2$results)</span><br></pre></td></tr></table></figure><p>这段代码将 data_model_cv1 和 data_model_cv2 两个交叉验证模型的结果转换为数据框（data frame）格式，并分别赋值给了 df1 和 df2 两个变量。</p><p>先合并RMSE&#x2F;MAE数据，因为它们相近且远大于R方。然后绘图。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 合并RMSE/MAE</span><br><span class="line">df &lt;- data.frame(Model = rep(c(&quot;Blank&quot;, &quot;Average&quot;), each = 2),</span><br><span class="line">                 Metric = rep(c(&quot;RMSE&quot;, &quot;MAE&quot;), 2),</span><br><span class="line">                 Value = c(df1$RMSE,df1$MAE, mean(df2$RMSE),mean(df2$MAE)))</span><br><span class="line"># 绘制关于RMSE/MAE的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br></pre></td></tr></table></figure><p>同理处理R方，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 合并数据框，R方</span><br><span class="line">df &lt;- data.frame(Model = rep(c(&quot;Blank&quot;, &quot;Average&quot;), each = 1),</span><br><span class="line">                 Metric = rep(c(&#x27;Rsquared&#x27;), 2),</span><br><span class="line">                 Value = c(df1$Rsquared,mean(df2$Rsquared)))</span><br><span class="line"># 绘制关于R方的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Rsquared Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br></pre></td></tr></table></figure><p>得到的图像是：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_d34f67216a4e99f8c0b1b6fb7441180a.jpg"><br><img src="https://markdown.liuchengtu.com/work/uploads/upload_222e18fe48c69cdd74003d3229afd947.jpg"></p><p>可以清晰看出，“去除所有空缺数据”这一方法效果更好。</p><p>我们就采用这种方法建模。</p><h3 id="空缺数据的问题"><a href="#空缺数据的问题" class="headerlink" title="空缺数据的问题"></a>空缺数据的问题</h3><p>虽然我们解决了门将和非门将的能力值不同导致的问题，但是数据是否真的没有空缺仍然需要对数据集进行进一步的检查和分析。我在对最关键的数据‘value_eur’，即身价本身检查时发现了问题，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summary(data$value_eur)</span><br></pre></td></tr></table></figure><p>检查结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Min.   1st Qu.    Median      Mean   3rd Qu.      Max. </span><br><span class="line">   0    325000    700000   2484038   2100000 105500000 </span><br></pre></td></tr></table></figure><p>可见身价的最低值是0，而我们的问题是：球员身价为0是否是建模时的可靠依据？</p><p>继续挖掘数据，查看身价为0的球员到底有哪些。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[data$value_eur == 0,]</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><details><summary>点击展开/收缩代码块</summary>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    height_cm weight_kg overall potential value_eur wage_eur skill_moves pace shooting passing </span><br><span class="line">328        185        80      82        82         0        0           2   80       43      56        </span><br><span class="line">329        177        75      82        82         0        0           4   81       77      81        </span><br><span class="line">408        181        82      81        81         0        0           2   71       61      57        </span><br><span class="line">409        171        63      81        81         0        0           4   82       72      77        </span><br><span class="line">410        188        83      81        81         0        0           3   80       82      60        </span><br><span class="line">411        188        84      81        81         0        0           4   80       80      56        </span><br><span class="line">567        177        75      80        80         0        0           3   68       62      74        </span><br><span class="line">568        178        69      80        80         0        0           4   79       54      76        </span><br><span class="line">750        182        79      79        79         0        0           2   70       48      60        </span><br><span class="line">751        175        70      79        79         0        0           2   81       57      72        </span><br><span class="line">753        176        73      79        79         0        0           4   84       79      65       </span><br><span class="line">792        179        71      78        83         0        0           3   73       38      65        </span><br><span class="line">802        175        70      78        82         0        0           3   75       73      76        </span><br><span class="line">869        180        78      78        78         0    21000           3   36       51      67       </span><br><span class="line">889        183        80      78        78         0        0           2   59       49      64        </span><br><span class="line">918        196        91      78        78         0        0           3   65       76      67       </span><br><span class="line">990        168        65      78        78         0        0           4   87       58      70        </span><br><span class="line">991        177        75      78        78         0        0           3   78       51      69       </span><br><span class="line">992        174        71      78        78         0        0           4   80       73      76        </span><br><span class="line">1088       182        74      77        80         0        0           3   80       68      73        </span><br><span class="line">1161       184        74      77        77         0        0           3   73       76      63        </span><br><span class="line">1250       188        88      77        77         0        0           3   71       70      69        </span><br><span class="line">1251       178        71      77        77         0        0           4   80       68      77        </span><br><span class="line">1252       176        75      77        77         0        0           4   80       71      71   </span><br><span class="line">    </span><br><span class="line">#截取部分，下略。</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></details></br><p>在输出结果里，存在大量能力值并不低的球员，他们的身价不应该为0。</p><p>对照数据集检查，在这份名单里出现的球员在那时都没有合同，正好处于自由身状态。换句话说，这个数据集里的自由球员身价都为0，这导致了误差的出现，所以我们需要处理自由身球员的身价。</p><p>我采取的方法是去除所有的自由球员，因为自由球员的数量并不大，仅有134个，比3.1中更少。而上面已经说明，去除所有自由球员效果更好。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_gk &lt;- data_gk[!(&#x27;value_eur&#x27; == 0),] #自由球员身价是0，无参考价值,应该去掉</span><br></pre></td></tr></table></figure><p>接下来按之前的方法评估模型，输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept    RMSE  Rsquared     MAE   RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 2602833 0.7828398 1377350 224113.4 0.02685402 70124.29</span><br></pre></td></tr></table></figure><p>效果并不比原模型好多少，几乎一致。</p><h3 id="合二为一"><a href="#合二为一" class="headerlink" title="合二为一"></a>合二为一</h3><p>综上，我们的建模的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#按“去除所有空缺数据”处理球员数据，相比“赋予平均值”效果更好，接下来会证明 </span><br><span class="line">data &lt;- df[,c(&#x27;height_cm&#x27;,&#x27;weight_kg&#x27;,&#x27;overall&#x27;,&#x27;potential&#x27;,&#x27;value_eur&#x27;,&#x27;release_clause_eur&#x27;,&#x27;wage_eur&#x27;,&#x27;skill_moves&#x27;,&#x27;pace&#x27;,&#x27;shooting&#x27;,&#x27;passing&#x27;,&#x27;dribbling&#x27;,&#x27;defending&#x27;,&#x27;physic&#x27;)] </span><br><span class="line">data &lt;- data[!is.na(data$passing),]  #守门员没有passing数据，精准打击</span><br><span class="line">data &lt;- data[!is.na(data$release_clause_eur),]</span><br><span class="line"></span><br><span class="line">#分训练集和实验集</span><br><span class="line">set.seed(313)</span><br><span class="line">ind &lt;- sample(2,nrow(data),replace=T,prob=c(0.7,0.3))</span><br><span class="line">data_train &lt;- data[ind == 1,]</span><br><span class="line">data_test &lt;- data[ind == 2,]</span><br><span class="line">#建模</span><br><span class="line">data_model &lt;- lm(value_eur~ height_cm + weight_kg + overall + release_clause_eur + potential + wage_eur + skill_moves + pace + shooting + passing + dribbling + defending + physic,data_train)</span><br><span class="line">#获取误差</span><br><span class="line">data_pred = predict(data_model,data_test)</span><br><span class="line">data_pred &lt;- ifelse(data_pred&lt;0,0,data_pred)</span><br><span class="line">data_actual &lt;- data_test$value_eur</span><br><span class="line">data_error &lt;- data_actual - data_pred</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 将评估结果单独列出</span><br><span class="line">df1 &lt;- as.data.frame(data_model_cv1$results)</span><br><span class="line">df2 &lt;- as.data.frame(data_model_cv2$results)</span><br><span class="line"></span><br><span class="line"># 合并RMSE/MAE</span><br><span class="line">df &lt;- data.frame(Model = rep(c(&quot;New Model&quot;,&quot;Old Model&quot;), each = 2),</span><br><span class="line">                 Metric = rep(c(&quot;RMSE&quot;, &quot;MAE&quot;), 2),</span><br><span class="line">                 Value = c(df1$RMSE,df1$MAE, mean(df2$RMSE),mean(df2$MAE)))</span><br><span class="line"># 绘制关于RMSE/MAE的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br><span class="line"></span><br><span class="line"># 合并数据框，R方</span><br><span class="line">df &lt;- data.frame(Model = rep(c( &quot;New Model&quot;,&quot;Old Model&quot;), each = 1),</span><br><span class="line">                 Metric = rep(c(&#x27;Rsquared&#x27;), 2),</span><br><span class="line">                 Value = c(df1$Rsquared,mean(df2$Rsquared)))</span><br><span class="line"># 绘制关于R方的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Rsquared Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 646712.3 0.9867474 289196.5 57692.47 0.00225056 11995.83</span><br></pre></td></tr></table></figure><p>去除自由球员后，模型精度并未变化。</p><p>现在的模型和原模型对比如下：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_8c33b4b4bdcebfd8089383186db35d88.jpg"><br><img src="https://markdown.liuchengtu.com/work/uploads/upload_9610e824d56521657faaf9e881e6579f.jpg"></p><p>好，那现在我的评价是：薄纱。</p><h1 id="与决策树模型对比"><a href="#与决策树模型对比" class="headerlink" title="与决策树模型对比"></a>与决策树模型对比</h1><h3 id="决策树模型建模"><a href="#决策树模型建模" class="headerlink" title="决策树模型建模"></a>决策树模型建模</h3><p>决策树模型的建立过程与线性回归模型很像，我们导入的数据保持先前发现的最好配置，即“去除自由球员”，“去除无解约金球员”。这样不仅保证了模型精度，也和线性回归模型一致。</p><p>建模过程的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 划分训练集和测试集</span><br><span class="line">set.seed(313)</span><br><span class="line">ind &lt;- sample(2, nrow(data), replace = TRUE, prob = c(0.7, 0.3))</span><br><span class="line">data_train &lt;- data[ind == 1, ]</span><br><span class="line">data_test &lt;- data[ind == 2, ]</span><br><span class="line"></span><br><span class="line"># 构建决策树模型</span><br><span class="line">data_model &lt;- rpart(value_eur ~ height_cm + weight_kg + overall + release_clause_eur + potential + wage_eur + skill_moves + pace + shooting + passing + dribbling + defending + physic, data = data_train)</span><br><span class="line"></span><br><span class="line"># 对测试集进行预测</span><br><span class="line">data_pred &lt;- predict(data_model, data_test)</span><br><span class="line">data_pred &lt;- ifelse(data_pred&lt;0,0,data_pred)</span><br><span class="line"></span><br><span class="line"># 计算预测误差</span><br><span class="line">data_actual &lt;- data_test$value_eur</span><br><span class="line">data_error &lt;- data_actual - data_pred</span><br></pre></td></tr></table></figure><h3 id="误差可视化分析-1"><a href="#误差可视化分析-1" class="headerlink" title="误差可视化分析"></a>误差可视化分析</h3><p>同理，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 绘制误差直方图，限制误差范围为±1000000</span><br><span class="line">ggplot(data.frame(data_error), aes(x = data_error, fill = (data_error &gt; 0))) +</span><br><span class="line">  geom_histogram(binwidth = 50000, color = &quot;black&quot;) +</span><br><span class="line">  scale_x_continuous(limits = c(-1000000, 1000000)) +</span><br><span class="line">  scale_fill_manual(values = c(&quot;red&quot;, &quot;green&quot;)) +</span><br><span class="line">  xlab(&quot;Error&quot;) + ylab(&quot;Count&quot;) </span><br></pre></td></tr></table></figure><p>得到图像如下：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_eb4658f319a88e12e8ba4953b2850e29.jpg"></p><p>看起来略抽象。</p><h3 id="与线性回归模型对比"><a href="#与线性回归模型对比" class="headerlink" title="与线性回归模型对比"></a>与线性回归模型对比</h3><p>代码与3.1近似，需要注意的是，决策树模型使用交叉验证得到了三组结果，需要用平均值处理。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 将评估结果转换为数据框</span><br><span class="line">df1 &lt;- as.data.frame(data_model_cv1$results)</span><br><span class="line">df2 &lt;- as.data.frame(data_model_cv2$results)</span><br><span class="line"></span><br><span class="line"># 合并数据框，RMSE/MAE</span><br><span class="line">df &lt;- data.frame(Model = rep(c(&quot;Linear Regression&quot;, &quot;Decision Tree&quot;), each = 2),</span><br><span class="line">                 Metric = rep(c(&quot;RMSE&quot;, &quot;MAE&quot;), 2),</span><br><span class="line">                 Value = c(df1$RMSE,df1$MAE, mean(df2$RMSE),mean(df2$MAE)))</span><br><span class="line"># 绘制关于RMSE/MAE的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Evaluation Metrics between Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br><span class="line"></span><br><span class="line"># 合并数据框，R方</span><br><span class="line">df &lt;- data.frame(Model = rep(c(&quot;Linear Regression&quot;, &quot;Decision Tree&quot;), each = 1),</span><br><span class="line">                 Metric = rep(c(&#x27;Rsquared&#x27;), 2),</span><br><span class="line">                 Value = c(df1$Rsquared,mean(df2$Rsquared)))</span><br><span class="line"># 绘制关于R方的柱状图</span><br><span class="line">ggplot(df, aes(x = Metric, y = Value, fill = Model)) +</span><br><span class="line">  geom_bar(stat = &quot;identity&quot;, position = position_dodge()) +</span><br><span class="line">  labs(title = &quot;Comparison of Rsquared Two Models&quot;,</span><br><span class="line">       x = &quot;Metric&quot;, y = &quot;Value&quot;, fill = &quot;Model&quot;)</span><br></pre></td></tr></table></figure><p>得到图像如下：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_452e2800ebcfc7c52d4880301559a044.jpg"><br><img src="https://markdown.liuchengtu.com/work/uploads/upload_64d81a8736541af351b41fdb957c01d4.jpg"></p><p>甚至不如原模型，决策树你就是逊啊。</p><h1 id="建模总结"><a href="#建模总结" class="headerlink" title="建模总结"></a>建模总结</h1><p>最终，我的模型效果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD</span><br><span class="line">1      TRUE 646712.3 0.9867474 289196.5 57692.47 0.00225056 11995.83</span><br></pre></td></tr></table></figure><p>预测误差直方图：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_de1572f4f9786f96b5c8af5b2d20f737.jpg"></p><p>残差图：<br><img src="https://markdown.liuchengtu.com/work/uploads/upload_d571be2ca196dc1af770d8d2ba107a8e.jpg"></p><p>可见已经较为贴近直线，拟合效果较好。</p><p>建模工作结束，关山难越今日越。</p>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2023/05/18/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/05/18/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<strong>L1ttleQing</strong>的小站。</p><p>磨蹭了整整一天，放弃了wp选择了hexo，一边写一边学，终于还是把博客配置成了能看的样子。</p><p>现在这里什么都没有，但是迟早会有的。以后这里会放一些我自己的<del>学习心得</del>和随笔，粗粝浅显，不堪卒读。</p><br/><br/><p>我当大学生的第一年都干了什么呢，哈哈，我只知道一点技术都没学到手。</p><p>计算机是纯技术的学科，各凭本事，有就是有，行就是行，差距就明明白白地放在代码上。就像是明牌斗地主，我还在对我这一手可以凑电话号码的牌沾沾自喜，转头一看别人已经随手打了我个春天。实际上我写出来的代码大都半死不活，差一口气就会死在电脑里。我学计算机不靠灵感，靠的是毫无作为带来的愧疚感。精神愉悦就只是两段漫长焦虑之间的休息。</p><p>高考前我以为大学是搞学术的象牙塔，现在发现其实不是的。大学好像是青年旅舍、游乐园、黑网吧、廉价食堂、兴趣班、动感地带、世纪佳缘的古怪结合体。绝大部分人都处在某种意义上的摆烂状态。整个世界也不过是被形形色色的摆烂人临时拼凑起来的草台班子。</p><p>摆烂是骑车时一路顺风的长下坡，你只会希望它永远永远没有尽头。</p><p>有人说，等人生到了谷底，无论如何都会向上。但是如果我愿意当个穿山甲，总还能继续往下打洞。</p><p>要从摆烂状态脱离出来的难度，不亚于刚喝了热牛奶，抱着猫，在暴雨天躺下，快要睡着的时候，蹭一下爬起来，猛刷五道算法题并条分缕析地做好思路分析。</p><p>理想中的完美状态下，一切问题都可以成功解决、然后压力清零，不再为自我厌恶所困。王小波说，“一个人在胸中抹煞可信和不可信的界限，多是因为生活中巨大的压力。走投无路的人就容易迷信，而且是什么都信。虽然原因让人同情，但放弃理性总是软弱的行径。”我深知这样的状态是绝对不会存在的。因为我们无师自通地守着一个又一个生活的节点，上了一个岸以后还有千千万万的岸要上，“等到上岸以后就轻松了”，这导致等待和期许注定无穷无尽，让人生更像一个数值膨胀的垃圾游戏，是盗版的刻舟求剑，因为能力永远赶不上进度。</p><p>正入万山圈子里，一山放过一山拦。</p><br/><br/><p>虽然但是，我还是说过很多次我再也不摆了，我要痛定思痛，洗心革面，振作精神，披荆斩棘，突破自我，迎难而上了！</p><p>这就像小时候说，我就买这一个玩具，以后再也不买了。</p><p>一直说到整个桌子上全是玩具，再想放也放不下。</p><p>“再也不会”，很奇怪的词。明明是决绝的，遗憾的，不可挽回的，说出来的时候，却那么有生命力。</p><p>我再也不会了，再也不会，真的真的。</p><p>可是啊，可是不管再来多少次，我的第一年都还是会像现在一样窝在被窝里当小懒虫——这很显然是好听的说法，准确来说是大懒猪。哼唧哼唧。</p><p>我还是会选择头也不回地挥霍大把的时光，把日子信手揉成一团，不皱眉头，让年岁炸成堪堪一响的烟花。</p><p>第二年，世事如刀，我再来领教。</p><br/><br/><p>写到这里，突然想起高考，那是我一生里最伟大的时光。</p><p>我想起出发时鞭炮是如何噼啪炸响，勉强盖过放个不停的俗套励志歌曲。</p><p>我晃晃悠悠走在人群里，顺其自然地从一段命运走向另一段。</p><p>想起自己是怎样小心地穿过烟尘和烂泥，挤开人群，爬上大巴，毫无意识。</p><p>攥着准考证，座位上呛人的风油精味里，我死死盯住鞋上粘着的红纸。这是什么征兆。</p><p>想起人群中好多双眼睛，马达轰鸣。</p><p>然后，我的大部分智力，似乎被我不小心夹进高考英语答题卡里交上去了。</p><p>网上说，高考纸质试卷的保存时间为6个月，之后粉碎制成纸浆，进行废物利用。</p><p>那应该是找不回来了。<br><br/><br><br/></p><p>至于现在呢，硬要说的话，我的状态就像后备隐藏能源突然被人挖了。</p><p>或者换个例子，打游戏的时候经常会有加速buff，buff一结束就觉得自己已经跑不动了。</p><p>蒸汽机器人用完W确实会跑不动，所以这不是幻觉（×）</p><p>要是早知道生活会变成这样，我就该好好记录自己每个时期的变迁史，给时光打上精准的锚点，把它们仔仔细细折叠收好。</p><p>所以我搭了这个博客。</p><p>这样一来，日子会被严丝合缝地收拢，记忆的针脚密密匝匝，只需要信手翻看，就可以知道每一个不同的我在生命的缝隙里填充了什么奇奇怪怪的东西，我是如何用不同的方法浪掷相似的时光。偶尔心血来潮远眺当年，也不至于无从寻找。</p><p>挺搞笑的，感觉这是老头子才爱做的事，似乎应该是端端地坐在公园的长椅上，午后阳光正好。来日所剩无几，就拿往事找补。不紧不慢地倒腾脑子里的旧风物，在方寸间一次次返老还童，也一次次重蹈覆辙，乐此不疲。</p><p>于是回忆就慢慢变得圆润通透，近似于搓了些年岁的核桃。越是按博尔赫斯所言不断重组往事，人就越像一头爱反刍的牛。</p><br/><br/><p>2010年，我叼着玻璃瓶装汽水的吸管，坐在科学城游泳馆门口的长椅上等爸爸买小吃摊的烤里脊出来。</p><p>阳光热辣辣，我眯着眼睛，盯着地上反光的水渍发愣。假期闷热漫长百无聊赖，让人怀疑时间是一个圆，世界上根本没有长大这回事，现在不需要考虑的事以后也不需要考虑，如果与我无关就永远与我无关，对于多年后这个下午出现在梦里的频率毫不知情、无法想象。</p><p>骤然的成长，结果太仓促，过程太漫长。</p><p>请看我头顶簪花，一路走来一路盛开。</p><p>频频遗漏一些，又深陷风霜雨雪的感动。</p><br/><br/><p>我慢慢意识到自己从来不是世界的主角，命运不总是妙到毫巅的同花顺，所到之处也未必高灯明照。</p><p>给你问声好吧，后来看到这篇文章时的那个自己，现在你那边什么情况？</p><p>希望你还记得，当年那个折腾一晚上还弄不好菜单栏的小鬼就是你。你还被文章简介卡了两小时。</p><p>记得这天下午吗？原本配好的插件集体自尽，满屏幕的红字，狠狠上了点强度。你把官方文档翻来覆去看了一万遍，还是找不出来问题，只能急得嗷嗷乱叫。</p><p>最后发现原来是冒号打成中文冒号了，哈哈。</p><p>你就是我，一路雨雪风霜应该是禁不起回望。</p><p>空庭明月闲复闲，夜长路远山复山。</p><p>光年是长亭或是短亭？</p>]]></content>
      
      
      <categories>
          
          <category> 随感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随感 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
